<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux System Monitoring Tips</title>
    <link href="/2018/11/08/Linux-System-Monitoring-Tricks/"/>
    <url>/2018/11/08/Linux-System-Monitoring-Tricks/</url>
    
    <content type="html"><![CDATA[<p>Some common commands for Linux: System status. Here, we use Ubuntu 16.04 LTS as example</p><h2 id="Check-system-running-time"><a href="#Check-system-running-time" class="headerlink" title="Check system running time"></a>Check system running time</h2><p>Sometimes we want to know the uptime since last restart of the system. </p><pre><code class="hljs bash">uptime15:25:19 up 15 days,  5:35,  6 users,  load average: 0.00, 0.00, 0.02</code></pre><h2 id="Check-logged-in-users"><a href="#Check-logged-in-users" class="headerlink" title="Check logged in users"></a>Check logged in users</h2><pre><code class="hljs bash">who -a           system boot  2018-10-24 10:50LOGIN      tty1         2018-10-24 10:50              1740 id=tty1ryan     + pts/0        2018-11-06 11:47  old        31085 (tmux(31085).%0)           run-level 5  2018-10-24 10:51bach     + pts/1        2018-11-08 15:25   .         18851 (141.161.238.204)chaz     + pts/2        2018-10-31 14:38 03:42       24392 (141.161.238.171)chaz     + pts/3        2018-10-31 14:39 22:30       24521 (141.161.238.171)ryan     + pts/4        2018-11-06 14:10  old        31085 (tmux(31085).%2)ryan     + pts/5        2018-11-08 10:14 01:44       31085 (tmux(31085).%3)           pts/6        2018-11-08 13:50             31085 id=ts/6  term=0 <span class="hljs-built_in">exit</span>=0           pts/7        2018-11-06 10:33             26453 id=ts/7  term=0 <span class="hljs-built_in">exit</span>=0           pts/8        2018-11-06 10:33             26453 id=ts/8  term=0 <span class="hljs-built_in">exit</span>=0           pts/9        2018-11-06 10:33             26453 id=ts/9  term=0 <span class="hljs-built_in">exit</span>=0           pts/10       2018-11-05 12:01             26453 id=s/10  term=0 <span class="hljs-built_in">exit</span>=0           pts/11       2018-11-06 10:33             26453 id=s/11  term=0 <span class="hljs-built_in">exit</span>=0           pts/12       2018-11-06 10:33             26453 id=s/12  term=0 <span class="hljs-built_in">exit</span>=0           pts/13       2018-11-06 10:33             26453 id=s/13  term=0 <span class="hljs-built_in">exit</span>=0           pts/14       2018-11-06 10:33             26453 id=s/14  term=0 <span class="hljs-built_in">exit</span>=0           pts/15       2018-11-06 10:33             26453 id=s/15  term=0 <span class="hljs-built_in">exit</span>=0           pts/16       2018-11-06 10:33             26453 id=s/16  term=0 <span class="hljs-built_in">exit</span>=0           pts/17       2018-11-06 10:33             26453 id=s/17  term=0 <span class="hljs-built_in">exit</span>=0           pts/18       2018-11-06 10:33             26453 id=s/18  term=0 <span class="hljs-built_in">exit</span>=0           pts/19       2018-11-06 10:33             26453 id=s/19  term=0 <span class="hljs-built_in">exit</span>=0           pts/20       2018-11-06 10:33             26453 id=s/20  term=0 <span class="hljs-built_in">exit</span>=0           pts/21       2018-11-06 10:33             26453 id=s/21  term=0 <span class="hljs-built_in">exit</span>=0</code></pre><h2 id="Check-system-version-information"><a href="#Check-system-version-information" class="headerlink" title="Check system version information"></a>Check system version information</h2><pre><code class="hljs bash">uname -aLinux wkstn-c30 4.4.0-138-generic <span class="hljs-comment">#164-Ubuntu SMP Tue Oct 2 17:16:02 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre><h2 id="Check-current-environment-variables"><a href="#Check-current-environment-variables" class="headerlink" title="Check current environment variables"></a>Check current environment variables</h2><pre><code class="hljs bash"><span class="hljs-built_in">export</span><span class="hljs-built_in">declare</span> -x HOME=<span class="hljs-string">&quot;/home/bach&quot;</span><span class="hljs-built_in">declare</span> -x LANG=<span class="hljs-string">&quot;en_US.UTF-8&quot;</span><span class="hljs-built_in">declare</span> -x LIBVIRT_DEFAULT_URI=<span class="hljs-string">&quot;qemu:///system&quot;</span><span class="hljs-built_in">declare</span> -x LOGNAME=<span class="hljs-string">&quot;bach&quot;</span><span class="hljs-built_in">declare</span> -x MAIL=<span class="hljs-string">&quot;/var/mail/bach&quot;</span><span class="hljs-built_in">declare</span> -x OLDPWD<span class="hljs-built_in">declare</span> -x PATH=<span class="hljs-string">&quot;/home/bach/bin:/home/bach/CRISPResso_dependencies/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin&quot;</span><span class="hljs-built_in">declare</span> -x PWD=<span class="hljs-string">&quot;/home/bach&quot;</span><span class="hljs-built_in">declare</span> -x SHELL=<span class="hljs-string">&quot;/bin/bash&quot;</span><span class="hljs-built_in">declare</span> -x SHLVL=<span class="hljs-string">&quot;1&quot;</span><span class="hljs-built_in">declare</span> -x SSH_CLIENT=<span class="hljs-string">&quot;141.161.238.204 53729 22&quot;</span><span class="hljs-built_in">declare</span> -x SSH_CONNECTION=<span class="hljs-string">&quot;141.161.238.204 53729 141.161.238.154 22&quot;</span><span class="hljs-built_in">declare</span> -x SSH_TTY=<span class="hljs-string">&quot;/dev/pts/1&quot;</span><span class="hljs-built_in">declare</span> -x TERM=<span class="hljs-string">&quot;linux&quot;</span><span class="hljs-built_in">declare</span> -x USER=<span class="hljs-string">&quot;bach&quot;</span><span class="hljs-built_in">declare</span> -x XDG_DATA_DIRS=<span class="hljs-string">&quot;/usr/local/share:/usr/share:/var/lib/snapd/desktop&quot;</span><span class="hljs-built_in">declare</span> -x XDG_RUNTIME_DIR=<span class="hljs-string">&quot;/run/user/1000&quot;</span><span class="hljs-built_in">declare</span> -x XDG_SESSION_ID=<span class="hljs-string">&quot;3621&quot;</span></code></pre><h2 id="check-directory-and-file-usage"><a href="#check-directory-and-file-usage" class="headerlink" title="check directory and file usage"></a>check directory and file usage</h2><pre><code class="hljs bash">du -h --max-depth=18.0K    ./.ssh40K     ./.texlive2018614M    ./.<span class="hljs-built_in">local</span>48K     ./.byobu154M    ./.dropbox-dist3.5G    ./chebi176M    ./apache-tomee-plume-7.0.2_for_yaoxiang28K     ./.config191M    ./.cache2.3G    ./R2.0G    ./cmm_bak90M     ./ceu_mass_mediator2.8M    ./.rstudio106M    ./cmm_versions28K     ./.java8.0K    ./.mplayer9.4G    .</code></pre><h2 id="Check-usage-on-mount"><a href="#Check-usage-on-mount" class="headerlink" title="Check usage on mount"></a>Check usage on mount</h2><pre><code class="hljs bash">df -hFilesystem                       Size  Used Avail Use% Mounted onudev                              32G     0   32G   0% /devtmpfs                            6.3G   66M  6.3G   2% /run/dev/mapper/wkstn--c30--vg-root  1.8T  468G  1.3T  27% /tmpfs                             32G     0   32G   0% /dev/shmtmpfs                            5.0M  4.0K  5.0M   1% /run/locktmpfs                             32G     0   32G   0% /sys/fs/cgroup/dev/sda1                        472M  210M  238M  47% /bootcgmfs                            100K     0  100K   0% /run/cgmanager/fs//141.161.238.138/share           21T  6.4T   15T  31% /mnt/cifstmpfs                            6.3G     0  6.3G   0% /run/user/1000tmpfs                            6.3G     0  6.3G   0% /run/user/1001tmpfs                            6.3G     0  6.3G   0% /run/user/1003</code></pre><h2 id="Check-memeory-usage"><a href="#Check-memeory-usage" class="headerlink" title="Check memeory usage"></a>Check memeory usage</h2><pre><code class="hljs bash">free -h              total        used        free      shared  buff/cache   availableMem:           251G        973M        130G        217M        120G        249GSwap:          130G         14M        130G</code></pre><h2 id="Check-virtual-memeory-usage"><a href="#Check-virtual-memeory-usage" class="headerlink" title="Check virtual memeory usage"></a>Check virtual memeory usage</h2><pre><code class="hljs bash">vmstatprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="hljs-keyword">in</span>   cs us sy id wa st 0  0  14592 136961440 702160 125441376    0    0     0     1    0    0  1  0 99  0  0</code></pre><h2 id="Check-IP"><a href="#Check-IP" class="headerlink" title="Check IP"></a>Check IP</h2><pre><code class="hljs bash">ip addr</code></pre><h2 id="Check-network"><a href="#Check-network" class="headerlink" title="Check network"></a>Check network</h2><pre><code class="hljs bash">netstat</code></pre><h2 id="get-the-processes-relations"><a href="#get-the-processes-relations" class="headerlink" title="get the processes relations"></a>get the processes relations</h2><pre><code class="hljs bash">pstree</code></pre><h2 id="Dynamicaly-get-the-information"><a href="#Dynamicaly-get-the-information" class="headerlink" title="Dynamicaly get the information"></a>Dynamicaly get the information</h2><pre><code class="hljs bash">watch -n 1 cat /proc/meminfowatch -n 1 cat /proc/net/dev</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
      <tag>Server</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hyperledger Fabric Network with UI</title>
    <link href="/2018/05/21/Hyperledger-Fabric-Network-with-UI/"/>
    <url>/2018/05/21/Hyperledger-Fabric-Network-with-UI/</url>
    
    <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Check the Git installation:</p><pre><code class="hljs bash">git  --versiongit version 2.7.4</code></pre><h2 id="GoLang"><a href="#GoLang" class="headerlink" title="GoLang"></a>GoLang</h2><p>Download and install the latest go</p><pre><code class="hljs bash">wget https://dl.google.com/go/go1.10.2.linux-amd64.tar.gzsudo tar -xvf go1.10.2.linux-amd64.tar.gzsudo mv go /usr/<span class="hljs-built_in">local</span></code></pre><p>Here we’ll set some paths that Go needs. The paths in this step are all given are relative to the location of your Go installation in /usr/local. If you chose a new directory, or left the file in download location, modify the commands to match your new location. Open the ~/.profile:</p><pre><code class="hljs bash">vim ~/.profile</code></pre><p>And add this line at the end of the file:</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=\$PATH:/usr/local/go/bin&quot;</span> &gt;&gt; ~/.profile</code></pre><p>Restart the shell and check whether it works</p><pre><code class="hljs bash">go versiongo version go1.10.2 linux/amd64</code></pre><p>Setup the <code>GOPATH</code></p><pre><code class="hljs bash">mkdir <span class="hljs-variable">$HOME</span>/work<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export GOPATH=\$HOME/work&quot;</span> &gt;&gt; ~/.profile</code></pre><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><p>Install the latest docker-compose<code>https://github.com/docker/compose/releases</code></p><pre><code class="hljs bash">sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="hljs-built_in">local</span>/bin/docker-composesudo chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose</code></pre><p>Verification of installation</p><pre><code class="hljs bash">docker-compose -v</code></pre><h2 id="Nvm"><a href="#Nvm" class="headerlink" title="Nvm"></a>Nvm</h2><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</code></pre><p>After restart the shell</p><pre><code class="hljs bash">nvm install 8.0.0</code></pre><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><pre><code class="hljs bash">node -vv8.0.0npm -v5.0.0</code></pre><h2 id="Marble"><a href="#Marble" class="headerlink" title="Marble"></a>Marble</h2><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/IBM-Blockchain/marbles.git --depth 1<span class="hljs-built_in">cd</span> marbles</code></pre><p>Create a locally hosted Hyperledger Fabric Network</p><h3 id="Download-Fabric-Samples"><a href="#Download-Fabric-Samples" class="headerlink" title="Download Fabric Samples"></a>Download Fabric Samples</h3><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/hyperledger/fabric-samples.git<span class="hljs-built_in">cd</span> fabric-samples</code></pre><pre><code class="hljs bash">url -sSL https://raw.githubusercontent.com/hyperledger/fabric/release-1.1/scripts/bootstrap-1.1.0-preview.sh -o setup_script.shsudo bash setup_script.sh</code></pre><p>Be sure to add these binaries to your PATH variable by running the following command.</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=\$PWD/bin:\$PATH&quot;</span> &gt;&gt; ~/.profile</code></pre><h3 id="Start-your-network"><a href="#Start-your-network" class="headerlink" title="Start your network"></a>Start your network</h3><p>Next we need to start up the Fabric. Run the script below to get everything going.</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./fabcarsudo ./startFabric.sh</code></pre><p>After a minute or two the command prompt will return. Now run the command <code>sudo docker ps</code> to view your currently running docker containers. You should see something similar to the following:</p><pre><code class="hljs bash">CONTAINER ID        IMAGE                                                                                                    COMMAND                  CREATED              STATUS              PORTS                                            NAMES7990b48c29ba        dev-peer0.org1.example.com-fabcar-1.0-5c906e402ed29f20260ae42283216aa75549c571e2e380f3615826365d8269ba   <span class="hljs-string">&quot;chaincode -peer.add…&quot;</span>   About a minute ago   Up About a minute                                                    dev-peer0.org1.example.com-fabcar-1.07e73a148dc82        hyperledger/fabric-tools                                                                                 <span class="hljs-string">&quot;/bin/bash&quot;</span>              About a minute ago   Up About a minute                                                    clidff96212a78e        hyperledger/fabric-peer                                                                                  <span class="hljs-string">&quot;peer node start&quot;</span>        About a minute ago   Up About a minute   0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:7053-&gt;7053/tcp   peer0.org1.example.com698b31dc13a2        hyperledger/fabric-ca                                                                                    <span class="hljs-string">&quot;sh -c &#x27;fabric-ca-se…&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:7054-&gt;7054/tcp                           ca.example.comd43ca794fd78        hyperledger/fabric-orderer                                                                               <span class="hljs-string">&quot;orderer&quot;</span>                About a minute ago   Up About a minute   0.0.0.0:7050-&gt;7050/tcp                           orderer.example.comc3ac8464fae4        hyperledger/fabric-couchdb                                                                               <span class="hljs-string">&quot;tini -- /docker-ent…&quot;</span>   About a minute ago   Up About a minute   4369/tcp, 9100/tcp, 0.0.0.0:5984-&gt;5984/tcp       couchdb</code></pre><h3 id="Install-Dependencies-for-a-Test"><a href="#Install-Dependencies-for-a-Test" class="headerlink" title="Install Dependencies for a Test"></a>Install Dependencies for a Test</h3><p>Next we are going to install node.js dependencies for the fabcar sample. It’s not critical to do this step, but it is useful to test if the network is working before moving on. Before we run fabcar we need to install its npm dependencies:</p><pre><code class="hljs bash">sudo npm install</code></pre>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blockchain</tag>
      
      <tag>Hyperledger</tag>
      
      <tag>Fabric</tag>
      
      <tag>Marble</tag>
      
      <tag>golang</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rstudio server setup on Ubuntu server 16.04 with xcms and MetaboAnalystR</title>
    <link href="/2018/05/19/Rstudio-Server-setup-on-Ubuntu-server-16-04/"/>
    <url>/2018/05/19/Rstudio-Server-setup-on-Ubuntu-server-16-04/</url>
    
    <content type="html"><![CDATA[<h2 id="Update-system"><a href="#Update-system" class="headerlink" title="Update system"></a>Update system</h2><pre><code class="hljs bash">sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</code></pre><h2 id="Update-the-sources-list-to-include-latest-R-dist"><a href="#Update-the-sources-list-to-include-latest-R-dist" class="headerlink" title="Update the sources.list to include latest R dist"></a>Update the sources.list to include latest R dist</h2><pre><code class="hljs bash">sudo sh -c <span class="hljs-string">&quot;echo deb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran35/ &gt;&gt; /etc/apt/sources.list&quot;</span></code></pre><p>The Ubuntu archives on CRAN are signed with the key of “Michael Rutter <a href="mailto:&#x6d;&#97;&#114;&#117;&#116;&#116;&#101;&#114;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#x6d;&#97;&#114;&#117;&#116;&#116;&#101;&#114;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a>” with key ID E084DAB9. To add the key to your system with one command use</p><pre><code class="hljs bash">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9</code></pre><h2 id="Install-R"><a href="#Install-R" class="headerlink" title="Install R"></a>Install R</h2><pre><code class="hljs bash">sudo apt-get update &amp;&amp; sudo apt-get install -y r-base r-base-dev</code></pre><h2 id="Install-xcms-dependencies"><a href="#Install-xcms-dependencies" class="headerlink" title="Install xcms dependencies"></a>Install xcms dependencies</h2><pre><code class="hljs bash">sudo apt-get install -y r-cran-xmlsudo apt-get install -y libcurl4-openssl-dev libxml2-dev libssl-dev build-essential software-properties-common libnetcdf-dev</code></pre><h2 id="Install-xcms-CAMERA"><a href="#Install-xcms-CAMERA" class="headerlink" title="Install xcms CAMERA"></a>Install xcms CAMERA</h2><pre><code class="hljs bash">sudo R</code></pre><pre><code class="hljs r"><span class="hljs-keyword">if</span> (!requireNamespace(<span class="hljs-string">&quot;BiocManager&quot;</span>, quietly = <span class="hljs-literal">TRUE</span>))    install.packages(<span class="hljs-string">&quot;BiocManager&quot;</span>)BiocManager::install(<span class="hljs-string">&quot;xcms&quot;</span>, version = <span class="hljs-string">&quot;3.8&quot;</span>)BiocManager::install(<span class="hljs-string">&quot;CAMERA&quot;</span>, version = <span class="hljs-string">&quot;3.8&quot;</span>)BiocManager::install(<span class="hljs-string">&quot;msdata&quot;</span>, version = <span class="hljs-string">&quot;3.8&quot;</span>)BiocManager::install(<span class="hljs-string">&quot;IPO&quot;</span>, version = <span class="hljs-string">&quot;3.8&quot;</span>)</code></pre><h2 id="Install-Rstudio-server"><a href="#Install-Rstudio-server" class="headerlink" title="Install Rstudio server"></a>Install Rstudio server</h2><p>Install the current version of rstuido server(e.g.v1.1.453)</p><pre><code class="hljs bash">sudo apt-get install gdebi-corewget https://download2.rstudio.org/rstudio-server-1.1.463-amd64.debsudo gdebi rstudio-server-1.1.463-amd64.deb</code></pre><p>The service in running on default port: 8787</p><h2 id="Install-dependencies-for-MetaboAnalystR"><a href="#Install-dependencies-for-MetaboAnalystR" class="headerlink" title="Install dependencies for MetaboAnalystR"></a>Install dependencies for MetaboAnalystR</h2><p>For <code>Rmpi</code></p><pre><code class="hljs bash">sudo apt-get install -y libopenmpi-dev</code></pre><p>For <code>Cairo</code></p><pre><code class="hljs bash">sudo apt-get install -y libcairo2-dev libxt-dev</code></pre><p>For <code>magick</code></p><pre><code class="hljs bash">sudo add-apt-repository -y ppa:opencpu/imagemagicksudo apt-get updatesudo apt-get install -y libmagick++-dev</code></pre><p>For <code>rgl</code></p><pre><code class="hljs bash">sudo apt-get install libx11-dev libcgal-dev libglu1-mesa-dev libglu1-mesa-dev -y</code></pre><p>For <code>siggenes</code></p><pre><code class="hljs bash">sudo R<span class="hljs-keyword">if</span> (!requireNamespace(<span class="hljs-string">&quot;BiocManager&quot;</span>, quietly = TRUE))    install.packages(<span class="hljs-string">&quot;BiocManager&quot;</span>)BiocManager::install(<span class="hljs-string">&quot;siggenes&quot;</span>, version = <span class="hljs-string">&quot;3.8&quot;</span>)</code></pre><h2 id="Install-Tex-Live"><a href="#Install-Tex-Live" class="headerlink" title="Install Tex Live"></a>Install Tex Live</h2><pre><code class="hljs bash">sudo apt-get install texlive-full -y</code></pre>]]></content>
    
    
    <categories>
      
      <category>Rstudio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
      <tag>Rstudio</tag>
      
      <tag>xcms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Upgrade to TensorFlow 1.6, CUDA 9.0 and cuDNN v7.1.1</title>
    <link href="/2018/03/12/Upgrade-to-TensorFlow-1-6-CUDA-9-0-and-cuDNN-v7-1-1/"/>
    <url>/2018/03/12/Upgrade-to-TensorFlow-1-6-CUDA-9-0-and-cuDNN-v7-1-1/</url>
    
    <content type="html"><![CDATA[<p>Since from the release of TensorFlow r1.6 it starts to support CUDA9.0, upgrade to CUDA from 8.0 to 9.0 is a must.</p><p>Firstly, download all the installation files from NVIDIA.</p><h2 id="Install-CUDA-9-0"><a href="#Install-CUDA-9-0" class="headerlink" title="Install CUDA 9.0"></a>Install CUDA 9.0</h2><pre><code class="hljs bash">sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.debsudo apt-get updatesudo apt-get install cuda</code></pre><p>Use the autoremove to remove CUDA 8.0</p><pre><code class="hljs bash">sudo apt-get autoremove</code></pre><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><pre><code class="hljs bash">sudo dpkg -i cuda-repo-ubuntu1604-9-0-local-cublas-performance-update_1.0-1_amd64.debsudo apt-get updatesudo apt-get upgrade</code></pre><pre><code class="hljs bash">sudo dpkg -i cuda-repo-ubuntu1604-9-0-local-cublas-performance-update-2_1.0-1_amd64.debsudo apt-get updatesudo apt-get upgrade</code></pre><h2 id="Modify-the-bashrc-file"><a href="#Modify-the-bashrc-file" class="headerlink" title="Modify the .bashrc file"></a>Modify the .bashrc file</h2><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/usr/<span class="hljs-built_in">local</span>/cuda-9.0/bin:<span class="hljs-variable">$PATH</span><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="hljs-built_in">local</span>/cuda-9.0/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span></code></pre><p>Then source it.</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre><h2 id="After-sourcing-the-bashrc-file-the-CUDA-version-can-be-verified-using"><a href="#After-sourcing-the-bashrc-file-the-CUDA-version-can-be-verified-using" class="headerlink" title="After sourcing the bashrc file, the CUDA version can be verified using"></a>After sourcing the bashrc file, the CUDA version can be verified using</h2><pre><code class="hljs bash">nvcc --version</code></pre><h2 id="Restart-system-for-the-graphic-dirver-R384-to-take-effect"><a href="#Restart-system-for-the-graphic-dirver-R384-to-take-effect" class="headerlink" title="Restart system for the graphic dirver R384 to take effect"></a>Restart system for the graphic dirver R384 to take effect</h2><p>Then check it:</p><pre><code class="hljs bash">nvidia-smi+-----------------------------------------------------------------------------+| NVIDIA-SMI 384.111                Driver Version: 384.111                   ||-------------------------------+----------------------+----------------------+| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC || Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. ||===============================+======================+======================||   0  GeForce GTX 970M    Off  | 00000000:01:00.0 Off |                  N/A || N/A   53C    P0    26W /  N/A |    564MiB /  6078MiB |     12%      Default |+-------------------------------+----------------------+----------------------+                                                                               +-----------------------------------------------------------------------------+| Processes:                                                       GPU Memory ||  GPU       PID   Type   Process name                             Usage      ||=============================================================================||    0      1192      G   /usr/lib/xorg/Xorg                           263MiB ||    0      2020      G   compiz                                       133MiB ||    0      3776      G   ...-token=794ED49FD68C1309792D9D8F291D5B68   165MiB |+-----------------------------------------Haven<span class="hljs-string">&#x27;t you observed the same problem?</span><span class="hljs-string"></span><span class="hljs-string">------------------------------------+</span></code></pre><p>Next step is to install cuDNN. cuDNN can be downloaded from NVIDIA’s webpage:<a href="https://developer.nvidia.com/cudnn">cuDNN page</a>.</p><p>Extract cuDNN and install.</p><pre><code class="hljs bash">tar xvf cudnn-9.0-linux-x64-v7.1.tgzsudo cp cuda/include/cudnn.h /usr/<span class="hljs-built_in">local</span>/cuda/includesudo cp cuda/lib64/libcudnn* /usr/<span class="hljs-built_in">local</span>/cuda/lib64sudo chmod a+r /usr/<span class="hljs-built_in">local</span>/cuda/include/cudnn.h /usr/<span class="hljs-built_in">local</span>/cuda/lib64/libcudnn*</code></pre><p>Then install tensorflow r1.6 as the TensorFlow official website instructed in venv.</p><p>After installation, try the TensorFlow validation, it will work. However, When dealing with Keras predict model, it will raise such errors:</p><h2 id="Downgrade-to-cuDNN-v7-0-5"><a href="#Downgrade-to-cuDNN-v7-0-5" class="headerlink" title="Downgrade to cuDNN v7.0.5"></a>Downgrade to cuDNN v7.0.5</h2><pre><code class="hljs bash">E tensorflow/stream_executor/cuda/cuda_dnn.cc:378] Loaded runtime CuDNN library: 7101 (compatibility version 7100) but <span class="hljs-built_in">source</span> was compiled with 7004 (compatibility version 7000).  If using a binary install, upgrade your CuDNN library to match.  If building from sources, make sure the library loaded at runtime matches a compatible version specified during compile configuration.</code></pre><p>Obveriously, it is a problem about cuDNN version compatibility. Solving this problem by downgrade the cuDNN to cuDNN v7.0.5 (Dec 5, 2017), for CUDA 9.0.</p><pre><code class="hljs bash">tar xvf cudnn-9.0-linux-x64-v7.tgzsudo cp cuda/include/cudnn.h /usr/<span class="hljs-built_in">local</span>/cuda-9.0/includesudo cp cuda/lib64/libcudnn* /usr/<span class="hljs-built_in">local</span>/cuda-9.0/lib64sudo chmod a+r /usr/<span class="hljs-built_in">local</span>/cuda-9.0/include/cudnn.h /usr/<span class="hljs-built_in">local</span>/cuda-9.0/lib64/libcudnn*</code></pre><p>Enjoy!</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CUDA</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>cuDNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>General settings on Mac</title>
    <link href="/2018/03/12/General-settings-on-Mac/"/>
    <url>/2018/03/12/General-settings-on-Mac/</url>
    
    <content type="html"><![CDATA[<p>Here are some tips on setting up a Mac for developers. (Avaliable for 10.13.3)</p><h1 id="System-settings"><a href="#System-settings" class="headerlink" title="System settings"></a>System settings</h1><h2 id="Reduce-graphic-effects"><a href="#Reduce-graphic-effects" class="headerlink" title="Reduce graphic effects"></a>Reduce graphic effects</h2><p>Go to System Preferences – Accessibility – Display, choose:</p><ul><li>“Reduce motion”</li><li>“Reduce transparency”.</li></ul><p>Go to System Preferences – Mission Control, turn dashoboard to “off”.</p><h2 id="Enable-three-fingers-drag-and-four-fingers-swipe"><a href="#Enable-three-fingers-drag-and-four-fingers-swipe" class="headerlink" title="Enable three fingers drag and four fingers swipe"></a>Enable three fingers drag and four fingers swipe</h2><p>Go to System Preferences – Trackpad – Point &amp; Click, enable “Tap to click”.<br>Go to System Preferences – Trackpad – More Gestures – Mission Control, enable “Swipe up with four fingers”.</p><p>Go to System Preferences – Accessibility – Mouse &amp; Trackpad – Trackpad Options, enable “dragging with three fingers”</p><h2 id="Improve-the-dock-showup-speed"><a href="#Improve-the-dock-showup-speed" class="headerlink" title="Improve the dock showup speed"></a>Improve the dock showup speed</h2><p>Open terminal and type in:</p><pre><code class="hljs bash">defaults write com.apple.dock autohide-delay -int 0</code></pre><h2 id="Change-default-layout-of-launchpad-display"><a href="#Change-default-layout-of-launchpad-display" class="headerlink" title="Change default layout of launchpad display"></a>Change default layout of launchpad display</h2><p>For example, you can customize the rows and columns of the launchpad springboard, say, into 9 columns and 7 rows </p><pre><code class="hljs bash">defaults write com.apple.dock springboard-columns -int 9defaults write com.apple.dock springboard-rows -int 7defaults write com.apple.dock ResetLaunchPad -bool TRUE; killall Dock</code></pre><p>Or reset it to default columns and rows</p><pre><code class="hljs bash">defaults delete com.apple.dock springboard-rowsdefaults delete com.apple.dock springboard-columnsdefaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock</code></pre><h1 id="Development-tools"><a href="#Development-tools" class="headerlink" title="Development tools"></a>Development tools</h1><h2 id="Install-brew"><a href="#Install-brew" class="headerlink" title="Install brew"></a>Install brew</h2><pre><code class="hljs bash">/usr/bin/ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></code></pre><h2 id="Using-zsh-shell"><a href="#Using-zsh-shell" class="headerlink" title="Using zsh shell"></a>Using zsh shell</h2><pre><code class="hljs bash"><span class="hljs-comment"># Install</span>curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh<span class="hljs-comment"># Create config file(Environment variables will be updated in .zshrc)</span>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<span class="hljs-comment"># Using zsh</span>chsh -s /bin/zsh</code></pre><h2 id="Enable-vim-syntax"><a href="#Enable-vim-syntax" class="headerlink" title="Enable vim syntax"></a>Enable vim syntax</h2><pre><code class="hljs bash">vim ~/.vimrc<span class="hljs-comment">## appending following two lines</span>syntax on<span class="hljs-built_in">set</span> nu!</code></pre>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>System Tweak</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Almost palindrome</title>
    <link href="/2018/03/02/Almost-palindrome/"/>
    <url>/2018/03/02/Almost-palindrome/</url>
    
    <content type="html"><![CDATA[<p>The palindromic score of a string is the number of errors(characters which do not match) when the string is read forwards and backwards. For example, the palindromic score of ‘fox’ is 2, because ‘fox’ and ‘xof’ differ by two characters. Write a function to take a string and return its palindromic score.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">almost_palindromes</span>(<span class="hljs-params">str</span>):</span>    cnt = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> str[::<span class="hljs-number">-1</span>], str:        <span class="hljs-keyword">if</span> x != y:            cnt += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> cnttest1 = <span class="hljs-string">&quot;abba&quot;</span>test2 = <span class="hljs-string">&quot;abcdcaa&quot;</span>test3 = <span class="hljs-string">&quot;aaabbb&quot;</span>print(almost_palindromes(test1)) <span class="hljs-comment"># Expected result 0</span>print(almost_palindromes(test2)) <span class="hljs-comment"># Expected result 2</span>print(almost_palindromes(test3)) <span class="hljs-comment"># Expected result 6</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASCII deletion distance</title>
    <link href="/2018/03/02/ASCII-deletion-distance/"/>
    <url>/2018/03/02/ASCII-deletion-distance/</url>
    
    <content type="html"><![CDATA[<p>The deletion distance between two strings is the minimum sum of ASCII values of characters that you need to delete in the two strings in order to have the same string. The deletion distance between “cat” and “at” is 99, because you can just delete the first character of cat and the ASCII value of ‘c’ is 99. The deletion distance between “cat” and “bat” is 98 + 99, because you need to delete the first character of both words. Of course, the deletion distance between two strings can’t be greater than the sum of their total ASCII values, because you can always just delete both of the strings entirely. Implement an efficient function to find the deletion distance between two strings. You can refer to the Wikipedia article on the algorithm for edit distance if you want to. The algorithm there is not quite the same as the algorithm required here, but it’s similar.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ascii_deletion_distance</span>(<span class="hljs-params">str1, str2</span>):</span>    <span class="hljs-keyword">pass</span>test1 = (<span class="hljs-string">&quot;at&quot;</span>, <span class="hljs-string">&quot;cat&quot;</span>)test2 = (<span class="hljs-string">&quot;boat&quot;</span>, <span class="hljs-string">&quot;got&quot;</span>)test3 = (<span class="hljs-string">&quot;thought&quot;</span>, <span class="hljs-string">&quot;sloughs&quot;</span>)<span class="hljs-keyword">print</span> (ascii_deletion_distance(test1)) <span class="hljs-comment"># Expected result 99</span><span class="hljs-keyword">print</span> (ascii_deletion_distance(test2)) <span class="hljs-comment"># Expected result 298</span><span class="hljs-keyword">print</span> (ascii_deletion_distance(test3)) <span class="hljs-comment"># Expected result 674</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>LCS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bracket match</title>
    <link href="/2018/03/01/Bracket-match/"/>
    <url>/2018/03/01/Bracket-match/</url>
    
    <content type="html"><![CDATA[<p>A string of brackets is correctly matched if you can pair every opening bracket up with a later closing bracket, and vice versa. For example, “(()())” is correctly matched, and “(()” and “)(“ are not. Implement a function which takes a string of brackets and returns the minimum number of brackets you’d have to add to the string to make it correctly matched. For example, “(()” could be correctly matched by adding a single closing bracket at the end, so you’d return 1. “)(“ can be correctly matched by adding an opening bracket at the start and a closing bracket at the end, so you’d return 2. If your string is already correctly matched, you can just return 0.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bracket_match</span>(<span class="hljs-params">bracket_string</span>):</span>    cnt = <span class="hljs-number">0</span>    stack = []    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> bracket_string0:        <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27;(&#x27;</span>:            stack.append(char)        <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&#x27;)&#x27;</span>:            <span class="hljs-keyword">if</span> stack == []:                cnt += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> stack[<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>:                stack.pop()        cnt += len(stack)    <span class="hljs-keyword">return</span> cnt<span class="hljs-comment"># Test Input</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    test1 = <span class="hljs-string">&quot;(()())&quot;</span> <span class="hljs-comment"># Expected Result 0</span>    test2 = <span class="hljs-string">&quot;((())&quot;</span> <span class="hljs-comment"># Expected Result 1</span>    test3 = <span class="hljs-string">&quot;())&quot;</span> <span class="hljs-comment"># Expected Result 1</span>    print(bracket_match(test1))    print(bracket_match(test2))    print(bracket_match(test3))</code></pre>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The importance of NVM for Node.js installation</title>
    <link href="/2018/02/27/The-importance-of-NVM-for-Node-js-usage/"/>
    <url>/2018/02/27/The-importance-of-NVM-for-Node-js-usage/</url>
    
    <content type="html"><![CDATA[<p>An alternative to installing Node.js through apt is to use a specially designed tool called nvm, which stands for “Node.js version manager”. Rather than working at the operating system level, nvm works at the level of an independent directory within your home directory. This means that you can install multiple, self-contained versions of Node.js without affecting the entire system.</p><p>Controlling your environment with nvm allows you to access the newest versions of Node.js and retain and manage previous releases. It is a different utility from apt-get, however, and the versions of Node.js that you manage through it are distinct from the distro-stable version of Node.js available from the Ubuntu repositories.</p><p>To start off, we’ll need to get the software packages from our Ubuntu repositories that will allow us to build source packages. The nvm script will leverage these tools to build the necessary components:</p><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install build-essential libssl-dev</code></pre><p>Once the prerequisite packages are installed, you can pull down the nvm installation script from the project’s GitHub page. The version number may be different, but in general, you can download it with curl:</p><pre><code class="hljs bash">curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh -o install_nvm.sh</code></pre><p>And inspect the installation script with nano:</p><pre><code class="hljs bash">nano install_nvm.sh</code></pre><p>Run the script with bash:</p><pre><code class="hljs bash">bash install_nvm.sh</code></pre><p>It will install the software into a subdirectory of your home directory at ~/.nvm. It will also add the necessary lines to your ~/.profile file to use the file.</p><p>To gain access to the nvm functionality, you’ll need to log out and log back in again, or you can source the ~/.profile file so that your current session knows about the changes:</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.profile</code></pre><p>Now that you have nvm installed, you can install isolated Node.js versions.</p><p>To find out the versions of Node.js that are available for installation, you can type:</p><pre><code class="hljs bash">nvm ls-remote</code></pre><p>As you can see, the newest LTS version at the time of this writing is v8.9.4. You can install that by typing:</p><pre><code class="hljs bash">nvm install 8.9.4</code></pre><p>Usually, nvm will switch to use the most recently installed version. You can explicitly tell nvm to use the version we just downloaded by typing:</p><pre><code class="hljs bash">nvm use 8.9.4</code></pre><p>When you install Node.js using nvm, the executable is called node. You can see the version currently being used by the shell by typing:</p><pre><code class="hljs bash">node -vOutputv8.9.4</code></pre><p>If you have multiple Node.js versions, you can see what is installed by typing:</p><pre><code class="hljs bash">nvm ls</code></pre><p>If you wish to default one of the versions, you can type:</p><pre><code class="hljs bash">nvm <span class="hljs-built_in">alias</span> default 8.9.4</code></pre><p>This version will be automatically selected when a new session spawns. You can also reference it by the alias like this:</p><pre><code class="hljs bash">nvm use default</code></pre><p>Each version of Node.js will keep track of its own packages and has npm available to manage these.</p><p>You can have npm install packages to the Node.js project’s ./node_modules directory by using the normal format. For example, for the express module:</p><pre><code class="hljs bash">npm install express</code></pre><p>If you’d like to install it globally (making it available to the other projects using the same Node.js version), you can add the -g flag:</p><pre><code class="hljs bash">npm install -g express</code></pre><p>This will install the package in:</p><blockquote><p>~/.nvm/node_version/lib/node_modules/package_name</p></blockquote><p>Installing globally will let you run the commands from the command line, but you’ll have to link the package into your local sphere to require it from within a program:</p><pre><code class="hljs bash">npm link express</code></pre><p>You can learn more about the options available to you with nvm by typing:</p><pre><code class="hljs bash">nvm <span class="hljs-built_in">help</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>NVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Tutorial</title>
    <link href="/2018/01/28/Git-Tutorial/"/>
    <url>/2018/01/28/Git-Tutorial/</url>
    
    <content type="html"><![CDATA[<h2 id="Mac-Linux-Setup"><a href="#Mac-Linux-Setup" class="headerlink" title="Mac/Linux Setup"></a>Mac/Linux Setup</h2><h3 id="Installing-Git"><a href="#Installing-Git" class="headerlink" title="Installing Git"></a>Installing Git</h3><p>Here is a general installation on Mac/Linux. If you are using Windows, then enjoy yourself.<br>Git is actually installed on MacOS, but we’ll be reinstalling it so that we’ll have the newest version:</p><ul><li>go to <a href="https://git-scm.com/downloads">Git</a></li><li>download the software for Mac</li><li>install Git choosing all of the default options</li></ul><h3 id="First-Time-Git-Configuration"><a href="#First-Time-Git-Configuration" class="headerlink" title="First Time Git Configuration"></a>First Time Git Configuration</h3><p>Before you can start using Git, you need to configure it. Run each of the following lines on the command line to make sure everything is set up.</p><pre><code class="hljs bash"><span class="hljs-comment"># sets up Git with your name</span>git config --global user.name <span class="hljs-string">&quot;&lt;Your-Full-Name&gt;&quot;</span><span class="hljs-comment"># sets up Git with your email</span>git config --global user.email <span class="hljs-string">&quot;&lt;your-email-address&gt;&quot;</span><span class="hljs-comment"># makes sure that Git output is colored</span>git config --global color.ui auto<span class="hljs-comment"># displays the original state in a conflict</span>git config --global merge.conflictstyle diff3git config --list</code></pre><h3 id="Git-amp-Code-Editor"><a href="#Git-amp-Code-Editor" class="headerlink" title="Git &amp; Code Editor"></a>Git &amp; Code Editor</h3><p>The last step of configuration is to get Git working with your code editor. Below are three of the most popular code editors.</p><p>Atom Editor Setup</p><pre><code class="hljs bash">git config --global core.editor <span class="hljs-string">&quot;atom --wait&quot;</span></code></pre><p>Sublime Text Setup</p><pre><code class="hljs bash">git config --global core.editor <span class="hljs-string">&quot;&#x27;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&#x27; -n -w&quot;</span></code></pre><p>VSCode Setup</p><pre><code class="hljs bash">git config --global core.editor <span class="hljs-string">&quot;code --wait&quot;</span></code></pre><h2 id="Create-a-Git-Repo"><a href="#Create-a-Git-Repo" class="headerlink" title="Create a Git Repo"></a>Create a Git Repo</h2><h3 id="Create-a-Repo-from-Scratch"><a href="#Create-a-Repo-from-Scratch" class="headerlink" title="Create a Repo from Scratch"></a>Create a Repo from Scratch</h3><pre><code class="hljs bash">mkdir -p git-practice/new-git-project &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$_</span></code></pre><p>Use <code>git init</code> to initialize a empty new empty Git repository.</p><p>.Git Directory Contents</p><p>Here’s a brief synopsis on each of the items in the .git directory:</p><ul><li>config file - where all project specific configuration settings are stored.</li><li>description file - this file is only used by the GitWeb program, so we can ignore it</li><li>hooks directory - this is where we could place client-side or server-side scripts that we can use to hook into Git’s different lifecycle events</li><li>info directory - contains the global excludes file</li><li>objects directory - this directory will store all of the commits we make</li><li>refs directory - this directory holds pointers to commits (basically the “branches” and “tags”)</li></ul><h3 id="Clone-An-Existing-Repo"><a href="#Clone-An-Existing-Repo" class="headerlink" title="Clone An Existing Repo"></a>Clone An Existing Repo</h3><p>Clone from URL</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/udacity/course-git-blog-project</code></pre><p>Clone with rename</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/udacity/course-git-blog-project blog-project</code></pre><h2 id="Determine-A-Repo’s-Status"><a href="#Determine-A-Repo’s-Status" class="headerlink" title="Determine A Repo’s Status"></a>Determine A Repo’s Status</h2><pre><code class="hljs bash">git statusOn branch masterYour branch is up-to-date with <span class="hljs-string">&#x27;origin/master&#x27;</span>.nothing to commit, working directory clean</code></pre><ol><li>On branch master – this tells us that Git is on the master branch.</li><li>Your branch is up-to-date with ‘origin/master’. – Because git clone was used to copy this repository from another computer, this is telling us if our project is in sync with the one we copied from. We won’t be dealing with the project on the other computer, so this line can be ignored.</li><li>nothing to commit, working directory clean – this is saying that there are no pending changes.</li></ol><h2 id="Git-Log-Command"><a href="#Git-Log-Command" class="headerlink" title="Git Log Command"></a>Git Log Command</h2><h3 id="Use-Git-Log"><a href="#Use-Git-Log" class="headerlink" title="Use Git Log"></a>Use Git Log</h3><pre><code class="hljs bash">git <span class="hljs-built_in">log</span></code></pre><p>By default, this command displays:</p><ul><li>the SHA</li><li>the author</li><li>the date</li><li>the message</li></ul><p>It will display the log in <code>less</code> mode:</p><p>to scroll down, press</p><ul><li>j or ↓ to move down one line at a time</li><li>d to move by half the page screen</li><li>f to move by a whole page screen</li></ul><p>to scroll up, press</p><ul><li>k or ↑ to move up one line at a time</li><li>u to move by half the page screen</li><li>b to move by a whole page screen</li></ul><p>press q to quit out of the log (returns to the regular command prompt)</p><ol><li>Use git log to find the commit that has a SHA that starts with f9720a. Who made the commit?</li><li>Use git log to find the commit with the SHA that starts with 8aa6668. What is the message for that commit?</li><li>Use git log to find the commit with the SHA that starts with f9720a9. When was that commit made?</li><li>Use git log to find the commit that has the message Set article timestamp color. Which commit belongs to that SHA? Provide the first 7 characters of the SHA.</li></ol><h3 id="Change-Git-Log-Displays"><a href="#Change-Git-Log-Displays" class="headerlink" title="Change Git Log Displays"></a>Change Git Log Displays</h3><ol><li>the SHA - git log will display the complete SHA for every single commit. Each SHA is unique, so we don’t really need to see the entire SHA. We could get by perfectly fine with knowing just the first 6-8 characters. Wouldn’t it be great if we could save some space and show just the first 5 or so characters of the SHA?</li><li>the author - the git log output displays the commit author for every single commit! It could be different for other repositories that have multiple people collaborating together, but for this one, there’s only one person making all of the commits, so the commit author will be identical for all of them. Do we need to see the author for each one? What if we wanted to hide that information?</li><li>the date - By default, git log will display the date for each commit. But do we really care about the commit’s date? Knowing the date might be important occasionally, but typically knowing the date isn’t vitally important and can be ignored in a lot of cases. Is there a way we could hide that to save space?</li><li>the commit message - this is one of the most important parts of a commit message…we usually always want to see this</li></ol><p>What could we do here to not waste a lot of space and make the output smaller? We can use a flag.</p><p>The git log command has a flag that can be used to alter how it displays the repository’s information. That flag is –oneline:</p><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline</code></pre><h3 id="Viewing-Modified-Files"><a href="#Viewing-Modified-Files" class="headerlink" title="Viewing Modified Files"></a>Viewing Modified Files</h3><p>The git log command has a flag that can be used to display the files that have been changed in the commit, as well as the number of lines that have been added or deleted. The flag is –stat (“stat” is short for “statistics”):</p><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></code></pre><ol><li>how many files were modified in the commit with the SHA 6f04ddd?</li><li>How many files were modified in the commit with the SHA 8d3ea36?</li><li>How many lines of code were deleted in index.html in the commit with the SHA 8d3ea36?</li></ol><h3 id="Viewing-File-Changes"><a href="#Viewing-File-Changes" class="headerlink" title="Viewing File Changes"></a>Viewing File Changes</h3><p>The git log command has a flag that can be used to display the actual changes made to a file. The flag is –patch which can be shortened to just -p:</p><p>This command adds the following to the default output:</p><ul><li>displays the files that have been modified</li><li>displays the location of the lines that have been added/removed</li><li>displays the actual changes that have been made</li></ul><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -p</code></pre><ol><li>look at the commit with the SHA 50d835d. What line number in app.css should you start looking at to see what has been changed?</li><li>Using git log and any of its flags, what code was added in by commit 4a60beb?</li><li>git log –stat and git log -p are both really helpful commands. Wouldn’t it be great if we could have both of their output at the same time?</li><li>What does the -w flag do to the patch information?</li></ol><h3 id="Viewing-A-Specific-Commit"><a href="#Viewing-A-Specific-Commit" class="headerlink" title="Viewing A Specific Commit"></a>Viewing A Specific Commit</h3><p>You must be tired with the scrolling of the previous practices, how about supply the SHA of a commit as the final argument for all of these commands?</p><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -p fdf5493</code></pre><p>It still show other commits when scrolling.</p><p>The other command that shows a specific commit is git show:</p><pre><code class="hljs bash">git show fdf5493</code></pre><p>The git show command will show only one commit.<br>By default, git show displays:</p><ul><li>the commit</li><li>the author</li><li>the date</li><li>the commit message</li><li>the patch information</li></ul><ol><li>How many rulesets are added to the CSS by commit 8d3ea36?</li><li>There’s a commit with the message “Convert social links from text to images”. How many files were changed by this commit?</li><li>Look at commit fdf5493. What’s the first HTML heading element that’s added by this commit?</li></ol><h2 id="Add-Commits"><a href="#Add-Commits" class="headerlink" title="Add Commits"></a>Add Commits</h2><h3 id="Git-Add"><a href="#Git-Add" class="headerlink" title="Git Add"></a>Git Add</h3><p>Make a <code>new-git-project</code> directory, and <code>cd</code> into it, then <code>git init</code> it.</p><p>First, create a file named <code>index.html</code>, and fill it with some starter code:</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Blog Project<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/app.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>Things to note, the code references a CSS file and a JavaScript file.</p><p>Now create the CSS and JavaScript files. You can leave both of these files empty. We’ll add content to them in a bit.</p><p>We just made a number of changes to the repository by adding files and content. It’s time to do a quick check-in with Git:</p><pre><code class="hljs bash">git status</code></pre><p>The Git noticed that there are some changes in the repository, so let’s stage those files.</p><pre><code class="hljs bash">$ git add index.html css/app.css js/app.js<span class="hljs-comment"># Same as</span>$ git add .</code></pre><p>When you use:</p><pre><code class="hljs bash">git status</code></pre><p>You can find that:</p><pre><code class="hljs bash">use <span class="hljs-string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage</code></pre><h3 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h3><pre><code class="hljs bash"><span class="hljs-comment"># check your default commit editor</span>git config --global core.editorgit commit<span class="hljs-comment"># Or just with -m flag</span>git commit -m <span class="hljs-string">&quot;Initial commit&quot;</span></code></pre><p>Now add this just inside the body tag in index.html:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Expedition<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></code></pre><pre><code class="hljs bash">git statusgit add .git commit</code></pre><h3 id="How-to-write-the-commit-message"><a href="#How-to-write-the-commit-message" class="headerlink" title="How to write the commit message"></a>How to write the commit message</h3><p>The goal is that each commit has a single focus. Each commit should record a single-unit change. Now this can be a bit subjective (which is totally fine), but each commit should make a change to just one aspect of the project.</p><p>Now this isn’t limiting the number of lines of code that are added/removed or the number of files that are added/removed/modified. Let’s say you want to change your sidebar to add a new image. You’ll probably:</p><ul><li>add a new image to the project files</li><li>alter the HTML</li><li>add/modify CSS to incorporate the new image</li></ul><p>A commit that records all of these changes would be totally fine!</p><p>Conversely, a commit shouldn’t include unrelated changes - changes to the sidebar and rewording content in the footer. These two aren’t related to each other and shouldn’t be included in the same commit. Work on one change first, commit that, and then change the second one. That way, if it turns out that one change had a bug and you have to undo it, you don’t have to undo the other change too.</p><p>Do</p><ul><li>do keep the message short (less than 60-ish characters)</li><li>do explain what the commit does (not how or why!)</li></ul><p>Do not</p><ul><li>do not explain why the changes are made (more on this below)</li><li>do not explain how the changes are made (that’s what git log -p is for!)</li><li>do not use the word “and”. If you have to use “and”, your commit message is probably doing too many changes - break the changes into separate commits. e.g. “make the background color pink and increase the size of the sidebar” The best way that I’ve found to come up with a commit message is to finish this phrase, “This commit will…”. However, you finish that phrase, use that as your commit message.</li></ul><h3 id="Git-Diff"><a href="#Git-Diff" class="headerlink" title="Git Diff"></a>Git Diff</h3><p>The <code>git diff</code> command can be used to see changes that have been made but haven’t been committed, yet.</p><h3 id="Having-Git-Ignore-Files"><a href="#Having-Git-Ignore-Files" class="headerlink" title="Having Git Ignore Files"></a>Having Git Ignore Files</h3><p>The <code>.gitignore</code> file is used to tell Git about the files that Git should not track. This file should be placed in the same directory that the <code>.git</code> directory is in.</p><p><a href="https://www.gitignore.io/">gitignore.io</a> is a good tool to generate <code>.gitignore</code> file.</p><h2 id="Tagging-Branching-amd-Merging"><a href="#Tagging-Branching-amd-Merging" class="headerlink" title="Tagging, Branching, amd Merging"></a>Tagging, Branching, amd Merging</h2><h3 id="Tagging"><a href="#Tagging" class="headerlink" title="Tagging"></a>Tagging</h3><p>The command we’ll be using to interact with the repository’s tags is the git tag command:</p><pre><code class="hljs bash">git tag -a v1.0</code></pre><pre><code class="hljs bash">This will open your code editor and <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span> you to supply a message <span class="hljs-keyword">for</span> the tag. How about the message <span class="hljs-string">&quot;Ready for content&quot;</span>?CAREFUL: In the <span class="hljs-built_in">command</span> above (git tag -a v1.0) the -a flag is used. This flag tells Git to create an annotated flag. If you don<span class="hljs-string">&#x27;t provide the flag (i.e. git tag v1.0) then it&#x27;</span>ll create what<span class="hljs-string">&#x27;s called a lightweight tag.</span><span class="hljs-string"></span><span class="hljs-string">Annotated tags are recommended because they include a lot of extra information such as:</span><span class="hljs-string"></span><span class="hljs-string">the person who made the tag</span><span class="hljs-string">the date the tag was made</span><span class="hljs-string">a message for the tag</span><span class="hljs-string">Because of this, you should always use annotated tags.</span></code></pre><p>After saving and quitting the editor, nothing is displayed on the command line. So how do we know that a tag was actually added to the project? If you type out just git tag, it will display all tags that are in the repository.</p><h3 id="Branching"><a href="#Branching" class="headerlink" title="Branching"></a>Branching</h3><p>The git branch command is used to interact with Git’s branches:</p><pre><code class="hljs bash">git branch</code></pre><p>It can be used to:</p><ul><li>list all branch names in the repository</li><li>create new branches</li><li>delete branches</li></ul><h3 id="Create-A-Branch"><a href="#Create-A-Branch" class="headerlink" title="Create A Branch"></a>Create A Branch</h3><p>To create a branch, all you have to do is use git branch and provide it the name of the branch you want it to create. So if you want a branch called “sidebar”, you’d run this command:</p><pre><code class="hljs bash">git branch sidebar</code></pre><h3 id="The-git-checkout-Command"><a href="#The-git-checkout-Command" class="headerlink" title="The git checkout Command"></a>The git checkout Command</h3><p>Remember that when a commit is made that it will be added to the current branch. So even though we created the new sidebar, no new commits will be added to it since we haven’t switched to it, yet. If we made a commit right now, that commit would be added to the master branch, not the sidebar branch. We’ve already seen this in the demo, but to switch between branches, we need to use Git’s checkout command.</p><pre><code class="hljs bash">git checkout sidebar</code></pre><p>It’s important to understand how this command works. Running this command will:</p><ul><li>remove all files and directories from the Working Directory that Git is tracking (files that Git tracks are stored in the repository, so nothing is lost)</li><li>go into the repository and pull out all of the files and directories of the commit that the branch points to</li></ul><h3 id="Branches-In-The-Log"><a href="#Branches-In-The-Log" class="headerlink" title="Branches In The Log"></a>Branches In The Log</h3><p>The branch information in the command prompt is helpful, but the clearest way to see it is by looking at the output of git log. But just like we had to use the –decorate flag to display Git tags, we need it to display branches.</p><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline --decorate</code></pre><h3 id="Delete-A-Branch"><a href="#Delete-A-Branch" class="headerlink" title="Delete A Branch"></a>Delete A Branch</h3><p>A branch is used to do development or make a fix to the project that won’t affect the project (since the changes are made on a branch). Once you make the change on the branch, you can combine that branch into the master branch (this “combining of branches” is called “merging” and we’ll look at it shortly).</p><p>Now after a branch’s changes have been merged, you probably won’t need the branch anymore. If you want to delete the branch, you’d use the -d flag. The command below includes the -d flag which tells Git to delete the provided branch (in this case, the “sidebar” branch).</p><pre><code class="hljs bash">git branch -d sidebar</code></pre><p>One thing to note is that you can’t delete a branch that you’re currently on. So to delete the sidebar branch, you’d have to switch to either the master branch or create and switch to a new branch.</p><p>Deleting something can be quite nerve-wracking. Don’t worry, though. Git won’t let you delete a branch if it has commits on it that aren’t on any other branch (meaning the commits are unique to the branch that’s about to be deleted). If you created the sidebar branch, added commits to it, and then tried to delete it with the git branch -d sidebar, Git wouldn’t let you delete the branch because you can’t delete a branch that you’re currently on. If you switched to the master branch and tried to delete the sidebar branch, Git also wouldn’t let you do that because those new commits on the sidebar branch would be lost! To force deletion, you need to use a capital D flag - git branch -D sidebar.</p><h3 id="Git-Branch-Recap"><a href="#Git-Branch-Recap" class="headerlink" title="Git Branch Recap"></a>Git Branch Recap</h3><p>To recap, the git branch command is used to manage branches in Git:</p><pre><code class="hljs bash"><span class="hljs-comment"># to list all branches</span>git branch<span class="hljs-comment"># to create a new &quot;footer-fix&quot; branch</span>git branch footer-fix<span class="hljs-comment"># to delete the &quot;footer-fix&quot; branch</span>git branch -d footer-fix</code></pre><h2 id="Branching-Effectively"><a href="#Branching-Effectively" class="headerlink" title="Branching Effectively"></a>Branching Effectively</h2><p>First, make sure we’re on the same page and have the same starter code. We’re going to be working in the new-git-project project. The project has the following files:</p><ul><li>index.html</li><li>css/app.css (empty)</li><li>js/app.js (empty)</li></ul><p>The CSS and JavaScript files are empty. Make sure the index file has the following content:</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Blog Project<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/app.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Expedition<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>        Made with ♥ @ Git Practice    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h3 id="The-Game-Plan"><a href="#The-Game-Plan" class="headerlink" title="The Game Plan"></a>The Game Plan</h3><p>Right now we have all of our code on the master branch (which is the default branch). We’re about to work with branches, by:</p><ul><li>adding content to them</li><li>creating new branches</li><li>switching back and forth between them</li></ul><p>Let’s use branches to make the following changes:</p><ol><li>on the master branch - add a default color to the page</li><li>create a sidebar branch - create a sidebar for the page</li><li>on the master branch - change the heading of the page</li><li>on the sidebar branch - add more content to the sidebar</li><li>create a footer branch - add social links to the footer</li></ol><h3 id="Change-1-Add-Page-Color"><a href="#Change-1-Add-Page-Color" class="headerlink" title="Change 1 - Add Page Color"></a>Change 1 - Add Page Color</h3><p>Make sure you’re on the master branch and add the following content to css/app.css:</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00cae4</span>;&#125;</code></pre><p>Save the file. Then add the file to the staging index and commit it to the repository.</p><h3 id="Change-2-Add-Sidebar"><a href="#Change-2-Add-Sidebar" class="headerlink" title="Change 2 - Add Sidebar"></a>Change 2 - Add Sidebar</h3><p>Let’s add a sidebar to the page. But let’s say that we’re not really sure if we like the new background color. So we’ll place the sidebar branch on the commit before the one that sets the page’s color. Your SHAs will be different, but, for me, the commit that’s before the one that adds the color has a SHA of 5bfe5e7. So adding the branch to that commit would look like:</p><pre><code class="hljs bash">git branch sidebar 5bfe5e7</code></pre><p>Now use the git checkout command to switch to the new sidebar branch.<br>Running a git log –oneline –decorate shows sidebar.</p><p>Did you notice that the master branch does not display in the output? Where did it go!?! Is it lost? Don’t worry, it’s still there, we’ll see how to get it to display in just a second.</p><p>But first, in your code editor, switch to the app.css file. Notice that it does not have the CSS we previously entered! Because of this, if you load the project up in the browser, the page won’t have a colored background. This makes sense since the CSS file is empty, but do you know why?</p><p>Create a sidebar by adding the following <aside> code to the HTML file:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- start of new content --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>About Me<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eos, debitis earum molestias veniam suscipit aliquam totam exercitationem tempore neque vitae. Minima, corporis pariatur facere at quo porro beatae similique! Odit.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><span class="hljs-comment">&lt;!-- end of new content --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>    Made with ♥ @ Git Practice<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></code></pre><p>I added my <aside> content next to the <main> element as a fellow child of the <div class="container"> element.</p><p>Feel free to add any content inside the <aside> element!</p><p>Don’t Change the CSS</p><p>We’ll change it later, but if you make a change right now, we’ll end up having what’s known as a “merge conflict”. We’ll manually cause a merge conflict in a bit, but we don’t want to have one right now, so just don’t make any changes to the CSS file, yet.</p><h3 id="Change-3-Change-Heading-On-Master"><a href="#Change-3-Change-Heading-On-Master" class="headerlink" title="Change 3 - Change Heading On Master"></a>Change 3 - Change Heading On Master</h3><p>Let’s switch back to the master branch and update the page heading.</p><p>Use the git checkout command to switch back to the master branch. (Notice that the HTML for the new sidebar is no longer there(!) because all that code is stored safely on the sidebar branch.)</p><p>Now change the <code>&lt;h1&gt;</code> heading of the page from “Expedition” to something else. How about something exciting like the word “Adventure”!?!</p><p>How do you have Git show you the changes you’ve saved, but not yet committed?</p><pre><code class="hljs bash">git diff</code></pre><p>Now it’s time to save the index.html file and make a commit to add this change to the repository. (I used the commit message “Improve site heading for SEO”, but see if you can think of a better one)</p><h3 id="Change-4-Add-More-Content-To-Sidebar"><a href="#Change-4-Add-More-Content-To-Sidebar" class="headerlink" title="Change 4 - Add More Content To Sidebar"></a>Change 4 - Add More Content To Sidebar</h3><p>Switch back to the sidebar branch (notice, again, that content we’ve added to the master branch isn’t visible on the sidebar branch).</p><p>Now just add some content inside the <aside> element. Add something about yourself - your favorite movie or book (my favorite is LOTR!). Anything will work, you just need to add some content.</p><p>Again, make sure that you do not make changes to the CSS file.</p><p>Now save the index.html file and make a commit.</p><h3 id="Change-5-Add-Social-Links-To-Footer"><a href="#Change-5-Add-Social-Links-To-Footer" class="headerlink" title="Change 5 - Add Social Links To Footer"></a>Change 5 - Add Social Links To Footer</h3><p>We’ve made a number of changes, and we’re about to make our last one. Let’s add some social icons to the page’s footer. For grins and giggles, let’s make this change on a new footer branch that’s based off the master branch. So we need to create a new footer branch, first.</p><p>Switch and Create Branch In One Command</p><p>The way we currently work with branches is to create a branch with the git branch command and then switch to that newly created branch with the git checkout command.</p><p>But did you know that the git checkout command can actually create a new branch, too? If you provide the -b flag, you can create a branch and switch to it all in one command.</p><pre><code class="hljs bash">git checkout -b richards-branch-for-awesome-changes</code></pre><p>Let’s use this new feature of the git checkout command to create our new footer branch and have this footer branch start at the same location as the master branch:</p><pre><code class="hljs bash">git checkout -b footer master</code></pre><p>Add Social Links</p><p>Now that we’re on a new branch, let’s add some social links to the page’s footer:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>    <span class="hljs-comment">&lt;!-- start of new content --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;visuallyhidden&quot;</span>&gt;</span>Social Links<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://twitter.com/udacity&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/social-twitter.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Twitter&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.instagram.com/udacity/&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/social-instagram.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Instagram&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;social-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://plus.google.com/+Udacity&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/social-google.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Google Plus&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>    <span class="hljs-comment">&lt;!-- end of new content --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></code></pre><h3 id="See-All-Branches-At-Once"><a href="#See-All-Branches-At-Once" class="headerlink" title="See All Branches At Once"></a>See All Branches At Once</h3><p>We’ve made it to the end of all the changes we needed to make! Awesome job!</p><p>Now we have multiple sets of changes on three different branches. We can’t see other branches unless in the <code>git log</code> output unless we switch to a branch. Wouldn’t it be nice if we could see all branches at once in the <code>git log</code> output.</p><p>As you’ve hopefully learned by now, the <code>git log</code> command is pretty powerful and can show us this information. We’ll use the new <code>--graph</code> and <code>--all</code> flags:</p><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline --decorate --graph --all</code></pre><p>The <code>--graph</code> flag adds the bullets and lines to the leftmost part of the output. This shows the actual branching that’s happening. The <code>--all</code> flag is what displays all of the branches in the repository.</p><p>Running this command will show all branches and commits in the repository:</p><h3 id="Merging"><a href="#Merging" class="headerlink" title="Merging"></a>Merging</h3><p>Remember that the purpose of a topic branch (like sidebar) is that it lets you make changes that do not affect the master branch. Once you make changes on the topic branch, you can either decide that you don’t like the changes on the branch and you can just delete that branch, or you can decide that you want to keep the changes on the topic branch and combine those changes in with those on another branch.</p><p>Combining branches together is called merging.</p><p>Git can automatically merge the changes on different branches together. This branching and merging ability is what makes Git incredibly powerful! You can make small or extensive changes on branches, and then just use Git to combine those changes together.</p><p>It’s very important to know which branch you’re on when you’re about to merge branches together. Remember that making a merge makes a commit.</p><p>As of right now, we do not know how to undo changes. but if you make a merge on the wrong branch, use this command to undo the merge:</p><pre><code class="hljs bash">git reset --hard HEAD^(Make sure to include the ^ character! It<span class="hljs-string">&#x27;s a known as a &quot;Relative Commit Reference&quot; and indicates &quot;the parent commit&quot;.)</span></code></pre><h3 id="The-Merge-Command"><a href="#The-Merge-Command" class="headerlink" title="The Merge Command"></a>The Merge Command</h3><p>The git merge command is used to combine Git branches:</p><pre><code class="hljs bash">git merge &lt;name-of-branch-to-merge-in&gt;</code></pre><p>When a merge happens, Git will:</p><ul><li>look at the branches that it’s going to merge</li><li>look back along the branch’s history to find a single commit that both branches have in their commit history</li><li>combine the lines of code that were changed on the separate branches together</li><li>makes a commit to record the merge</li></ul><h3 id="Fast-forward-Merge"><a href="#Fast-forward-Merge" class="headerlink" title="Fast-forward Merge"></a>Fast-forward Merge</h3><p>In our project, I’ve checked out the master branch and I want it to have the changes that are on the footer branch. If I wanted to verbalize this, I could say this is - “I want to merge in the footer branch”. That “merge in” is important; when a merge is performed, the other branch’s changes are brought into the branch that’s currently checked out.</p><p>Let me stress that again - When we merge, we’re merging some other branch into the current (checked-out) branch. We’re not merging two branches into a new branch. We’re not merging the current branch into the other branch.</p><p>Now, since footer is directly ahead of master, this merge is one of the easiest merges to do. Merging footer into master will cause a Fast-forward merge. A Fast-forward merge will just move the currently checked out branch forward until it points to the same commit that the other branch (in this case, footer) is pointing to.</p><p>To merge in the footer branch, run:</p><pre><code class="hljs bash">git merge footer</code></pre><h3 id="Perform-A-Regular-Merge"><a href="#Perform-A-Regular-Merge" class="headerlink" title="Perform A Regular Merge"></a>Perform A Regular Merge</h3><p>Let’s do the more common kind of merge where two divergent branches are combined. You’ll be surprised that to merge in a divergent branch like sidebar is actually no different!</p><p>To merge in the sidebar branch, make sure you’re on the master branch and run:</p><pre><code class="hljs bash">git merge sidebar</code></pre><p>Because this combines two divergent branches, a commit is going to be made. And when a commit is made, a commit message needs to be supplied. Since this is a merge commit a default message is already supplied. You can change the message if you want, but it’s common practice to use the default merge commit message. So when your code editor opens with the message, just close it again and accept that commit message.</p><p>The merges we just did were able to merge successfully. Git is able to intelligently combine lots of work on different branches. However, there are times when it can’t combine branches together. When a merge is performed and fails, that is called a merge conflict.</p><h3 id="Merge-Conflicts"><a href="#Merge-Conflicts" class="headerlink" title="Merge Conflicts"></a>Merge Conflicts</h3><p>Sometimes Merges Fail<br>Most of the time Git will be able to merge branches together without any problem. However, there are instances when a merge cannot be fully performed automatically. When a merge fails, it’s called a merge conflict.</p><p>If a merge conflict does occur, Git will try to combine as much as it can, but then it will leave special markers (e.g. &gt;&gt;&gt; and &lt;&lt;&lt;) that tell you where you (yep, you the programmer!) needs to manually fix.</p><p>What Causes A Merge Conflict</p><p>As you’ve learned, Git tracks lines in files. A merge conflict will happen when the exact same line(s) are changed in separate branches. For example, if you’re on a alternate-sidebar-style branch and change the sidebar’s heading to “About Me” but then on a different branch and change the sidebar’s heading to “Information About Me”, which heading should Git choose? You’ve changed the heading on both branches, so there’s no way Git will know which one you actually want to keep. And it sure isn’t going to just randomly pick for you!</p><p>Let’s force a merge conflict so we can learn to resolve it. Trust me, it’s simple once you get the hang of it! Remember that a merge conflict occurs when Git isn’t sure which line(s) you want to use from the branches that are being merged. So we need to edit the same line on two different branches…and then try to merge them.</p><p>Forcing A Merge Conflict!</p><p>Remember that a merge conflict occurs when the exact same line(s) are changed in separate branches. Let’s alter the page’s heading on two different branches. So Let’s:</p><ul><li>change the heading on the master branch</li><li>create a heading-update branch that’s located on the commit right before the recently modified master branch</li><li>change the same heading</li><li>switch back to the master branch</li><li>merge in the heading-update branch</li></ul><p>Change Heading On Branch 1<br>Since the master branch is just a regular ol’ branch like all the rest, let’s just alter the heading while we’re on the master branch. So change the <code>&lt;h1&gt;</code> heading from whatever you have it to something else. For me, the heading is currently “Adventure” on line 13, and I’m changing it to “Quest”.</p><p>Once you’ve made the change, save the file and commit it to the repository.</p><p>Change Heading On Branch 2<br>Now we need to create a different branch and update the heading on that branch.</p><p>Now this is important, we need to create a branch that’s not branching from the master branch. If we make a change that branches off of the master branch, then that change will be “ahead” of this one and Git will just use that change instead of the one we just made on master. So we need to put the branch “in the past”.</p><p>Let’s just create a branch that’s on the commit right before the most recent one. So use Git log to get the previous commit’s SHA and create a branch on that commit.</p><p>Ok, now that we’ve got our branch created, we just need to update the heading, again. Now make sure you change the exact same line that you changed on the master branch. I’m changing “Adventure” on line 13 to “Crusade”.</p><p>Then save the file and commit it to the repository.</p><p>Make sure you’re on the master branch (we could really do this on either branch, but I just have a habit of keeping the master branch the main one that other topic branches get merged into) and merge in the heading-update branch:</p><pre><code class="hljs bash">git merge heading-update</code></pre><p>Notice that right after the git merge heading-update command, it tries merging the file that was changed on both branches (index.html), but that there was a conflict. Also, notice that it tells you what happened - “Automatic merge failed; fix conflicts and then commit the result”.</p><p>Remember our good friend git status? Well he’ll come in really handy when working with merge conflicts.</p><p>The git status output tells us to that the merge conflict is inside index.html. So check out that file in your code editor!</p><p>Resolving A Merge Conflict<br>Git is using the merge conflict indicators to show you what lines caused the merge conflict on the two different branches as well as what the original line used to have. So to resolve a merge conflict, you need to:</p><p>choose which line(s) to keep<br>remove all lines with indicators</p><h2 id="Undoing-Changes"><a href="#Undoing-Changes" class="headerlink" title="Undoing Changes"></a>Undoing Changes</h2><h3 id="Modifying-The-Last-Commit"><a href="#Modifying-The-Last-Commit" class="headerlink" title="Modifying The Last Commit"></a>Modifying The Last Commit</h3><p>You’ve already made plenty of commits with the git commit command. Now with the –amend flag, you can alter the most-recent commit.</p><p>If your Working Directory is clean (meaning there aren’t any uncommitted changes in the repository), then running git commit –amend will let you provide a new commit message. Your code editor will open up and display the original commit message. Just fix a misspelling or completely reword it! Then save it and close the editor to lock in the new commit message.</p><p>Add Forgotten Files To Commit</p><p>Alternatively, <code>git commit --amend</code> will let you include files (or changes to files) you might’ve forgotten to include. Let’s say you’ve updated the color of all navigation links across your entire website. You committed that change and thought you were done. But then you discovered that a special nav link buried deep on a page doesn’t have the new color. You could just make a new commit that updates the color for that one link, but that would have two back-to-back commits that do practically the exact same thing (change link colors).</p><p>Instead, you can amend the last commit (the one that updated the color of all of the other links) to include this forgotten one. To do get the forgotten link included, just:</p><ul><li>edit the file(s)</li><li>save the file(s)</li><li>stage the file(s)</li><li>and run <code>git commit --amend</code></li></ul><p>So you’d make changes to the necessary CSS and/or HTML files to get the forgotten link styled correctly, then you’d save all of the files that were modified, then you’d use <code>git add</code> to stage all of the modified files (just as if you were going to make a new commit!), but then you’d run <code>git commit --amend</code> to update the most-recent commit instead of creating a new one.</p><h3 id="Reverting-A-Commit"><a href="#Reverting-A-Commit" class="headerlink" title="Reverting A Commit"></a>Reverting A Commit</h3><p>When you tell Git to revert a specific commit, Git takes the changes that were made in commit and does the exact opposite of them. Let’s break that down a bit. If a character is added in commit A, if Git reverts commit A, then Git will make a new commit where that character is deleted. It also works the other way where if a character/line is removed, then reverting that commit will add that content back!</p><p>We ended the previous lesson with a merge conflict and resolved that conflict by setting the heading to Adventurous Quest. Let’s say that there’s a commit in your repository that changes the heading now to Quests &amp; Crusades.</p><p>Now that I’ve made a commit with some changes, I can revert it with the git revert command</p><pre><code class="hljs bash">git revert &lt;SHA-of-commit-to-revert&gt;</code></pre><p>Since the SHA of the most-recent commit is <code>db7e87a</code>, to revert it: I’ll just run <code>git revert db7e87a</code> (this will pop open my code editor to edit/accept the provided commit message)</p><h3 id="Resetting-Commits"><a href="#Resetting-Commits" class="headerlink" title="Resetting Commits"></a>Resetting Commits</h3><p>At first glance, resetting might seem coincidentally close to reverting, but they are actually quite different. Reverting creates a new commit that reverts or undos a previous commit. Resetting, on the other hand, erases commits!</p><p>You’ve got to be careful with Git’s resetting capabilities. This is one of the few commands that lets you erase commits from the repository. If a commit is no longer in the repository, then its content is gone.</p><p>To alleviate the stress a bit, Git does keep track of everything for about 30 days before it completely erases anything. To access this content, you’ll need to use the <code>git reflog</code> command.</p><h2 id="Working-With-Remotes"><a href="#Working-With-Remotes" class="headerlink" title="Working With Remotes"></a>Working With Remotes</h2><h3 id="Add-A-Remote-Repository"><a href="#Add-A-Remote-Repository" class="headerlink" title="Add A Remote Repository"></a>Add A Remote Repository</h3><p>The git remote command will let you manage and interact with remote repositories.</p><pre><code class="hljs bash">git remote</code></pre><p>If you haven’t configured a remote repository then this command will display nothing. One caveat to this is if you have cloned a repository. If you have, then your repository will automatically have a remote because it was cloned from the repository at the URL you provided. Let’s look at a repository that has been cloned.</p><p>The output of git remote is just the word origin. Well that’s weird. The word “origin”, here, is referred to as a “shortname”. A shortname is just a short and easy way to refer to the location of the remote repository. A shortname is local to the current repository (as in, your local repository). The word “origin” is the defacto name that’s used to refer to the main remote repository. It’s possible to rename this to something else, but typically it’s left as “origin”.</p><p>If you want to see the full path to the remote repository, then all you have to do is use the -v (verbose) flag.</p><h3 id="Create-A-Simple-Project"><a href="#Create-A-Simple-Project" class="headerlink" title="Create A Simple Project"></a>Create A Simple Project</h3><p>We’re going to need a sample project to test out working with remote repositories, sending updates to the remote repository, and getting changes from the remote repository, too.</p><ul><li>create a new directory for your project with the name <code>my-travel-plans</code></li><li>use <code>git init</code> to turn the <code>my-travel-plans</code> directory into a Git reposity</li><li>create a <code>README.md</code> file</li><li>create <code>index.html</code></li><li>create <code>app.css</code></li></ul><p>README File Content</p><pre><code class="hljs markdown"><span class="hljs-section"># Travel Destinations</span>A simple app to keep track of destinations I&#x27;d like to visit.</code></pre><p>HTML File Content<br>Add the following content to the index.html file:</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Travels<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/app.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;destination-container&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;destination&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;florida&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Florida<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;destination&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;paris&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Paris<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>CSS File Content<br>Add the following information to the CSS file:</p><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;    <span class="hljs-attribute">box-sizing</span>: border-box;    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;&#125;*,*<span class="hljs-selector-pseudo">::before</span>,*<span class="hljs-selector-pseudo">::after</span> &#123;    <span class="hljs-attribute">box-sizing</span>: inherit;&#125;<span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-attribute">display</span>: flex;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;&#125;<span class="hljs-selector-class">.container</span> &#123;    <span class="hljs-attribute">margin</span>: auto;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span>;    <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;&#125;<span class="hljs-selector-class">.destination-container</span> &#123;    <span class="hljs-attribute">display</span>: flex;    <span class="hljs-attribute">flex-flow</span>: wrap;    <span class="hljs-attribute">justify-content</span>: center;&#125;<span class="hljs-selector-class">.destination</span> &#123;    <span class="hljs-attribute">background</span>: <span class="hljs-number">#03a9f4</span>;    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">9px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>);    <span class="hljs-attribute">color</span>: white;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0.5em</span>;    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">200px</span>;    <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">200px</span>;    <span class="hljs-attribute">display</span>: flex;    <span class="hljs-attribute">justify-content</span>: center;    <span class="hljs-attribute">align-items</span>: center;    <span class="hljs-attribute">text-align</span>: center;&#125;<span class="hljs-selector-tag">h2</span> &#123;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">45deg</span>);    <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">#01579b</span>;&#125;<span class="hljs-selector-id">#florida</span> &#123;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#03a9f4</span>;&#125;<span class="hljs-selector-id">#paris</span> &#123;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d32f2f</span>;&#125;</code></pre><p>Make sure to turn the project into a Git repo and committed the file with git commit.</p><p>Now create a new repository on GitHub and typically you want to use the name of your project as the name of the repository. Creating a repository, modifying it later, or deleting it is relatively easy so don’t feel like you have to get the name perfect right here on this page. I’m going to create a repository called “my-travel-plans” that’s the same name as the sample project I created.</p><p>I’m also going to leave the “Initialize this repository with the README” option unchecked because I don’t want GitHub to add a README file for me.</p><p>Make sure that you leave the “Initialize this repository with the README” unchecked. We’ll be providing our own README, so we don’t want GitHub to provide one automatically.</p><p>Also, if we let GitHub auto-generate a new README file for us, then we won’t be provided with the setup commands to run in the terminal. It’s still possible to get that information, but it will be hidden away.</p><p>So just make sure to leave this field unchecked, and you’ll be good to go!</p><p>Now just click that big “Create Repository” button to create your remote repository!</p><p>Remember that the git remote command is used to create and manage remote repositories.</p><p>There are a couple of things to notice about the command you just ran on the command line:</p><ol><li>first, this command has the sub command add</li><li>the word origin is used - this is setting the shortname that we discussed earlier: Remember that the word origin here isn’t special in any way. If you want to change this to repo-on-GitHub, then (before running the command) just change the word “origin” to “repo-on-GitHub”: <code>$ git remote add repo-on-GitHub https://github.com/lzyacht/my-travel-plans.git</code></li><li>third, the full path to the repository is added (i.e. the URL to the remote repository on the web)</li></ol><p>Now use <code>git remote -v</code> to verify that you’ve added the remote repository correctly.</p><p>Recap</p><p>A remote repository is a repository that’s just like the one you’re using but it’s just stored at a different location. To manage a remote repository, use the <code>git remote</code> command.</p><ul><li>It’s possible to have links to multiple different remote repositories.</li><li>A shortname is the name that’s used to refer to a remote repository’s location. Typically the location is a URL, but it could be a file path on the same computer.</li><li><code>git remote add</code> is used to add a connection to a new remote repository.</li><li><code>git remote -v</code> is used to see the details about a connection to a remote.</li></ul><h3 id="Push-Changes-To-A-Remote"><a href="#Push-Changes-To-A-Remote" class="headerlink" title="Push Changes To A Remote"></a>Push Changes To A Remote</h3><p>I used the following log command to display these commits</p><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline --graph --decorate --all</code></pre><p>These commits are only in the local repository, though. They haven’t been sent up to the remote repository yet. When commits are sent to the remote a remote branch indicator will appear in the log. Since there aren’t any remote branch indicators we can tell that there are no commits on the remote repository. But just to be 100% certain let’s look at the remote repository on GitHub to see if there any commits.</p><p>Since we haven’t sent any commits update to GitHub yet it’s still showing us the setup screen to tell us how we can connect our local repository to the remote repository and send some commits. Since this is still the setup screen we can know that there are no commits in the remote repository.</p><p>To send local commits to a remote repository you need to use the <code>git push</code> command. You provide the remote short name and then you supply the name of the branch that contains the commits you want to push:</p><pre><code class="hljs bash">git push &lt;remote-shortname&gt; &lt;branch&gt;</code></pre><p>My remote’s shortname is <code>origin</code> and the commits that I want to push are on the <code>master</code> branch. So I’ll use the following command to send my commits to the remote repository on GitHub:</p><pre><code class="hljs bash">git push origin master</code></pre><p>There a couple of things to notice:</p><ul><li>Depending on how you have configured GitHub and the remote URL that’s being used, you might have to enter your username and password. (This will happen if you use the HTTP version of the remote rather than the ssh version.)</li><li>If you have to enter your username and password your username will show up after typing but your password will not. So just keep typing your password and press enter when you’re done.</li></ul><p>Now before we move on, let’s just check the local repository to see how it changed after pushing.</p><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline --graph --decorate --all</code></pre><p>We now have a new marker in the output! This marker is <code>origin/master</code> and is called a tracking branch. A tracking branch’s name includes the shortname of the remote repository as well as the name of the branch. So the tracking branch <code>origin/master</code> is telling us that the remote origin has a master branch that points to commit 9b7d28f (and includes all of the commits before 9b7d28f). This is really helpful because this means we can track the information of the remote Repository right here in our local one!</p><p>One very important thing to know is that this <code>origin/master</code> tracking branch is not a live representation of where the branch exists on the remote repository. If a change is made to the remote repository not by us but by someone else, the origin/master tracking branch in our local repository will not move. We have to tell it to go check for any updates and then it will move.</p><p>Recap<br>The <code>git push</code> command is used to send commits from a local repository to a remote repository.</p><pre><code class="hljs bash">git push origin master</code></pre><p>The <code>git push</code> command takes:</p><ul><li>the shortname of the remote repository you want to send commits to</li><li>the name of the branch that has the commits you want to send</li></ul><h3 id="Pulling-Changes-From-A-Remote"><a href="#Pulling-Changes-From-A-Remote" class="headerlink" title="Pulling Changes From A Remote"></a>Pulling Changes From A Remote</h3><p>Let’s say that we are in a situation where there are commits on the remote repository that we do not have in our local repository. This can happen in several ways: You could be working on a team, and a co-worker has pushed new changes to the remote. Alternatively, you could be working on the same project but from different computers – for example, say you have a work computer and a personal computer, and you contribute to the repo from both of them. If you push changes to the repo from your work computer, the local repo on your personal computer will not reflect those changes. How do we sync new changes that are on the remote into the local repository? That’s exactly where we’re going to be looking at now. Let’s first look at how pulling in remote changes works in theory, then we’ll actually do it ourselves!</p><p>Since we don’t have any commits on our remote repository yet and we’re not collaborating with anybody we’re going to fake it and add some commits manually through GitHub’s interface on the web.</p><p>Add the following new ruleset to app.css:</p><pre><code class="hljs css"><span class="hljs-selector-class">.destination</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">h2</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);&#125;</code></pre><p>Add <code>transition: transform 0.5s</code>; to the <code>h2</code> ruleset, so it should now be:</p><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span> &#123;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">45deg</span>);    <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.5s</span>;    <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">#01579b</span>;&#125;</code></pre><p>Because GitHub has a web interface, it allows you to add commits manually through its interface. But just because you can do a thing, doesn’t mean you should. I’ve demoed making these changes this way so that we could simulate commits being on the remote repository but not in the local repository. But I recommend that you should always work locally on a project and then push those changes to the remote repository.</p><p>Now let’s compare our local repository and our remote repository. We only have three commits in our local repository.</p><p>While there are actually four commits in the remote repository.</p><p>The local commits end at commit 5a010d1 while the remote has two extra commits - commit 4b81b2a and commit b847434.</p><p>Also, notice that in our local repository when we did the git log the origin/master branch is still pointing to commit 5a010d1.</p><p>Remember that the origin/master branch is not a live mapping of where the remote’s master branch is located. If the remote’s master moves, the local origin/master branch stays the same. To update this branch, we need to sync the two together.</p><p>git push will sync the remote repository with the local repository. To do the opposite (to sync the local with the remote), we need to use git pull. The format for git pull is very similar to git push - you provided the shortname for the remote repository and then the name of the branch you want to pull in the commits.</p><pre><code class="hljs bash">git pull origin master</code></pre><p>There’s several things to note about running this command:</p><ul><li>the format is very similar to that of git push - there’s counting and compressing and packing of items</li><li>it has the phrase “fast-forward” which means Git did a fast-forward merge (we’ll dig into this in just a second)</li><li>it displays information similar to git log –stat where it shows the files that have been changed and how many lines were added or removed in them</li></ul><p>If you don’t want to automatically merge the local branch with the tracking branch then you wouldn’t use git pull you would use a different command called git fetch. You might want to do this if there are commits on the repository that you don’t have but there are also commits on the local repository that the remote one doesn’t have either.</p><p>Recap</p><p>If there are changes in a remote repository that you’d like to include in your local repository, then you want to pull in those changes. To do that with Git, you’d use the git pull command. You tell Git the shortname of the remote you want to get the changes from and then the branch that has the changes you want:</p><pre><code class="hljs bash">git pull origin master</code></pre><p>When git pull is run, the following things happen:</p><ul><li>the commit(s) on the remote branch are copied to the local repository</li><li>the local tracking branch (origin/master) is moved to point to the most recent commit</li><li>the local tracking branch (origin/master) is merged into the local branch (master)</li></ul><h3 id="Pull-vs-Fetch"><a href="#Pull-vs-Fetch" class="headerlink" title="Pull vs Fetch"></a>Pull vs Fetch</h3><p>Git fetch is used to retrieve commits from a remote repository’s branch but it does not automatically merge the local branch with the remote tracking branch after those commits have been received.</p><p>You provide the exact same information to git fetch as you do for git pull. So you provide the shortname of the remote repository you want to fetch from and then the branch you want to fetch:</p><pre><code class="hljs bash">git fetch origin master</code></pre><p>When git fetch is run, the following things happen:</p><ul><li>the commit(s) on the remote branch are copied to the local repository</li><li>the local tracking branch (e.g. origin/master) is moved to point to the most recent commit</li></ul><p>The important thing to note is that the local branch does not change at all.</p><p>You can think of git fetch as half of a git pull. The other half of git pull is the merging aspect.</p><p>One main point when you want to use git fetch rather than git pull is if your remote branch and your local branch both have changes that neither of the other ones has. In this case, you want to fetch the remote changes to get them in your local branch and then perform a merge manually. Then you can push that new merge commit back to the remote.</p><p>Recap<br>You can think of the git pull command as doing two things:</p><ol><li>fetching remote changes (which adds the commits to the local repository and moves the tracking branch to point to them)</li><li>merging the local branch with the tracking branch</li></ol><p>The git fetch command is just the first step. It just retrieves the commits and moves the tracking branch. It does not merge the local branch with the tracking branch. The same information provided to git pull is passed to git fetch:</p><ul><li>the shorname of the remote repository</li><li>the branch with commits to retrieve</li></ul><pre><code class="hljs bash">git fetch origin master</code></pre><h2 id="Working-On-Another-Developer’s-Repository"><a href="#Working-On-Another-Developer’s-Repository" class="headerlink" title="Working On Another Developer’s Repository"></a>Working On Another Developer’s Repository</h2><h3 id="Forking-A-Repository"><a href="#Forking-A-Repository" class="headerlink" title="Forking A Repository"></a>Forking A Repository</h3><p>In version control terminology if you “fork” a repository that means you duplicate it. Typically you fork a repository that belongs to someone else. So you make an identical copy of their repository and that duplicate copy now belongs to you.</p><p>This concept of “forking” is also different from “cloning”. When you clone a repository, you get an identical copy of the repository. But cloning happens on your local machine and you clone a remote repository. When you fork a repository, a new duplicate copy of the remote repository is created. This new copy is also a remote repository, but it now belongs to you.</p><h2 id="Staying-In-Sync-With-A-Remote-Repository"><a href="#Staying-In-Sync-With-A-Remote-Repository" class="headerlink" title="Staying In Sync With A Remote Repository"></a>Staying In Sync With A Remote Repository</h2><h3 id="Create-a-Pull-Request"><a href="#Create-a-Pull-Request" class="headerlink" title="Create a Pull Request"></a>Create a Pull Request</h3><p>A pull request is a request to the original or source repository’s maintainer to include changes in their project that you made in your fork of their project. You are requesting that they pull in changes you’ve made.</p><p>To create a pull request, a couple of things need to happen:</p><ul><li>you must fork the source repository</li><li>clone your fork down to your machine</li><li>make some commits (ideally on a topic branch!)</li><li>push the commits back to your fork</li><li>create a new pull request and choose the branch that has your new commits</li></ul><h3 id="Stay-in-sync-with-source-project"><a href="#Stay-in-sync-with-source-project" class="headerlink" title="Stay in sync with source project"></a>Stay in sync with source project</h3><p>Stars &amp; Watching<br>If you want to keep up-to-date with the Repository, GitHub offers a convenient way to keep track of repositories - it lets you star repositories:</p><p>You can go to <code>https://github.com/stars</code> to list out and filter all of the repositories that you have starred.</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUDA &amp; cuDNN configuration for a Ubuntu 16.04 deep learning machine</title>
    <link href="/2017/09/21/Cuda-cuDNN-configuration-for-a-Ubuntu-16-04-deep-learning-machine/"/>
    <url>/2017/09/21/Cuda-cuDNN-configuration-for-a-Ubuntu-16-04-deep-learning-machine/</url>
    
    <content type="html"><![CDATA[<h2 id="Install-CUDA-8-0"><a href="#Install-CUDA-8-0" class="headerlink" title="Install CUDA 8.0"></a>Install CUDA 8.0</h2><pre><code class="hljs bash">sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.debsudo apt-get updatesudo apt-get install cuda</code></pre><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><pre><code class="hljs bash">sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-cublas-performance-update_8.0.61-1_amd64.debsudo apt-get updatesudo apt-get upgrade</code></pre><h2 id="Add-libraries-to-bashrc-file"><a href="#Add-libraries-to-bashrc-file" class="headerlink" title="Add libraries to .bashrc file,"></a>Add libraries to .bashrc file,</h2><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=/usr/local/cuda/bin:$PATH&#x27;</span> &gt;&gt; ~/.bashrc<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc<span class="hljs-built_in">source</span> ~/.bashrc</code></pre><h2 id="After-sourcing-the-bashrc-file-the-CUDA-version-can-be-verified-using"><a href="#After-sourcing-the-bashrc-file-the-CUDA-version-can-be-verified-using" class="headerlink" title="After sourcing the bashrc file, the CUDA version can be verified using"></a>After sourcing the bashrc file, the CUDA version can be verified using</h2><pre><code class="hljs bash">nvcc -V</code></pre><p>Next step is to install cuDNN. cuDNN can be downloaded from NVIDIA’s webpage <a href="https://developer.nvidia.com/cudnn">https://developer.nvidia.com/cudnn</a>.</p><p>Extract cuDNN and install.</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Downloads/tar xvf cudnn*.tgz<span class="hljs-built_in">cd</span> cudasudo cp */*.h /usr/<span class="hljs-built_in">local</span>/cuda/include/sudo cp */libcudnn* /usr/<span class="hljs-built_in">local</span>/cuda/lib64/sudo chmod a+r /usr/<span class="hljs-built_in">local</span>/cuda/lib64/libcudnn*</code></pre><p>Once finished those above, install tensorflow in virtulenv and activate it.</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CUDA</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Customize the GIT for Windows</title>
    <link href="/2017/01/17/Customize-the-GIT-for-Windows/"/>
    <url>/2017/01/17/Customize-the-GIT-for-Windows/</url>
    
    <content type="html"><![CDATA[<p>How to customize The Git For Windows Bash Shell Prompt</p><p>The Git for Windows Bash prompt is set using a configuration shell script named git-prompt.sh that can be found in the following directory:</p><blockquote><p>C:\Program Files\Git\etc\profile.d\</p></blockquote><p>To remove the “MINGW64” you need to remove the following two lines</p><blockquote><p>PS1=”$PS1”‘[\033[35m]‘ # change to purple<br>PS1=”$PS1”‘$MSYSTEM ‘ # show MSYSTEM</p></blockquote><p>I like to also change the first PS1 line which sets the title by removing the</p><p>$TITLEPREFIX:</p><p>and replacing it with</p><p>Bash Prompt (Git for Windows) =&gt;</p><p>Also remove two places of PS1=”$PS1”‘\n’ for no new line.</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Some tips about PostgreSQL and MIMICIII database</title>
    <link href="/2017/01/13/Some-tips-about-PostgreSQL-and-MIMICIII-database/"/>
    <url>/2017/01/13/Some-tips-about-PostgreSQL-and-MIMICIII-database/</url>
    
    <content type="html"><![CDATA[<h2 id="Intro-to-PostgreSQL"><a href="#Intro-to-PostgreSQL" class="headerlink" title="Intro to PostgreSQL"></a>Intro to PostgreSQL</h2><h3 id="Architectural-Fundamentals"><a href="#Architectural-Fundamentals" class="headerlink" title="Architectural Fundamentals"></a>Architectural Fundamentals</h3><p>PostgreSQL uses a client/server model. A PostgreSQL session consists of the following cooperating processes (programs):</p><ol><li><p>A server process, which manages the database files, accepts connections to the database from client applications, and performs database actions on behalf of the clients. The database server program is called postgres.</p></li><li><p>The user’s client (frontend) application that wants to perform database operations. Client applications can be very diverse in nature: a client could be a text-oriented tool, a graphical application, a web server that accesses the database to display web pages, or a specialized database maintenance tool. Some client applications are supplied with the PostgreSQL distribution; most are developed by users.</p></li></ol><p>The PostgreSQL server can handle multiple concurrent connections from clients. To achieve this it starts (“forks”) a new process for each connection. From that point on, the client and the new server process communicate without intervention by the original postgres process. Thus, the master server process is always running, waiting for client connections, whereas client and associated server processes come and go. (All of this is of course invisible to the user. We only mention it here for completeness.)</p><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><p>PostgreSQL is a relational database management system (RDBMS). That means it is a system for managing data stored in relations. Relation is essentially a mathematical term for table. The notion of storing data in tables is so commonplace today that it might seem inherently obvious, but there are a number of other ways of organizing databases. Files and directories on Unix-like operating systems form an example of a hierarchical database. A more modern development is the object-oriented database.</p><ol><li><p>Each table is a named collection of rows. Each row of a given table has the same set of named columns, and each column is of a specific data type. Whereas columns have a fixed order in each row, it is important to remember that SQL does not guarantee the order of the rows within the table in any way (although they can be explicitly sorted for display).</p></li><li><p>Tables are grouped into databases, and a collection of databases managed by a single PostgreSQL server instance constitutes a database cluster.</p></li></ol><h3 id="Creating-a-New-Table"><a href="#Creating-a-New-Table" class="headerlink" title="Creating a New Table"></a>Creating a New Table</h3><p>You can create a new table by specifying the table name, along with all column names and their types:</p><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> weather (    city            <span class="hljs-built_in">varchar</span>(<span class="hljs-number">80</span>),    temp_lo         <span class="hljs-built_in">int</span>,           <span class="hljs-comment">-- low temperature</span>    temp_hi         <span class="hljs-built_in">int</span>,           <span class="hljs-comment">-- high temperature</span>    prcp            <span class="hljs-built_in">real</span>,          <span class="hljs-comment">-- precipitation</span>    <span class="hljs-built_in">date</span>            <span class="hljs-built_in">date</span>);</code></pre><p>You can enter this into psql with the line breaks. psql will recognize that the command is not terminated until the semicolon.<br>White space (i.e., spaces, tabs, and newlines) can be used freely in SQL commands. That means you can type the command aligned differently than above, or even all on one line. Two dashes (“–”) introduce comments. Whatever follows them is ignored up to the end of the line. SQL is case insensitive about key words and identifiers, except when identifiers are double-quoted to preserve the case (not done above).<br>varchar(80) specifies a data type that can store arbitrary character strings up to 80 characters in length. int is the normal integer type. real is a type for storing single precision floating-point numbers. date should be self-explanatory. (Yes, the column of type date is also named date. This might be convenient or confusing — you choose.)<br>PostgreSQL supports the standard SQL types int, smallint, real, double precision, char(N), varchar(N), date, time, timestamp, and interval, as well as other types of general utility and a rich set of geometric types. PostgreSQL can be customized with an arbitrary number of user-defined data types. Consequently, type names are not key words in the syntax, except where required to support special cases in the SQL standard.<br>The second example will store cities and their associated geographical location:</p><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> cities (    <span class="hljs-keyword">name</span>            <span class="hljs-built_in">varchar</span>(<span class="hljs-number">80</span>),    location        point);</code></pre><p>The point type is an example of a PostgreSQL-specific data type.<br>Finally, it should be mentioned that if you don’t need a table any longer or want to recreate it differently you can remove it using the following command:</p><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> tablename;</code></pre><h3 id="Populating-a-Table-With-Rows"><a href="#Populating-a-Table-With-Rows" class="headerlink" title="Populating a Table With Rows"></a>Populating a Table With Rows</h3><p>The INSERT statement is used to populate a table with rows:</p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> weather <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;San Francisco&#x27;</span>, <span class="hljs-number">46</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0.25</span>, <span class="hljs-string">&#x27;1994-11-27&#x27;</span>);</code></pre><p>Note that all data types use rather obvious input formats. Constants that are not simple numeric values usually must be surrounded by single quotes (‘), as in the example. The date type is actually quite flexible in what it accepts, but for this tutorial we will stick to the unambiguous format shown here.<br>The point type requires a coordinate pair as input, as shown here:</p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> cities <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;San Francisco&#x27;</span>, <span class="hljs-string">&#x27;(-194.0, 53.0)&#x27;</span>);</code></pre><p>The syntax used so far requires you to remember the order of the columns. An alternative syntax allows you to list the columns explicitly:</p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> weather (city, temp_lo, temp_hi, prcp, <span class="hljs-built_in">date</span>)    <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;San Francisco&#x27;</span>, <span class="hljs-number">43</span>, <span class="hljs-number">57</span>, <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;1994-11-29&#x27;</span>);</code></pre><p>You can list the columns in a different order if you wish or even omit some columns, e.g., if the precipitation is unknown:</p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> weather (<span class="hljs-built_in">date</span>, city, temp_hi, temp_lo)    <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1994-11-29&#x27;</span>, <span class="hljs-string">&#x27;Hayward&#x27;</span>, <span class="hljs-number">54</span>, <span class="hljs-number">37</span>);</code></pre><p>Many developers consider explicitly listing the columns better style than relying on the order implicitly.<br>Please enter all the commands shown above so you have some data to work with in the following sections.<br>You could also have used COPY to load large amounts of data from flat-text files. This is usually faster because the COPY command is optimized for this application while allowing less flexibility than INSERT. An example would be:</p><pre><code class="hljs sql">COPY weather FROM &#x27;/home/user/weather.txt&#x27;;</code></pre><p>where the file name for the source file must be available on the machine running the backend process, not the client, since the backend process reads the file directly. You can read more about the COPY command in COPY.</p><h3 id="Using-SELECT"><a href="#Using-SELECT" class="headerlink" title="Using SELECT"></a>Using SELECT</h3><p>Querying a Table<br>To retrieve data from a table, the table is queried. An SQL SELECT statement is used to do this. The statement is divided into a select list (the part that lists the columns to be returned), a table list (the part that lists the tables from which to retrieve the data), and an optional qualification (the part that specifies any restrictions). For example, to retrieve all the rows of table weather, type:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> weather;</code></pre><p>Here * is a shorthand for “all columns”. So the same result would be had with:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city, temp_lo, temp_hi, prcp, <span class="hljs-built_in">date</span> <span class="hljs-keyword">FROM</span> weather;</code></pre><p>You can write expressions, not just simple column references, in the select list. For example, you can do:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city, (temp_hi+temp_lo)/<span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> temp_avg, <span class="hljs-built_in">date</span> <span class="hljs-keyword">FROM</span> weather;</code></pre><p>A query can be “qualified” by adding a WHERE clause that specifies which rows are wanted. The WHERE clause contains a Boolean (truth value) expression, and only rows for which the Boolean expression is true are returned. The usual Boolean operators (AND, OR, and NOT) are allowed in the qualification. For example, the following retrieves the weather of San Francisco on rainy days:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> weather    <span class="hljs-keyword">WHERE</span> city = <span class="hljs-string">&#x27;San Francisco&#x27;</span> <span class="hljs-keyword">AND</span> prcp &gt; <span class="hljs-number">0.0</span>;</code></pre><p>You can request that the results of a query be returned in sorted order:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> weather    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> city;</code></pre><p>In this example, the sort order isn’t fully specified, and so you might get the San Francisco rows in either order. But you’d always get the results shown above if you do:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> weather    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> city, temp_lo;</code></pre><p>You can request that duplicate rows be removed from the result of a query:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> city    <span class="hljs-keyword">FROM</span> weather;</code></pre><p>Here again, the result row ordering might vary. You can ensure consistent results by using DISTINCT and ORDER BY together:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> city    <span class="hljs-keyword">FROM</span> weather    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> city;</code></pre><h3 id="Joins-Between-Tables"><a href="#Joins-Between-Tables" class="headerlink" title="Joins Between Tables"></a>Joins Between Tables</h3><p>Thus far, our queries have only accessed one table at a time. Queries can access multiple tables at once, or access the same table in such a way that multiple rows of the table are being processed at the same time. A query that accesses multiple rows of the same or different tables at one time is called a join query. As an example, say you wish to list all the weather records together with the location of the associated city. To do that, we need to compare the city column of each row of the weather table with the name column of all rows in the cities table, and select the pairs of rows where these values match.<br>This would be accomplished by the following query:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *    <span class="hljs-keyword">FROM</span> weather, cities    <span class="hljs-keyword">WHERE</span> city = <span class="hljs-keyword">name</span>;</code></pre><p>Observe two things about the result set:</p><p>There is no result row for the city of Hayward. This is because there is no matching entry in the cities table for Hayward, so the join ignores the unmatched rows in the weather table. We will see shortly how this can be fixed.</p><p>There are two columns containing the city name. This is correct because the lists of columns from the weather and cities tables are concatenated. In practice this is undesirable, though, so you will probably want to list the output columns explicitly rather than using *:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city, temp_lo, temp_hi, prcp, <span class="hljs-built_in">date</span>, location    <span class="hljs-keyword">FROM</span> weather, cities    <span class="hljs-keyword">WHERE</span> city = <span class="hljs-keyword">name</span>;Exercise: Attempt to determine the semantics of this query when the WHERE clause is omitted.</code></pre><p>Since the columns all had different names, the parser automatically found which table they belong to. If there were duplicate column names in the two tables you’d need to qualify the column names to show which one you meant, as in:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> weather.city, weather.temp_lo, weather.temp_hi,       weather.prcp, weather.date, cities.location    <span class="hljs-keyword">FROM</span> weather, cities    <span class="hljs-keyword">WHERE</span> cities.name = weather.city;</code></pre><p>It is widely considered good style to qualify all column names in a join query, so that the query won’t fail if a duplicate column name is later added to one of the tables.</p><p>Join queries of the kind seen thus far can also be written in this alternative form:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *    <span class="hljs-keyword">FROM</span> weather <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> cities <span class="hljs-keyword">ON</span> (weather.city = cities.name);</code></pre><p>This syntax is not as commonly used as the one above, but we show it here to help you understand the following topics.</p><p>Now we will figure out how we can get the Hayward records back in. What we want the query to do is to scan the weather table and for each row to find the matching cities row(s). If no matching row is found we want some “empty values” to be substituted for the cities table’s columns. This kind of query is called an outer join. (The joins we have seen so far are inner joins.) The command looks like this:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *    <span class="hljs-keyword">FROM</span> weather <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> cities <span class="hljs-keyword">ON</span> (weather.city = cities.name);</code></pre><p>This query is called a left outer join because the table mentioned on the left of the join operator will have each of its rows in the output at least once, whereas the table on the right will only have those rows output that match some row of the left table. When outputting a left-table row for which there is no right-table match, empty (null) values are substituted for the right-table columns.</p><p>Exercise: There are also right outer joins and full outer joins. Try to find out what those do.</p><p>We can also join a table against itself. This is called a self join. As an example, suppose we wish to find all the weather records that are in the temperature range of other weather records. So we need to compare the temp_lo and temp_hi columns of each weather row to the temp_lo and temp_hi columns of all other weather rows. We can do this with the following query:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> W1.city, W1.temp_lo <span class="hljs-keyword">AS</span> <span class="hljs-keyword">low</span>, W1.temp_hi <span class="hljs-keyword">AS</span> <span class="hljs-keyword">high</span>,    W2.city, W2.temp_lo <span class="hljs-keyword">AS</span> <span class="hljs-keyword">low</span>, W2.temp_hi <span class="hljs-keyword">AS</span> <span class="hljs-keyword">high</span>    <span class="hljs-keyword">FROM</span> weather W1, weather W2    <span class="hljs-keyword">WHERE</span> W1.temp_lo &lt; W2.temp_lo    <span class="hljs-keyword">AND</span> W1.temp_hi &gt; W2.temp_hi;</code></pre><p>Here we have relabeled the weather table as W1 and W2 to be able to distinguish the left and right side of the join. You can also use these kinds of aliases in other queries to save some typing, e.g.:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> *    <span class="hljs-keyword">FROM</span> weather w, cities c    <span class="hljs-keyword">WHERE</span> w.city = c.name;You will encounter this style of abbreviating quite frequently.</code></pre><h3 id="Aggregate-Functions"><a href="#Aggregate-Functions" class="headerlink" title="Aggregate Functions"></a>Aggregate Functions</h3><p>Like most other relational database products, PostgreSQL supports aggregate functions. An aggregate function computes a single result from multiple input rows. For example, there are aggregates to compute the count, sum, avg (average), max (maximum) and min (minimum) over a set of rows.<br>As an example, we can find the highest low-temperature reading anywhere with:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">max</span>(temp_lo) <span class="hljs-keyword">FROM</span> weather;</code></pre><p>If we wanted to know what city (or cities) that reading occurred in, we might try:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city <span class="hljs-keyword">FROM</span> weather <span class="hljs-keyword">WHERE</span> temp_lo = <span class="hljs-keyword">max</span>(temp_lo);     WRONG</code></pre><p>but this will not work since the aggregate max cannot be used in the WHERE clause. (This restriction exists because the WHERE clause determines which rows will be included in the aggregate calculation; so obviously it has to be evaluated before aggregate functions are computed.) However, as is often the case the query can be restated to accomplish the desired result, here by using a subquery:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city <span class="hljs-keyword">FROM</span> weather    <span class="hljs-keyword">WHERE</span> temp_lo = (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">max</span>(temp_lo) <span class="hljs-keyword">FROM</span> weather);</code></pre><p>This is OK because the subquery is an independent computation that computes its own aggregate separately from what is happening in the outer query.<br>Aggregates are also very useful in combination with GROUP BY clauses. For example, we can get the maximum low temperature observed in each city with:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city, <span class="hljs-keyword">max</span>(temp_lo)    <span class="hljs-keyword">FROM</span> weather    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city;</code></pre><p>which gives us one output row per city. Each aggregate result is computed over the table rows matching that city. We can filter these grouped rows using HAVING:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city, <span class="hljs-keyword">max</span>(temp_lo)    <span class="hljs-keyword">FROM</span> weather    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city    <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">max</span>(temp_lo) &lt; <span class="hljs-number">40</span>;</code></pre><p>which gives us the same results for only the cities that have all temp_lo values below 40. Finally, if we only care about cities whose names begin with “S”, we might do:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city, <span class="hljs-keyword">max</span>(temp_lo)    <span class="hljs-keyword">FROM</span> weather    <span class="hljs-keyword">WHERE</span> city <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;S%&#x27;</span>(<span class="hljs-number">1</span>)    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city    <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">max</span>(temp_lo) &lt; <span class="hljs-number">40</span>;</code></pre><p>It is important to understand the interaction between aggregates and SQL’s WHERE and HAVING clauses. The fundamental difference between WHERE and HAVING is this: WHERE selects input rows before groups and aggregates are computed (thus, it controls which rows go into the aggregate computation), whereas HAVING selects group rows after groups and aggregates are computed. Thus, the WHERE clause must not contain aggregate functions; it makes no sense to try to use an aggregate to determine which rows will be inputs to the aggregates. On the other hand, the HAVING clause always contains aggregate functions. (Strictly speaking, you are allowed to write a HAVING clause that doesn’t use aggregates, but it’s seldom useful. The same condition could be used more efficiently at the WHERE stage.)<br>In the previous example, we can apply the city name restriction in WHERE, since it needs no aggregate. This is more efficient than adding the restriction to HAVING, because we avoid doing the grouping and aggregate calculations for all rows that fail the WHERE check.</p><h3 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h3><p>You can update existing rows using the UPDATE command. Suppose you discover the temperature readings are all off by 2 degrees after November 28. You can correct the data as follows:</p><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> weather    <span class="hljs-keyword">SET</span> temp_hi = temp_hi - <span class="hljs-number">2</span>,  temp_lo = temp_lo - <span class="hljs-number">2</span>    <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">date</span> &gt; <span class="hljs-string">&#x27;1994-11-28&#x27;</span>;</code></pre><p>Look at the new state of the data:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> weather;</code></pre><h3 id="Deletions"><a href="#Deletions" class="headerlink" title="Deletions"></a>Deletions</h3><p>Rows can be removed from a table using the DELETE command. Suppose you are no longer interested in the weather of Hayward. Then you can do the following to delete those rows from the table:</p><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> weather <span class="hljs-keyword">WHERE</span> city = <span class="hljs-string">&#x27;Hayward&#x27;</span>;</code></pre><p>All weather records belonging to Hayward are removed.</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> weather;</code></pre><p>One should be wary of statements of the form</p><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> tablename;</code></pre><p>Without a qualification, DELETE will remove all rows from the given table, leaving it empty. The system will not request confirmation before doing this!</p><h2 id="Creating-a-MIMIC-III-Database"><a href="#Creating-a-MIMIC-III-Database" class="headerlink" title="Creating a MIMIC III Database"></a>Creating a MIMIC III Database</h2><p>After installation refers to <a href="https://www.postgresql.org/download">PostgreSQL download</a>, then create a database role “mimicuser” to access the data</p><pre><code class="hljs bash">sudo -u postgres -icreateuser -P -s -e -d mimicuser</code></pre><p>Connect to the database with psql</p><pre><code class="hljs bash">psql -U postgres -d postgres</code></pre><p>Create an empty database containing a MIMIC-III schema whose database role is “mimicuser”</p><pre><code class="hljs sql">=<span class="hljs-comment"># CREATE DATABASE mimic OWNER mimicuser;</span></code></pre><p>Create a schema to hold the data</p><pre><code class="hljs sql">=<span class="hljs-comment"># \c mimic;</span>=<span class="hljs-comment"># CREATE SCHEMA mimiciii;</span>=<span class="hljs-comment"># set search_path to mimiciii;</span></code></pre><p>Note that after doing this, you have to type ‘set search_path to mimiciii;’ everytime you wanna connect to the database.</p><p>Set the password for ‘postgres’ and ‘mimicuser’</p><pre><code class="hljs sql">\password postgres\password mimicuser</code></pre><p>Enter a password, to avoid memorization issues here I use ‘password’ as the password.<br>To allow password identification, we have to change the’hab_file’, use following command to get the file path:</p><pre><code class="hljs sql">=<span class="hljs-comment"># show hba_file;</span>=<span class="hljs-comment"># show config_file;</span></code></pre><p>In my system the path is /etc/postgresql/9.6/main/pg_hba.conf</p><pre><code class="hljs bash">vim /etc/postgresql/9.6/main/pg_hba.conf</code></pre><p>Change the local all all from peer to md5 to allow password identification for ‘mimicuser’.</p><pre><code class="hljs bash">Database administrative login by Unix domain socket<span class="hljs-built_in">local</span>   all             postgres                                peerTYPE  DATABASE        USER            ADDRESS                 METHOD<span class="hljs-string">&quot;local&quot;</span> is <span class="hljs-keyword">for</span> Unix domain socket connections only<span class="hljs-built_in">local</span>   all             all                          <span class="hljs-string">&quot;peer&quot;</span> to <span class="hljs-string">&quot;md5&quot;</span>IPv4 <span class="hljs-built_in">local</span> connections:host    all             all             127.0.0.1/32            md5IPv6 <span class="hljs-built_in">local</span> connections:host    all             all             ::1/128                 md5</code></pre><p>Restart PostgreSQL</p><pre><code class="hljs bash">sudo service postgresql restart</code></pre><p>After restart of the postgresql service, now I can use ‘mimicuser’ and its password to access the database.</p><pre><code class="hljs bash">psql -U mimicuser -d mimic</code></pre><p>Create a set of empty tables on a mimiciii schema, ready to populate with the data</p><pre><code class="hljs bash">psql <span class="hljs-string">&#x27;dbname=mimic user=mimicuser options=--search_path=mimiciii&#x27;</span> -f postgres_create_tables.sql</code></pre><p>Import the CSV data files into the empty tables</p><pre><code class="hljs bash">psql <span class="hljs-string">&#x27;dbname=mimic user=mimicuser options=--search_path=mimiciii&#x27;</span> -f postgres_load_data.sql -v mimic_data_dir=<span class="hljs-string">&#x27;&lt;path_to_data&gt;&#x27;</span></code></pre><p>Indexes provide additional structure for the database that can help to improve the speed of queries. The MIMIC code repository includes a script with a set of suggested indexes. As before, you can run this script from the command line to add indexes to improve performance</p><pre><code class="hljs bash">psql <span class="hljs-string">&#x27;dbname=mimic user=mimicuser options=--search_path=mimiciii&#x27;</span> -f postgres_add_indexes.sql</code></pre><p>Run checks, We have included a script which verifies all rows have been loaded in. Run those checks now</p><pre><code class="hljs bash">psql <span class="hljs-string">&#x27;dbname=mimic user=mimicuser options=--search_path=mimiciii&#x27;</span> -f postgres_checks.sql</code></pre><p>MIMIC-III is ready for analysis</p><p>You should now have a working copy of MIMIC-III ready to query with the psql command line tool. First start the PSQL client from the command line:</p><pre><code class="hljs bash">psql <span class="hljs-string">&#x27;dbname=mimic user=mimicuser options=--search_path=mimiciii&#x27;</span></code></pre><p>Before going further, you should grant all privileges needed to the mimic user, then revoke the superuser privilege:</p><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">schema</span> mimiciii <span class="hljs-keyword">to</span> mimicuser;<span class="hljs-keyword">grant</span> <span class="hljs-keyword">usage</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">schema</span> mimiciii <span class="hljs-keyword">to</span> mimicuser;<span class="hljs-keyword">grant</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">database</span> mimic <span class="hljs-keyword">to</span> mimicuser;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> mimicuser nosuperuser;</code></pre><p>Now try, for example, counting the number of patients in the database:</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(subject_id)<span class="hljs-keyword">from</span> mimiciii.patients;</code></pre><p>string above (–search_path=mimiciii), we can omit it in the query:</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(subject_id)<span class="hljs-keyword">from</span> patients;</code></pre><p>Install a graphical user interface</p><p><a href="https://www.pgadmin.org/">pgAdmin</a><br><a href="https://www.navicat.com/">Navicat</a><br><a href="https://www.jetbrains.com/datagrip/">DataGrip</a></p>]]></content>
    
    
    <categories>
      
      <category>Databases</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
      <tag>MIMICIII</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 16.04 LTS &amp; Windows 10 dual boot time zone difference</title>
    <link href="/2016/12/09/Ubuntu-16-04-LTS-Windows-10-dual-boot-time-zone-difference/"/>
    <url>/2016/12/09/Ubuntu-16-04-LTS-Windows-10-dual-boot-time-zone-difference/</url>
    
    <content type="html"><![CDATA[<p>For users who dual boot Ubuntu 16.04 and Windows, you may find the clock time is off that causes time differences after you reboot and switch between the two systems. Here’s how to fix it.</p><p>Ubuntu maintains the hardware clock (RTC, real time clock) in universal time (UTC) by default while Windows maintains the clock in local time, thus causing time conflicts between Ubuntu and Windows.</p><p>To fix it, either set Ubuntu to maintain RTC in local time or make Windows uses UTC.</p><ol><li>Disable UTC and use Local Time in Ubuntu:</li></ol><p>In previous Ubuntu editions, you can edit the config file /etc/default/rcS to disable UTC.</p><p>In Ubuntu 16.04, open terminal (Ctrl+Alt+T) and run the command below instead:</p><pre><code class="hljs bash">timedatectl <span class="hljs-built_in">set</span>-local-rtc 1 --adjust-system-clock</code></pre><p>To check out if your system uses Local time, just run:</p><pre><code class="hljs bash">timedatectl</code></pre><p>Finally restart and switch to Windows, adjust system clock time if need and done.</p><ol start="2"><li>Make MicroSoft Windows uses UTC:</li></ol><p>Another way to fix this issue is doing the following changes in Windows, Windows 10, in the case below:</p><ul><li>First if you’ve switched to local time in Ubuntu, run command in Ubuntu terminal to use back UTC:</li></ul><pre><code class="hljs bash">timedatectl <span class="hljs-built_in">set</span>-local-rtc 0</code></pre><ul><li>Restart and select boot into Windows 10, when you’re in, do:</li></ul><p>go to Start Menu, search for and launch cmd as Administrator.<br>When the command console opens, paste below command to create a DWORD value to the registry:</p><blockquote><p>Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1</p></blockquote><p>For 64-bit Windows, use a QWORD value instead:</p><blockquote><p>Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_QWORD /d 1</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modify crash report in Ubuntu 16.04 LTS</title>
    <link href="/2016/11/12/Modify-crash-report-in-Ubuntu-16-04-LTS/"/>
    <url>/2016/11/12/Modify-crash-report-in-Ubuntu-16-04-LTS/</url>
    
    <content type="html"><![CDATA[<p>Sometimes the Ubuntu crash reports are annoying, so we can disable it by the following simple procedure:</p><pre><code class="hljs bash">sudo rm /var/crash/*sudo vim /etc/default/apport</code></pre><p>And set “enabled=0”</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fix Chinese input problems in Ubuntu 16.04 LTS</title>
    <link href="/2016/10/29/Fix-Chinese-input-problems-in-Ubuntu-16-04-LTS/"/>
    <url>/2016/10/29/Fix-Chinese-input-problems-in-Ubuntu-16-04-LTS/</url>
    
    <content type="html"><![CDATA[<p>The Chinese input is unabled by default in Ubuntu 16.04 LTS, type the following commands to install fcitx:</p><pre><code class="hljs bash">sudo apt install fcitx fcitx-googlepinyin fcitx-table-wbpy fcitx-pinyin fcitx-sunpinyin</code></pre><ul><li>System Setting – Language Support – Keyboard input method system – fcitx</li><li>Restart your system</li><li>Fcitx – Configure – deselect the show current language search “Google Pinyin”, you are all set! Press Ctrl + Space to toggle between Chinese and English.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Change GRUB boot order for Ubuntu 16.04 LTS and Windows 10 dual boot</title>
    <link href="/2016/09/21/Change-GRUB-boot-order-for-Ubuntu-16-04-LTS-and-Windows-10-dual-boot/"/>
    <url>/2016/09/21/Change-GRUB-boot-order-for-Ubuntu-16-04-LTS-and-Windows-10-dual-boot/</url>
    
    <content type="html"><![CDATA[<p>GRUB Customizer is an easy, GUI way to change the GRUB boot order, without having to edit system files manually.</p><p>To install it, we first need to add the repository:</p><pre><code class="hljs bash">sudo add-apt-repository ppa:danielrichter2007/grub-customizer -ysudo apt-get update &amp;&amp; sudo apt-get install grub-customizer -y</code></pre><p>At the end of the installation, we start GRUB customizer with:</p><pre><code class="hljs bash">sudo grub-customizer</code></pre><p>Then modify the boot order manually.</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Realtek RTL8723BE wireless card lose connection problem on Ubuntu 16.04 LTS</title>
    <link href="/2016/09/13/Realtek-RTL8723BE-lose-connection-problems-on-Ubuntu-16-04-LTS/"/>
    <url>/2016/09/13/Realtek-RTL8723BE-lose-connection-problems-on-Ubuntu-16-04-LTS/</url>
    
    <content type="html"><![CDATA[<p>I was having these problem with rtl8723be on ubuntu 16.04.</p><p>I had to install new module for realtek wifi cards where they solved the constant disconnects:</p><p>install required packages</p><pre><code class="hljs bash">sudo apt-get install build-essential gitgit <span class="hljs-built_in">clone</span> new realtek wifi modulesgit <span class="hljs-built_in">clone</span> https://github.com/lwfinger/rtlwifi_new/enter the directory<span class="hljs-built_in">cd</span> rtlwifi_newbuild itmakeinstallsudo make install</code></pre><p>Now you can reboot or unload/load modules</p><p>unload modules</p><pre><code class="hljs bash">sudo modprobe -r rtl8723be</code></pre><p>load new module</p><pre><code class="hljs bash">sudo modprobe rtl8723be</code></pre><p>if it still doesn’t work, try the solution from this post</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;options rtl8723be fwlps=0&quot;</span> | sudo tee /etc/modprobe.d/rtl8723be.conf</code></pre><p>Note: After each kernel update, you need to rebuild the modules. That is,</p><p>After every kernel update:</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> rtlwifi_new</code></pre><p>Clean previous builds</p><pre><code class="hljs bash">make clean</code></pre><p>Update git repository</p><pre><code class="hljs bash">git pull</code></pre><p>Compile</p><pre><code class="hljs bash">make clean &amp;&amp; make</code></pre><p>Install</p><pre><code class="hljs bash">sudo make install</code></pre><p>reboot or unload/load modules</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Wireless card</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dropbox for Ubuntu server 16.04</title>
    <link href="/2016/07/31/Dropbox-for-Ubuntu-server-16-04/"/>
    <url>/2016/07/31/Dropbox-for-Ubuntu-server-16-04/</url>
    
    <content type="html"><![CDATA[<p>First, SSH into your Ubuntu Server. Then download Dropbox using the following command. It will be saved as dropbox-linux.tar.gz.</p><pre><code class="hljs bash">wget https://www.dropbox.com/download?plat=lnx.x86_64 -O dropbox-linux.tar.gz</code></pre><p>Create a directory in /opt and extract Dropbox to /opt/dropbox/.</p><pre><code class="hljs bash">sudo mkdir /opt/dropbox/sudo tar xvf dropbox-linux.tar.gz --strip 1 -C /opt/dropbox</code></pre><p>Now you can run the Dropbox daemon.</p><pre><code class="hljs bash">/opt/dropbox/dropboxd</code></pre><p>It will ask you to visit a web address in order to link your Ubuntu server with your Dropbox account.</p><p>Once the link is complete, return to the terminal window and press Ctrl+C to temporarily stop Dropbox daemon because it by default runs in the foreground and you can’t run other commands. The Dropbox sync folder appears in your home directory.</p><p>To make Dropbox start at system boot time, we can create a systemd service unit.</p><pre><code class="hljs bash">sudo vim /etc/systemd/system/dropbox.service</code></pre><p>Put the following lines into the file. We want Dropbox to run as a standard user instead of root, so replace username with your real username. If it runs as root user, then files in ~/Dropbox will not sync properly.</p><pre><code class="hljs bash">[Unit]Description=Dropbox DaemonAfter=network.target[Service]Type=simpleUser=usernameExecStart=/opt/dropbox/dropboxdExecStop=/bin/<span class="hljs-built_in">kill</span> -HUP <span class="hljs-variable">$MAINPID</span>Restart=always[Install]WantedBy=multi-user.target</code></pre><p>Save and close the file. Then we can start this service by running:</p><pre><code class="hljs bash">sudo systemctl start dropbox</code></pre><p>And enable auto-start at system boot time.</p><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> dropbox</code></pre><p>Check its status.</p><pre><code class="hljs bash">systemctl status dropbox</code></pre><p>You can stop it with:</p><pre><code class="hljs bash">sudo systemctl stop dropbox</code></pre><p>Restart it with:</p><pre><code class="hljs bash">sudo systemctl restart dropbox</code></pre><p>Now you can restart your Ubuntu server and check if auto-start is working.</p><pre><code class="hljs bash">sudo shutdown -r now</code></pre><p>Get the dropbox.py script and put it to the PATH</p><pre><code class="hljs bash">https://www.dropbox.com/download?dl=packages/dropbox.py</code></pre><p>Run</p><pre><code class="hljs bash">dropbox.py exclude add the_folder_name_you_want_exclude</code></pre>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Setup PostgreSQL with Django on Ubuntu 16.04 LTS</title>
    <link href="/2016/07/21/Setup-PostgreSQL-with-Django-on-Ubuntu-16-04-LTS/"/>
    <url>/2016/07/21/Setup-PostgreSQL-with-Django-on-Ubuntu-16-04-LTS/</url>
    
    <content type="html"><![CDATA[<h2 id="Install-the-PostgreSQL"><a href="#Install-the-PostgreSQL" class="headerlink" title="Install the PostgreSQL"></a>Install the PostgreSQL</h2><p>The Ubuntu’s package repositories have the PostgreSQL packages, to install it:</p><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install postgresql postgresql-contrib -y</code></pre><p>Then you are able to check the status of the PostgreSQL service:</p><pre><code class="hljs bash">sudo service postgresql status</code></pre><p>And return something like this:</p><pre><code class="hljs bash">● postgresql.service - PostgreSQL RDBMS   Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor prese   Active: active (exited) since Wed 2016-07-20 20:35:43 UTC; 1min 24s ago Main PID: 19535 (code=exited, status=0/SUCCESS)   CGroup: /system.slice/postgresql.serviceJuly 20 20:35:43 ip-172-31-18-239 systemd[1]: Starting PostgreSQL RDBMS...July 20 20:35:43 ip-172-31-18-239 systemd[1]: Started PostgreSQL RDBMS.July 20 20:35:48 ip-172-31-18-239 systemd[1]: Started PostgreSQL RDBMS.</code></pre><h2 id="Access-the-database"><a href="#Access-the-database" class="headerlink" title="Access the database"></a>Access the database</h2><p>By default, Postgres uses a concept called “roles” to handle in authentication and authorization.</p><p>Upon installation Postgres is set up to use ident authentication, which means that it associates Postgres roles with a matching Linux system account. If a role exists within Postgres, a Linux username with the same name will be able to sign in as that role.</p><p>So there are several ways to sign in:</p><ul><li>Switch to the postgres account created by the Postgres installaton procedure</li><li>Access this postgres account with <code>sudo</code></li><li>Create a new role</li></ul><h3 id="Switch-to-postgres-account"><a href="#Switch-to-postgres-account" class="headerlink" title="Switch to postgres account"></a>Switch to postgres account</h3><p>Switch to the postgres user using:</p><pre><code class="hljs bash">sudo su - postgres</code></pre><p>Or using:</p><pre><code class="hljs bash">sudo -i -u postgres</code></pre><p>Then access a Postgres prompt:</p><pre><code class="hljs bash">psql</code></pre><p>Type following to exit the Postgres prompt:</p><pre><code class="hljs postgres">\q</code></pre><p>And exit the account:</p><pre><code class="hljs bash"><span class="hljs-built_in">exit</span></code></pre><h3 id="Access-this-postgres-account-without-switch-to-it"><a href="#Access-this-postgres-account-without-switch-to-it" class="headerlink" title="Access this postgres account without switch to it"></a>Access this postgres account without switch to it</h3><p>You can use <code>sudo -u UserA CommandA</code> to execute the <code>CommandA</code> as <code>UserA</code>, for example:</p><pre><code class="hljs bash">sudo whoami&gt;<span class="hljs-string">&quot;Your current user name&quot;</span>sudo -u postgres whoami&gt;postgres</code></pre><p>So type:</p><pre><code class="hljs bash">sudo -u postgres psql</code></pre><p>You will directly log into Postgres prompt.</p><h3 id="Create-a-new-role-to-manage-your-database"><a href="#Create-a-new-role-to-manage-your-database" class="headerlink" title="Create a new role to manage your database"></a>Create a new role to manage your database</h3><h4 id="Create-a-new-role"><a href="#Create-a-new-role" class="headerlink" title="Create a new role"></a>Create a new role</h4><p>By default installation, we only have a <code>postgres</code> role to regulate the database.</p><p>We can create new roles from the command line with the <code>createrole</code> command. The <code>--interactive</code> flag will prompt you for the necessary values.</p><p>You can logged in as the postgres account, then typing:</p><pre><code class="hljs bash">createuser --interactive</code></pre><p>Or you can also type <code>sudo -u postgres</code> without switch to <code>postgres</code> like we said before:</p><pre><code class="hljs bash">sudo -u postgres createuser --interactive</code></pre><p>Both will show something like the following:</p><pre><code class="hljs bash">Enter name of role to add: rogueShall the new role be a superuser? (y/n) y</code></pre><h4 id="Create-a-New-Database"><a href="#Create-a-New-Database" class="headerlink" title="Create a New Database"></a>Create a New Database</h4><p>The Postgres authentication system makes is that there will be an database with the same name as the role being used to login, which the role has access to.</p><p>So if in the last section, we created a user called <code>rogue</code>, that role will attempt to connect to a database which is also called <code>rogue</code> by default. You can create the appropriate database with the createdb command.</p><p>If you are logged in as the postgres account, you would type something like:</p><pre><code class="hljs bash">createdb rogue</code></pre><p>Or use <code>sudo</code> from none postgres account:</p><pre><code class="hljs bash">sudo -u postgres createdb rogue</code></pre><h4 id="Enter-a-Postgres-prompt-with-the-New-Role"><a href="#Enter-a-Postgres-prompt-with-the-New-Role" class="headerlink" title="Enter a Postgres prompt with the New Role"></a>Enter a Postgres prompt with the New Role</h4><p>If you want to enter the Postgres prompt with the new role just created and type in:</p><pre><code class="hljs bash">sudo -u rogue psql</code></pre><p>You will find a error:</p><pre><code class="hljs bash">sudo: unknown user: roguesudo: unable to initialize policy plugin</code></pre><p>That is because to log in with ident based authentication, you’ll need a Linux user with the same name as your Postgres role and database.</p><p>If you don’t have a matching Linux user available, you can create one with the adduser command. You will have to do this from an account with sudo privileges (not logged in as the postgres user):</p><pre><code class="hljs bash">sudo adduser rogue</code></pre><p>Once you have the appropriate account available, you can either switch over and connect to the database by typing:</p><pre><code class="hljs bash">sudo -i -u roguepsql</code></pre><p>Or, you can do this inline:</p><pre><code class="hljs bash">sudo -u rogue psql</code></pre><p>You will be logged in automatically assuming that all of the components have been properly configured.</p><p>If you want your user to connect to a different database, you can do so by specifying the database like this:</p><pre><code class="hljs bash">psql -d postgres</code></pre><p>Once logged in, you can get check your current connection information by typing:</p><pre><code class="hljs postgresql">rogue=# \conninfo</code></pre><p>Output</p><pre><code class="hljs postgresql">You are connected <span class="hljs-keyword">to</span> <span class="hljs-keyword">database</span> &quot;rogue&quot; <span class="hljs-keyword">as</span> <span class="hljs-keyword">user</span> &quot;rogue&quot; via socket <span class="hljs-keyword">in</span> &quot;/var/run/postgresql&quot; at port &quot;5432&quot;.</code></pre><p>This can be useful if you are connecting to non-default databases or with non-default users.</p><h2 id="Integreting-with-Django"><a href="#Integreting-with-Django" class="headerlink" title="Integreting with Django"></a>Integreting with Django</h2><p>After entering the postgres prompt, create a database for Django project:</p><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> myproject;</code></pre><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> myprojectuser <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-string">&#x27;password&#x27;</span>;</code></pre><p>Set encoding to UTF-8:</p><pre><code class="hljs postgresql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">ROLE</span> myprojectuser <span class="hljs-keyword">SET</span> client_encoding <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;utf8&#x27;</span>;</code></pre><p>Give the database user access to database:</p><pre><code class="hljs postgresql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DATABASE</span> myproject <span class="hljs-keyword">TO</span> myprojectuser;</code></pre><p>Go back to Django virtual envrionment and install psycopg2</p><pre><code class="hljs bash">pip install django psycopg2</code></pre>]]></content>
    
    
    <categories>
      
      <category>Databases</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>PostgreSQL</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Initial Server Setup for Ubuntu 16.04</title>
    <link href="/2016/05/12/Initial-Server-Setup-for-Ubuntu-16-04/"/>
    <url>/2016/05/12/Initial-Server-Setup-for-Ubuntu-16-04/</url>
    
    <content type="html"><![CDATA[<p>When you first create a new Ubuntu 16.04 server, there are a few configuration steps that you should take early on as part of the basic setup. This will increase the security and usability of your server and will give you a solid foundation for subsequent actions.</p><h2 id="Step-One-—-Root-Login"><a href="#Step-One-—-Root-Login" class="headerlink" title="Step One — Root Login"></a>Step One — Root Login</h2><p>The root user is the administrative user in a Linux environment that has very broad privileges. Because of the heightened privileges of the root account, you are actually discouraged from using it on a regular basis. This is because part of the power inherent with the root account is the ability to make very destructive changes, even by accident.</p><pre><code class="hljs bash">ssh root@your_server_ip</code></pre><h2 id="Step-Two-—-Create-a-New-User"><a href="#Step-Two-—-Create-a-New-User" class="headerlink" title="Step Two — Create a New User"></a>Step Two — Create a New User</h2><p>Once you are logged in as root, we’re prepared to add the new user account that we will use to log in from now on.</p><p>This example creates a new user called “ubuntu”, but you should replace it with a username that you like:</p><pre><code class="hljs bash">adduser ubuntu</code></pre><h2 id="Step-Three-—-Root-Privileges"><a href="#Step-Three-—-Root-Privileges" class="headerlink" title="Step Three — Root Privileges"></a>Step Three — Root Privileges</h2><p>ow, we have a new user account with regular account privileges. However, we may sometimes need to do administrative tasks.</p><p>To avoid having to log out of our normal user and log back in as the root account, we can set up what is known as “superuser” or root privileges for our normal account. This will allow our normal user to run commands with administrative privileges by putting the word sudo before each command.</p><p>To add these privileges to our new user, we need to add the new user to the “sudo” group. By default, on Ubuntu 16.04, users who belong to the “sudo” group are allowed to use the sudo command.</p><p>As root, run this command to add your new user to the sudo group (substitute the highlighted word with your new user):</p><pre><code class="hljs bash">usermod -aG sudo sammy</code></pre><h2 id="Step-Four-—-Add-Public-Key-Authentication-Recommended"><a href="#Step-Four-—-Add-Public-Key-Authentication-Recommended" class="headerlink" title="Step Four — Add Public Key Authentication (Recommended)"></a>Step Four — Add Public Key Authentication (Recommended)</h2><p>The next step in securing your server is to set up public key authentication for your new user. Setting this up will increase the security of your server by requiring a private SSH key to log in.</p><h3 id="Generate-a-Key-Pair"><a href="#Generate-a-Key-Pair" class="headerlink" title="Generate a Key Pair"></a>Generate a Key Pair</h3><p>If you do not already have an SSH key pair, which consists of a public and private key, you need to generate one. If you already have a key that you want to use, skip to the Copy the Public Key step.</p><p>To generate a new key pair, enter the following command at the terminal of your local machine (ie. your computer):</p><pre><code class="hljs bash">ssh-keygen</code></pre><p>Assuming your local user is called “localuser”, you will see output that looks like the following:</p><pre><code class="hljs bash">ssh-keygen outputGenerating public/private rsa key pair.Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/Users/localuser/.ssh/id_rsa):</code></pre><p>Hit return to accept this file name and path (or enter a new name).</p><p>Next, you will be prompted for a passphrase to secure the key with. You may either enter a passphrase or leave the passphrase blank.</p><p>This generates a private key, id_rsa, and a public key, id_rsa.pub, in the .ssh directory of the localuser’s home directory. Remember that the private key should not be shared with anyone who should not have access to your servers!</p><h3 id="Copy-the-Public-Key"><a href="#Copy-the-Public-Key" class="headerlink" title="Copy the Public Key"></a>Copy the Public Key</h3><p>After generating an SSH key pair, you will want to copy your public key to your new server. We will cover two easy ways to do this.</p><p>If your local machine has the ssh-copy-id script installed, you can use it to install your public key to any user that you have login credentials for.</p><p>Run the ssh-copy-id script by specifying the user and IP address of the server that you want to install the key on, like this:</p><pre><code class="hljs bash">ssh-copy-id ubuntu@your_server_ip</code></pre><h2 id="Step-Five-—-Disable-Password-Authentication-Recommended"><a href="#Step-Five-—-Disable-Password-Authentication-Recommended" class="headerlink" title="Step Five — Disable Password Authentication (Recommended)"></a>Step Five — Disable Password Authentication (Recommended)</h2><p>Now that your new user can use SSH keys to log in, you can increase your server’s security by disabling password-only authentication. Doing so will restrict SSH access to your server to public key authentication only. That is, the only way to log in to your server (aside from the console) is to possess the private key that pairs with the public key that was installed.</p><p>To disable password authentication on your server, follow these steps.</p><p>As root or your new sudo user, open the SSH daemon configuration:</p><pre><code class="hljs bash">sudo nano /etc/ssh/sshd_config</code></pre><p>Find the line that specifies PasswordAuthentication, uncomment it by deleting the preceding #, then change its value to “no”. It should look like this after you have made the change:</p><pre><code class="hljs bash">PasswordAuthentication no</code></pre>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
      <tag>Server</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to JavaScript</title>
    <link href="/2016/01/21/Introduction-to-JavaScript/"/>
    <url>/2016/01/21/Introduction-to-JavaScript/</url>
    
    <content type="html"><![CDATA[<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>console.log is used to display content to the JavaScript console. Run the following code in the console:</p><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello, world!&quot;</span>);</code></pre><p>Let’s use console.log to do something a little more interesting. Here’s a block of JavaScript code that loops through the numbers 0 through 9 and prints them out to the console:</p><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <span class="hljs-built_in">console</span>.log(i);&#125;</code></pre><h2 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h2><h3 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h3><p>7</p><h3 id="Arithmetic-operations"><a href="#Arithmetic-operations" class="headerlink" title="Arithmetic operations"></a>Arithmetic operations</h3><p>3 + 2.1</p><h3 id="Comparing-numbers"><a href="#Comparing-numbers" class="headerlink" title="Comparing numbers"></a>Comparing numbers</h3><p>&lt; &gt; &lt;= &gt;= == !=</p><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><pre><code class="hljs javascript"><span class="hljs-comment">// this is a single-line comment</span><span class="hljs-comment">/*</span><span class="hljs-comment">this is</span><span class="hljs-comment">a multi-line</span><span class="hljs-comment">comment</span><span class="hljs-comment">*/</span></code></pre><h3 id="Programming-Quiz"><a href="#Programming-Quiz" class="headerlink" title="Programming Quiz"></a>Programming Quiz</h3><p>Write an expression that uses at least 3 different arithmetic operators.<br>The expression should equal 42.<br>Hint: +, -, *, /, and % are possible arithmetic operators</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: First Expression</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Write an expression that uses at least three, different, arithmetic operators</span><span class="hljs-comment"> * to log the number 42 to the console.</span><span class="hljs-comment"> */</span><span class="hljs-comment">// this expression equals 4, change it to equal 42</span><span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span> - <span class="hljs-number">5</span> + <span class="hljs-number">3</span> - <span class="hljs-number">1</span>);</code></pre><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><pre><code class="hljs javascript"><span class="hljs-string">&quot;hello&quot;</span><span class="hljs-string">&#x27;world&#x27;</span></code></pre><p>It is correct to either use double “ or single ‘ quotes with strings, as long as you’re consistent.</p><h3 id="String-concatenation"><a href="#String-concatenation" class="headerlink" title="String concatenation"></a>String concatenation</h3><pre><code class="hljs javascript"><span class="hljs-string">&quot;Hello,&quot;</span> + <span class="hljs-string">&quot; New York City&quot;</span></code></pre><ol><li><p>What’s the result with “hello” + “world”?</p></li><li><p>What do you think will happen when you type “Hello + 5*10” into the JavaScript console?</p></li><li><p>What do you think will happen when you type “Hello” + 5*10 into the console?</p></li></ol><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>Variable is a place to storage data and use it later:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> greeting = <span class="hljs-string">&quot;Hello&quot;</span>;</code></pre><h3 id="Naming-conventions"><a href="#Naming-conventions" class="headerlink" title="Naming conventions"></a>Naming conventions</h3><p>When you create a variable, you write the name of the variable using camelCase (the first word is lowercase, and all following words are uppercase). Also try to use a variable name that accurately, but succinctly describes what the data is about.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> totalAfterTax = <span class="hljs-number">53.03</span>; <span class="hljs-comment">// uses camelCase if the variable name is multiple words</span><span class="hljs-keyword">var</span> tip = <span class="hljs-number">8</span>; <span class="hljs-comment">// uses lowercase if the variable name is one word</span></code></pre><h3 id="Programming-quiz"><a href="#Programming-quiz" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>To convert Celsius to Fahrenheit, you can use the following formula:<br>F=C×1.8+32</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Converting Tempatures</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Use the Celsius-to-Fahrenheit formula to set the fahrenheit varible:</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *     F = C x 1.8 + 32</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Log the fahrenheit variable to the console.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> celsius = <span class="hljs-number">12</span>;<span class="hljs-keyword">var</span> fahrenheit = celsius * <span class="hljs-number">1.8</span> + <span class="hljs-number">32</span> <span class="hljs-comment">/* convert celsius to fahrenheit here */</span><span class="hljs-built_in">console</span>.log(fahrenheit)</code></pre><h3 id="String-index"><a href="#String-index" class="headerlink" title="String index"></a>String index</h3><pre><code class="hljs javascript"><span class="hljs-string">&quot;Steve Jobs&quot;</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Steve Jobs&quot;</span>;name[<span class="hljs-number">0</span>]<span class="hljs-keyword">var</span> quote = <span class="hljs-string">&quot;Stay hungery. Stay foolish.&quot;</span>;<span class="hljs-built_in">console</span>.log(quote[<span class="hljs-number">6</span>]);</code></pre><h3 id="Escaping-Strings"><a href="#Escaping-Strings" class="headerlink" title="Escaping Strings"></a>Escaping Strings</h3><pre><code class="hljs javascript"><span class="hljs-comment">// Wrong</span><span class="hljs-string">&quot;The man whispered, &quot;</span>please speak to me.<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">// Right</span><span class="hljs-string">&quot;The man whispered, \&quot;please speak to me.\&quot;&quot;</span></code></pre><h3 id="Comparing-strings"><a href="#Comparing-strings" class="headerlink" title="Comparing strings"></a>Comparing strings</h3><pre><code class="hljs javascript"><span class="hljs-string">&quot;Yes&quot;</span> == <span class="hljs-string">&quot;yes&quot;</span><span class="hljs-string">&#x27;Y&#x27;</span> != <span class="hljs-string">&#x27;y&#x27;</span></code></pre><h3 id="Programming-quiz-1"><a href="#Programming-quiz-1" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>Create a string with the name of your favorite food. The first letter of the string should be capitalized.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Favorite Food</span><span class="hljs-comment"> */</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Peking Roast Duck&quot;</span>);</code></pre><p>Fix the right side expression so it evaluates to true.</p><pre><code class="hljs javascript"><span class="hljs-string">&quot;ALL Strings are CrEaTeD equal&quot;</span> == <span class="hljs-string">&quot;All STRINGS are CrEaTED Equal&quot;</span></code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: String Equality for All</span><span class="hljs-comment"> */</span><span class="hljs-comment">// fix the right side of the expression</span><span class="hljs-keyword">var</span> answer = <span class="hljs-string">&quot;ALL Strings are CrEaTeD equal&quot;</span> == <span class="hljs-string">&quot;ALL Strings are CrEaTeD equal&quot;</span>;<span class="hljs-built_in">console</span>.log(answer);</code></pre><p>Build a single string that resembles the following joke.</p><pre><code class="hljs ada">Why couldn<span class="hljs-symbol">&#x27;t</span> the shoes go <span class="hljs-keyword">out</span> <span class="hljs-keyword">and</span> play?They were <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;tied&quot;</span> up!</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: All Tied Up</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> joke = <span class="hljs-string">&quot;Why couldn&#x27;t the shoes go out and play?\nThey were all \&quot;tied\&quot; up!&quot;</span>;<span class="hljs-built_in">console</span>.log(joke);</code></pre><p>Build a string using concatenation by combining the lines from this famous haiku poem by Yosa Buson.</p><pre><code class="hljs livecodeserver">Blowing <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> westFallen leaves gatherIn <span class="hljs-keyword">the</span> east.</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Yosa Buson</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> haiku = <span class="hljs-string">&quot;Blowing from the west\n&quot;</span> + <span class="hljs-string">&quot;Fallen leaves gather\n&quot;</span> + <span class="hljs-string">&quot;In the east.&quot;</span>;<span class="hljs-comment">/* concatenate the strings here */</span><span class="hljs-built_in">console</span>.log(haiku);</code></pre><h3 id="Null-Undefined-and-NaN"><a href="#Null-Undefined-and-NaN" class="headerlink" title="Null, Undefined, and NaN"></a>Null, Undefined, and NaN</h3><p>Recap of number, string and boolean</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myNumber = <span class="hljs-number">7</span>; <span class="hljs-comment">// this is a number</span><span class="hljs-keyword">var</span> myString = <span class="hljs-string">&quot;Bach&quot;</span> <span class="hljs-comment">// this is a string</span><span class="hljs-keyword">var</span> myBoolean = <span class="hljs-literal">false</span> <span class="hljs-comment">// this is a boolean</span></code></pre><p>null refers to the “value of nothing”, while undefined refers to the “absence of value”.<br>NaN stands for “Not-A-Number” and it’s often returned indicating an error with number operations. For instance, if you wrote some code that performed a math calculation, and the calculation failed to produce a valid number, NaN might be returned.</p><pre><code class="hljs javascript"><span class="hljs-comment">// calculating the square root of a negative number will return NaN</span><span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-number">-10</span>)<span class="hljs-comment">// trying to divide a string by 5 will return NaN</span><span class="hljs-string">&quot;hello&quot;</span>/<span class="hljs-number">5</span></code></pre><p>What will be printed out?</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> signedIn;<span class="hljs-built_in">console</span>.log(signedIn);</code></pre><h3 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h3><p>So far, you’ve seen how you can use == and != to compare numbers and strings for equality. However, if you use == and != in situations where the data you’re comparing is mixed, it can lead to some interesting results. For example,</p><pre><code class="hljs javascript"><span class="hljs-string">&quot;1&quot;</span> == <span class="hljs-number">1</span>Returns: <span class="hljs-literal">true</span></code></pre><p>and</p><pre><code class="hljs javascript"><span class="hljs-number">0</span> == <span class="hljs-literal">false</span>Returns: <span class="hljs-literal">true</span></code></pre><p>both evaluate to true. Why is that?</p><p>JavaScript is known as a loosely typed language.</p><p>Basically, this means that when you’re writing JavaScript code, you do not need to specify data types. Instead, when your code is interpreted by the JavaScript engine it will automatically be converted into the “appropriate” data type. This is called implicit type coercion and you’ve already seen examples like this before when you tried to concatenate strings with numbers.</p><pre><code class="hljs avrasm"><span class="hljs-string">&quot;julia&quot;</span> + <span class="hljs-number">1</span><span class="hljs-symbol">Returns:</span> <span class="hljs-string">&quot;julia1&quot;</span></code></pre><p>In this example, JavaScript takes the string “julia” and adds the number 1 to it resulting in the string “julia1”. In other programming languages, this code probably would have returned an error, but in JavaScript the number 1 is converted into the string “1” and then is concatenated to the string “julia”.</p><p>It’s behavior like this which makes JavaScript unique from other programming languages, but it can lead to some quirky behavior when doing operations and comparisons on mixed data types.</p><p>Example of strongly typed programming language code</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> count = <span class="hljs-number">1</span>;<span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;Julia&quot;</span>;<span class="hljs-built_in">double</span> num = <span class="hljs-number">1.2932</span>;<span class="hljs-built_in">float</span> price = <span class="hljs-number">2.99</span>;</code></pre><p>Equivalent code in JavaScript</p><pre><code class="hljs javascript"><span class="hljs-comment">// equivalent code in JavaScript</span><span class="hljs-keyword">var</span> count = <span class="hljs-number">1</span>; <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Julia&quot;</span>;<span class="hljs-keyword">var</span> num = <span class="hljs-number">1.2932</span>;<span class="hljs-keyword">var</span> price = <span class="hljs-number">2.99</span>;</code></pre><p>In the example below, JavaScript takes the string “1”, converts it to true, and compares it to the boolean true.</p><pre><code class="hljs yaml"><span class="hljs-string">&quot;1&quot;</span> <span class="hljs-string">==</span> <span class="hljs-literal">true</span><span class="hljs-attr">Returns:</span> <span class="hljs-literal">true</span></code></pre><p>When you use the == or != operators, JavaScript first converts each value to the same type (if they’re not already the same type); this is why it’s called “type coercion”! This is often not the behavior you want, and <strong>it’s actually considered bad practice to use the == and != operators when comparing values for equality.</strong></p><h3 id="Strict-equality"><a href="#Strict-equality" class="headerlink" title="Strict equality"></a>Strict equality</h3><p>Instead, in JavaScript it’s better to use strict equality to see if numbers, strings, or booleans, etc. are identical in type and value without doing the type conversion first. To perform a strict comparison, simply add an additional equals sign = to the end of the == and != operators.</p><pre><code class="hljs javascript"><span class="hljs-string">&quot;1&quot;</span> === <span class="hljs-number">1</span>Returns: <span class="hljs-literal">false</span></code></pre><p>This returns false because the string “1” is not the same type and value as the number 1.</p><pre><code class="hljs javascript"><span class="hljs-number">0</span> === <span class="hljs-literal">false</span>Returns: <span class="hljs-literal">false</span></code></pre><p>This returns false because the number 0 is not the same type and value as the boolean false.</p><h3 id="Programming-quiz-2"><a href="#Programming-quiz-2" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>Define two variables called thingOne and thingTwo and assign them values. Print the values of both variables in one console.log statement using concatenation. For example,</p><pre><code class="hljs javascript">red blue</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Semicolons! (2-8)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> thingOne = <span class="hljs-string">&quot;red&quot;</span>;<span class="hljs-keyword">var</span> thingTwo = <span class="hljs-string">&quot;blue&quot;</span>;<span class="hljs-built_in">console</span>.log(thingOne + <span class="hljs-string">&quot; &quot;</span> + thingTwo);</code></pre><p>Create a variable called fullName and assign it your full name as a string.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: What&#x27;s my Name? (2-9)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> fullName = <span class="hljs-string">&quot;Harry Potter&quot;</span>;</code></pre><p>Create a variable called bill and assign it the result of 10.25 + 3.99 + 7.15 (don’t perform the calculation yourself, let JavaScript do it!). Next, create a variable called tip and assign it the result of multiplying bill by a 15% tip rate. Finally, add the bill and tip together and store it into a variable called total.</p><p>Print the total to the JavaScript console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Out to Dinner (2-10)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> bill = <span class="hljs-number">10.25</span> + <span class="hljs-number">3.99</span> + <span class="hljs-number">7.15</span>;<span class="hljs-keyword">var</span> tip = bill * <span class="hljs-number">0.15</span>;<span class="hljs-keyword">var</span> total = bill + tip;<span class="hljs-built_in">console</span>.log(total);</code></pre><p>Mad Libs is a word game where players have fun substituting words for blanks in a story. For this exercise, use the adjective variables below to fill in the blanks and complete the following message.</p><pre><code class="hljs javascript"><span class="hljs-string">&quot;The Intro to JavaScript course is __________. James and Julia are so __________. I cannot wait to work through the rest of this __________ content!&quot;</span><span class="hljs-keyword">var</span> adjective1 = <span class="hljs-string">&quot;amazing&quot;</span>;<span class="hljs-keyword">var</span> adjective2 = <span class="hljs-string">&quot;fun&quot;</span>;<span class="hljs-keyword">var</span> adjective3 = <span class="hljs-string">&quot;entertaining&quot;</span>;</code></pre><p>Assign the resulting string to a variable called madLib.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: MadLibs</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * 1. Declare a madLib variable</span><span class="hljs-comment"> * 2. Use the adjective1, adjective2, and adjective3 variables to set the madLib variable to the message:</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * &#x27;The Intro to JavaScript course is amazing. James and Julia are so fun. I cannot wait to work through the rest of this entertaining content!&#x27;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> adjective1 = <span class="hljs-string">&#x27;amazing&#x27;</span>;<span class="hljs-keyword">var</span> adjective2 = <span class="hljs-string">&#x27;fun&#x27;</span>;<span class="hljs-keyword">var</span> adjective3 = <span class="hljs-string">&#x27;entertaining&#x27;</span>;<span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> madLib = <span class="hljs-string">&#x27;The Intro to JavaScript course is &#x27;</span> + adjective1 + <span class="hljs-string">&#x27;. James and Julia are so &#x27;</span> + adjective2 + <span class="hljs-string">&#x27;. I cannot wait to work through the rest of this &#x27;</span> + adjective3 + <span class="hljs-string">&#x27; content!&#x27;</span>;</code></pre><p>Here are two awesome messages:</p><pre><code class="hljs javascript"><span class="hljs-string">&quot;Hi, my name is Julia. I love cats. In my spare time, I like to play video games.&quot;</span><span class="hljs-string">&quot;Hi, my name is James. I love baseball. In my spare time, I like to read.&quot;</span></code></pre><p>Declare and assign values to three variables for each part of the sentence that changes (firstName, interest, and hobby).</p><p>Use your variables and string concatenation to create your own awesome message and store it in an awesomeMessage variable. Finally, print your awesome message to the JavaScript console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: One Awesome Message (2-12)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * 1. Create the variables:</span><span class="hljs-comment"> *     - firstName</span><span class="hljs-comment"> *     - interest</span><span class="hljs-comment"> *     - hobby</span><span class="hljs-comment"> * 2. Create a variable named awesomeMessage and, using string concatenation </span><span class="hljs-comment">      and the variables above, create an awesome message.</span><span class="hljs-comment"> * 3. Print the awesomeMessage variable to the console.</span><span class="hljs-comment"> */</span> <span class="hljs-comment">/*</span><span class="hljs-comment"> * Notes:</span><span class="hljs-comment"> * - Using the above as an example, firstName would have been assigned to</span><span class="hljs-comment"> *   &quot;Julia&quot;, interest to &quot;cats&quot;, and hobby to &quot;play video games&quot;.</span><span class="hljs-comment"> * - Be sure to include spaces and periods where necessary!</span><span class="hljs-comment"> */</span><span class="hljs-comment">// Add your code here</span><span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&quot;Julia&quot;</span>;<span class="hljs-keyword">var</span> interest = <span class="hljs-string">&quot;cats&quot;</span>;<span class="hljs-keyword">var</span> hobby = <span class="hljs-string">&quot;play video games&quot;</span>;<span class="hljs-keyword">var</span> awesomeMessage = <span class="hljs-string">&quot;Hi, my name is &quot;</span> + firstName + <span class="hljs-string">&quot;. I love &quot;</span> + interest + <span class="hljs-string">&quot;. In my spare time, I like to &quot;</span> + hobby + <span class="hljs-string">&quot;.&quot;</span>;<span class="hljs-built_in">console</span>.log(awesomeMessage);</code></pre><h3 id="If…Else-Statements"><a href="#If…Else-Statements" class="headerlink" title="If…Else Statements"></a>If…Else Statements</h3><p>If…else statements allow you to execute certain pieces of code based on a condition, or set of conditions, being met.</p><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-comment">/* this expression is true */</span>) &#123;  <span class="hljs-comment">// run this code</span>&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// run this code</span>&#125;</code></pre><p>This is extremely helpful because it allows you to choose which piece of code you want to run based on the result of an expression. For example,</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span> (a &gt; b) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a is greater than b&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a is less than or equal to b&quot;</span>);&#125;</code></pre><p>Prints: “a is less than or equal to b”</p><p>A couple of important things to notice about if…else statements.</p><p>The value inside the if statement is always converted to true or false. Depending on the value, the code inside the if statement is run or the code inside the else statement is run, but not both. The code inside the if and else statements are surrounded by curly braces {…} to separate the conditions and indicate which code should be run.</p><h3 id="Else-If-Statements"><a href="#Else-If-Statements" class="headerlink" title="Else If Statements"></a>Else If Statements</h3><p>In some situations, two conditionals aren’t enough. Consider the following situation.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> weather = <span class="hljs-string">&quot;sunny&quot;</span>;<span class="hljs-keyword">if</span> (weather === <span class="hljs-string">&quot;snow&quot;</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Bring a coat.&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weather === <span class="hljs-string">&quot;rain&quot;</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Bring a rain jacket.&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Wear what you have on.&quot;</span>);&#125;</code></pre><h3 id="Logical-AND-and-OR"><a href="#Logical-AND-and-OR" class="headerlink" title="Logical AND and OR"></a>Logical AND and OR</h3><p>&amp;&amp; (AND)</p><table><thead><tr><th>A</th><th>B</th><th>A &amp;&amp; B</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>false</td></tr><tr><td>false</td><td>true</td><td>false</td></tr><tr><td>false</td><td>false</td><td>false</td></tr></tbody></table><p>|| (OR)</p><p>A    |B    |A || B<br>—-|—|——-<br>true    |true    |true<br>true    |false    |true<br>false    |true    |true<br>false    |false    |false</p><h3 id="Programming-quiz-3"><a href="#Programming-quiz-3" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>Write an if…else statement that:</p><p>prints “even” if the number is an even number<br>prints “odd” if the number is an odd number<br>Hint: Use the % (modulo) operator to determine if a number is even or odd. The modulo operater takes two numbers and returns the remainder when the first number is divided by the second one:</p><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">12</span> % <span class="hljs-number">3</span>);<span class="hljs-built_in">console</span>.log(<span class="hljs-number">10</span> % <span class="hljs-number">4</span>);</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Even or Odd (3-2)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Write an if...else statement that prints `even` if the </span><span class="hljs-comment"> * number is even and prints `odd` if the number is odd.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Note - make sure to print only the string &quot;even&quot; or the string &quot;odd&quot;</span><span class="hljs-comment"> */</span><span class="hljs-comment">// change the value of `number` to test your if...else statement</span><span class="hljs-keyword">var</span> number = <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span> (number % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;even&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;odd&quot;</span>);&#125;</code></pre><p>Musical groups have special names based on the number of people in the group.</p><p>For example, a “quartet” is a musical group with four musicians. Barbershop quartets were a popular type of quartet in the early 1900s and featured four singers made up of a lead, tenor, baritone, and bass.</p><p>Write a series of conditional statements that:</p><ul><li>prints “not a group” if musicians is less than or equal to 0</li><li>prints “solo” if musicians is equal to 1</li><li>prints “duet” if musicians is equal to 2</li><li>prints “trio” if musicians is equal to 3</li><li>prints “quartet” if musicians is equal to 4</li><li>prints “this is a large group” if musicians is greater than 4</li></ul><p>TIP: Make sure to test your code with different values. For example,</p><ul><li>If musicians equals 3, then trio should be printed to the console.</li><li>If musicians equals 20, then this is a large group should be printed to the console.</li><li>If musicians equals -1, then not a group should be printed to the console.</li></ul><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Musical Groups (3-3)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// change the value of `musicians` to test your conditional statements</span><span class="hljs-keyword">var</span> musicians = <span class="hljs-number">1</span>;<span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">if</span> (musicians &lt;= <span class="hljs-number">0</span>)&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;not a group&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(musicians === <span class="hljs-number">1</span>)&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;solo&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(musicians === <span class="hljs-number">2</span>)&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;duet&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(musicians === <span class="hljs-number">3</span>)&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;trio&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(musicians === <span class="hljs-number">4</span>)&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;quartet&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(musicians &gt; <span class="hljs-number">4</span>)&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;this is a large group&quot;</span>);&#125;</code></pre><p>For this quiz, you’re going to help solve a fictitious murder mystery that happened here at Udacity! A murder mystery is a game typically played at parties wherein one of the partygoers is secretly, and unknowingly, playing a murderer, and the other attendees must determine who among them is the criminal. It’s a classic case of whodunnit.</p><p>Since this might be your first time playing a murder mystery, we’ve simplified things quite a bit to make it easier. Here’s what we know! In this murder mystery there are:</p><p>four rooms: the ballroom, gallery, billiards room, and dining room,<br>four weapons: poison, a trophy, a pool stick, and a knife,<br>and four suspects: Mr. Parkes, Ms. Van Cleve, Mrs. Sparr, and Mr. Kalehoff.</p><p>We also know that each weapon corresponds to a particular room, so…</p><p>the poison belongs to the ballroom,<br>the trophy belongs to the gallery,<br>the pool stick belongs to the billiards room,<br>and the knife belongs to the dining room.<br>And we know that each suspect was located in a specific room at the time of the murder.</p><p>Mr. Parkes was located in the dining room.<br>Ms. Van Cleve was located in the gallery.<br>Mrs. Sparr was located in the billiards room.<br>Mr. Kalehoff was located in the ballroom.<br>To help solve this mystery, write a combination of conditional statements that:</p><p>sets the value of weapon based on the room and<br>sets the value of solved to true if the value of room matches the suspect’s room<br>Afterwards, print the following to the console if the mystery was solved:</p><p><strong><strong>__</strong></strong> did it in the <strong><strong>__</strong></strong> with the <strong><strong>__</strong></strong>!<br>Fill in the blanks with the name of the suspect, the room, and the weapon. For example,</p><p>Mr. Parkes did it in the dining room with the knife!<br>TIP: Make sure to test your code with different values. For example,</p><p>If room equals gallery and suspect equals Ms. Van Cleve, then Ms. Van Cleve did it in the gallery with the trophy! should be printed to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Murder Mystery (3-4)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// change the value of `room` and `suspect` to test your code</span><span class="hljs-keyword">var</span> room = <span class="hljs-string">&quot;dining room&quot;</span>;<span class="hljs-keyword">var</span> suspect = <span class="hljs-string">&quot;Mr. Parkes&quot;</span>;<span class="hljs-keyword">var</span> weapon = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">var</span> solved = <span class="hljs-literal">false</span>;<span class="hljs-keyword">if</span> (room === <span class="hljs-string">&quot;ballroom&quot;</span> &amp;&amp; suspect === <span class="hljs-string">&quot;Mr. Kalehoff&quot;</span>) &#123;    weapon = <span class="hljs-string">&quot;poison&quot;</span>;    solved = <span class="hljs-literal">true</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (room === <span class="hljs-string">&quot;gallery&quot;</span> &amp;&amp; suspect === <span class="hljs-string">&quot;Ms. Van Cleve&quot;</span>) &#123;    weapon = <span class="hljs-string">&quot;trophy&quot;</span>;    solved = <span class="hljs-literal">true</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (room === <span class="hljs-string">&quot;billiards room&quot;</span> &amp;&amp; suspect === <span class="hljs-string">&quot;Mrs. Sparr&quot;</span>) &#123;    weapon = <span class="hljs-string">&quot;pool stick&quot;</span>;    solved = <span class="hljs-literal">true</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (room === <span class="hljs-string">&quot;dining room&quot;</span> &amp;&amp; suspect === <span class="hljs-string">&quot;Mr. Parkes&quot;</span>)&#123;    weapon = <span class="hljs-string">&quot;knife&quot;</span>;    solved = <span class="hljs-literal">true</span>;&#125;<span class="hljs-keyword">if</span> (solved) &#123;<span class="hljs-built_in">console</span>.log(suspect +<span class="hljs-string">&quot; did it in the &quot;</span>+ room + <span class="hljs-string">&quot; with the &quot;</span>+ weapon +<span class="hljs-string">&quot;!&quot;</span>);&#125;</code></pre><p>Using the flowchart below, write the code to represent checking your balance at the ATM. The yellow diamonds represent conditional statements and the blue rectangles with rounded corners represent what should be printed to the console.</p><p><img src="https://d17h27t6h515a5.cloudfront.net/topher/2016/November/582cc7b8_atm-check-balance-cropped/atm-check-balance-cropped.jpeg"></p><p>Use the following variables in your solution:</p><p>balance - the account balance<br>isActive - if account is active<br>checkBalance - if you want to check balance<br>Hint: The variable balance could be a value less than, greater than, or equal to 0. The variables isActive and checkBalance are booleans that can be set to true or false.</p><p>TIP: To print out the account balance with decimal points (i.e. 325.00), use the .toFixed() method and pass it the number of decimal points you want to use. For example, balance.toFixed(2) returns 325.00.</p><p>TIP: Make sure to test your code with different values. For example,</p><p>If checkBalance equals true and isActive equals false, then Your account is no longer active. should be printed to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz - Checking Your Balance</span><span class="hljs-comment"> */</span><span class="hljs-comment">// change the values of `balance`, `checkBalance`, and `isActive` to test your code</span><span class="hljs-keyword">var</span> balance = <span class="hljs-number">325.00</span>;<span class="hljs-keyword">var</span> checkBalance = <span class="hljs-literal">true</span>;<span class="hljs-keyword">var</span> isActive = <span class="hljs-literal">false</span>;<span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">if</span> (checkBalance === <span class="hljs-literal">true</span>)&#123;    <span class="hljs-keyword">if</span> (isActive === <span class="hljs-literal">true</span>)&#123;        <span class="hljs-keyword">if</span> (balance &gt; <span class="hljs-number">0</span>)&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Your balance is $&quot;</span> + balance + <span class="hljs-string">&quot;.&quot;</span>)        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (balance === <span class="hljs-number">0</span>)&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Your account is empty.&quot;</span>)        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Your balance is negative. Please contact bank.&quot;</span>)        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Your account is no longer active.&quot;</span>)    &#125;&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Thank you. Have a nice day!&quot;</span>)&#125;</code></pre><p>Directions:<br>Ice cream is one of the most versatile desserts on the planet because it can be done up so many different ways. Using logical operators, write a series of complex logical expressions that prints only if the following conditions are true:</p><p>if flavor is set to vanilla or chocolate and<br>if vessel is set to cone or bowl and<br>if toppings is set to sprinkles or peanuts<br>If the above conditions are true, then print out:</p><p>I’d like two scoops of <strong><strong>__</strong></strong> ice cream in a <strong><strong>__</strong></strong> with <strong><strong>__</strong></strong>.<br>Fill in the blanks with the flavor of the ice cream, vessel, and toppings. For example,</p><p>I’d like two scoops of vanilla ice cream in a cone with peanuts.<br>TIP: Make sure to test your code with different values. For example,</p><p>If flavor equals “chocolate”, vessel equals “cone” and toppings equals “sprinkles”, then “I’d like two scoops of chocolate ice cream in a cone with sprinkles.” should be printed to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Ice Cream</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Write a single if statement that logs out the message:</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * &quot;I&#x27;d like two scoops of __________ ice cream in a __________ with __________.&quot;</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * ...only if:</span><span class="hljs-comment"> *   - flavor is &quot;vanilla&quot; or &quot;chocolate&quot;</span><span class="hljs-comment"> *   - vessel is &quot;cone&quot; or &quot;bowl&quot;</span><span class="hljs-comment"> *   - toppings is &quot;sprinkles&quot; or &quot;peanuts&quot;</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * We&#x27;re only testing the if statement and your boolean operators. </span><span class="hljs-comment"> * It&#x27;s okay if the output string doesn&#x27;t match exactly.</span><span class="hljs-comment"> */</span><span class="hljs-comment">// change the values of `flavor`, `vessel`, and `toppings` to test your code</span><span class="hljs-keyword">var</span> flavor = <span class="hljs-string">&quot;strawberry&quot;</span>;<span class="hljs-keyword">var</span> vessel = <span class="hljs-string">&quot;cone&quot;</span>;<span class="hljs-keyword">var</span> toppings = <span class="hljs-string">&quot;cookies&quot;</span>;<span class="hljs-comment">// Add your code here</span><span class="hljs-keyword">if</span> ((flavor === <span class="hljs-string">&quot;vanilla&quot;</span> || flavor === <span class="hljs-string">&quot;chocolate&quot;</span>) &amp;&amp; (vessel === <span class="hljs-string">&quot;cone&quot;</span> || vessel === <span class="hljs-string">&quot;bowl&quot;</span>) &amp;&amp; (toppings === <span class="hljs-string">&quot;sprinkles&quot;</span> || toppings === <span class="hljs-string">&quot;peanuts&quot;</span>)) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I\&#x27;d like two scoops of &quot;</span>+ flavor +<span class="hljs-string">&quot; ice cream in a &quot;</span>+ vessel +<span class="hljs-string">&quot; with &quot;</span>+ toppings +<span class="hljs-string">&quot;.&quot;</span>);&#125;</code></pre><p>What do I Wear?</p><p>If you’re like me, finding the right size t-shirt can sometimes be a challenge. What size am I? What’s the difference between S (small), M (medium), and L (large)? I usually wear L, but what if I need an XL (extra large)?</p><p>Thankfully, our friends at Teespring have got us covered because they’ve created a sizing chart to make things a lot easier.</p><p>![]<br>(<a href="https://d17h27t6h515a5.cloudfront.net/topher/2016/December/5852beb9_tshirt-guide/tshirt-guide.png">https://d17h27t6h515a5.cloudfront.net/topher/2016/December/5852beb9_tshirt-guide/tshirt-guide.png</a>)</p><p>Use the sizing chart above, create a series of logical expressions that prints the size of a t-shirt based on the measurements of shirtWidth, shirtLength, and shirtSleeve. Valid sizes include S, M, L, XL, 2XL, and 3XL.</p><p>For example, if…</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> shirtWidth = <span class="hljs-number">23</span>; <span class="hljs-comment">// size L (large)</span><span class="hljs-keyword">var</span> shirtLength = <span class="hljs-number">30</span>; <span class="hljs-comment">// size L (large)</span><span class="hljs-keyword">var</span> shirtSleeve = <span class="hljs-number">8.71</span>; <span class="hljs-comment">// size L (large)</span></code></pre><p>Then print L to the console.</p><p>Hint: You will need to compare a range of values when checking for shirtWidth, shirtLength, and shirtSleeve. For example, if the shirt’s width is at least 20”, but no more than 22”, then the t-shirt should be medium (M) — as long as the other values for the shirt’s length and sleeve measurements match up.</p><p>If shirtWidth, shirtLength, and shirtSleeve don’t fit within the range of acceptable values for a specific size, then print N/A to the console. For example, if…</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> shirtWidth = <span class="hljs-number">18</span>; <span class="hljs-comment">// size S (small)</span><span class="hljs-keyword">var</span> shirtLength = <span class="hljs-number">29</span>; <span class="hljs-comment">// size M (medium)</span><span class="hljs-keyword">var</span> shirtSleeve = <span class="hljs-number">8.47</span>; <span class="hljs-comment">// size M (medium)</span></code></pre><p>Then print N/A to the console because the measurements don’t all match up with one particular size.</p><p>TIP: Make sure to test your code with different values. For example,</p><p>If shirtWidth equals 19, shirtLength equals 28 and shirtSleeve equals 8.21, then S should be printed to the console.<br>If shirtWidth equals 26, shirtLength equals 33 and shirtSleeve equals 9.63, then 2XL should be printed to the console.<br>If shirtWidth equals 18, shirtLength equals 29 and shirtSleeve equals 8.47, then N/A should be printed to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: What do I Wear? (3-7)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// change the values of `shirtWidth`, `shirtLength`, and `shirtSleeve` to test your code</span><span class="hljs-keyword">var</span> shirtWidth = <span class="hljs-number">23</span>;<span class="hljs-keyword">var</span> shirtLength = <span class="hljs-number">30</span>;<span class="hljs-keyword">var</span> shirtSleeve = <span class="hljs-number">8.71</span>;<span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">if</span> (((shirtWidth &gt;= <span class="hljs-number">18</span> &amp;&amp; shirtWidth &lt; <span class="hljs-number">20</span>) &amp;&amp; (shirtLength &gt;= <span class="hljs-number">28</span> &amp;&amp; shirtLength &lt; <span class="hljs-number">29</span>) &amp;&amp; (shirtSleeve &gt;= <span class="hljs-number">8.13</span> &amp;&amp; shirtSleeve &lt; <span class="hljs-number">8.38</span>))) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;S&quot;</span>); &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((shirtWidth &gt;= <span class="hljs-number">20</span> &amp;&amp; shirtWidth &lt; <span class="hljs-number">22</span>) &amp;&amp; (shirtLength &gt;= <span class="hljs-number">29</span> &amp;&amp; shirtLength&lt; <span class="hljs-number">30</span>) &amp;&amp; (shirtSleeve &gt;= <span class="hljs-number">8.38</span> &amp;&amp; shirtSleeve &lt; <span class="hljs-number">8.63</span>)))&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;M&quot;</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((shirtWidth &gt;= <span class="hljs-number">22</span> &amp;&amp; shirtWidth &lt; <span class="hljs-number">24</span>) &amp;&amp; (shirtLength &gt;= <span class="hljs-number">30</span> &amp;&amp; shirtLength&lt; <span class="hljs-number">31</span>) &amp;&amp; (shirtSleeve &gt;= <span class="hljs-number">8.63</span> &amp;&amp; shirtSleeve &lt; <span class="hljs-number">8.88</span>)))&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;L&quot;</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((shirtWidth &gt;= <span class="hljs-number">24</span> &amp;&amp; shirtWidth &lt; <span class="hljs-number">26</span>) &amp;&amp; (shirtLength &gt;= <span class="hljs-number">31</span> &amp;&amp; shirtLength&lt; <span class="hljs-number">33</span>) &amp;&amp; (shirtSleeve &gt;= <span class="hljs-number">8.88</span> &amp;&amp; shirtSleeve &lt; <span class="hljs-number">9.63</span>)))&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;XL&quot;</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((shirtWidth &gt;= <span class="hljs-number">26</span> &amp;&amp; shirtWidth &lt; <span class="hljs-number">28</span>) &amp;&amp; (shirtLength &gt;= <span class="hljs-number">33</span> &amp;&amp; shirtLength&lt; <span class="hljs-number">34</span>) &amp;&amp; (shirtSleeve &gt;= <span class="hljs-number">9.63</span> &amp;&amp; shirtSleeve &lt; <span class="hljs-number">10.13</span>)))&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;2XL&quot;</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((shirtWidth &gt;= <span class="hljs-number">28</span>) &amp;&amp; (shirtLength &gt;= <span class="hljs-number">34</span> ) &amp;&amp; (shirtSleeve &gt;= <span class="hljs-number">10.13</span> )))&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;3XL&quot;</span>);&#125;<span class="hljs-keyword">else</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;N/A&quot;</span>);&#125;</code></pre><h3 id="Truthy-and-Falsy"><a href="#Truthy-and-Falsy" class="headerlink" title="Truthy and Falsy"></a>Truthy and Falsy</h3><p>Every value in JavaScript has an inherent boolean value. When that value is evaluated in the context of a boolean expression, the value will be transformed into that inherent boolean value.</p><p>Falsy values</p><p>A value is <strong>falsy</strong> if it converts to false when evaluated in a boolean context. For example, an empty String “” is falsy because, “” evaluates to false. You already know if…else statements, so let’s use them to test the truthy-ness of “”.</p><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;the value is truthy&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;the value is falsy&quot;</span>);&#125;</code></pre><p>Returns: “the value is falsy”</p><p>Here’s the list of all of the falsy values:</p><ul><li>the Boolean value false</li><li>the null type</li><li>the undefined type</li><li>the number 0</li><li>the empty string “”</li><li>the odd value NaN (stands for “not a number”, check out the NaN MDN article)<br>That’s right, there are <strong>only</strong> six falsy values in all of JavaScript!</li></ul><p>Truthy values</p><p>A value is <strong>truthy</strong> if it converts to true when evaluated in a boolean context. For example, the number 1 is truthy because, 1 evaluates to true. Let’s use an if…else statement again to test this out:</p><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;the value is truthy&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;the value is falsy&quot;</span>);&#125;</code></pre><p>Returns: “the value is truthy”</p><p>Here are some other examples of truthy values:</p><pre><code class="hljs javascript"><span class="hljs-literal">true</span><span class="hljs-number">42</span><span class="hljs-string">&quot;pizza&quot;</span><span class="hljs-string">&quot;0&quot;</span><span class="hljs-string">&quot;null&quot;</span><span class="hljs-string">&quot;undefined&quot;</span>&#123;&#125;[]</code></pre><p>Essentially, if it’s not in the list of falsy values, then it’s truthy!</p><h3 id="Ternary-Operator"><a href="#Ternary-Operator" class="headerlink" title="Ternary Operator"></a>Ternary Operator</h3><p>Sometimes, you might find yourself with the following type of conditional.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> isGoing = <span class="hljs-literal">true</span>;<span class="hljs-keyword">var</span> color;<span class="hljs-keyword">if</span> (isGoing) &#123;  color = <span class="hljs-string">&quot;green&quot;</span>;&#125; <span class="hljs-keyword">else</span> &#123;  color = <span class="hljs-string">&quot;red&quot;</span>;&#125;<span class="hljs-built_in">console</span>.log(color);</code></pre><p>In this example, the variable color is being assigned to either “green” or “red” based on the value of isGoing. This code works, but it’s a rather lengthy way for assigning a value to a variable. Thankfully, in JavaScript there’s another way.</p><p>The <strong>ternary operator</strong> provides you with a shortcut alternative for writing lengthy if…else statements.</p><pre><code class="hljs ada">conditional ? (<span class="hljs-keyword">if</span> condition <span class="hljs-keyword">is</span> <span class="hljs-literal">true</span>) : (<span class="hljs-type">if</span> condition <span class="hljs-keyword">is</span> <span class="hljs-literal">false</span>)</code></pre><p>To use the ternary operator, first provide a conditional statement on the left-side of the ?. Then, between the ? and : write the code that would run if the condition is true and on the right-hand side of the : write the code that would run if the condition is false. For example, you can rewrite the example code above as:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> isGoing = <span class="hljs-literal">true</span>;<span class="hljs-keyword">var</span> color = isGoing ? <span class="hljs-string">&quot;green&quot;</span> : <span class="hljs-string">&quot;red&quot;</span>;<span class="hljs-built_in">console</span>.log(color);</code></pre><p>This code not only replaces the conditional, but it also handles the variable assignment for color.</p><p>If you breakdown the code, the condition isGoing is placed on the left side of the ?. Then, the first expression, after the ?, is what will be run if the condition is true and the second expression after the, :, is what will be run if the condition is false.</p><p>What will be printed to the console if the following code is run?</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> adult = <span class="hljs-literal">true</span>;<span class="hljs-keyword">var</span> preorder = <span class="hljs-literal">true</span>;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;It costs $&quot;</span> + (adult ? <span class="hljs-string">&quot;40.00&quot;</span> : <span class="hljs-string">&quot;20.00&quot;</span>) + <span class="hljs-string">&quot; to attend the concert. Pick up your tickets at the &quot;</span> + (preorder ? <span class="hljs-string">&quot;will call&quot;</span> : <span class="hljs-string">&quot;the gate&quot;</span>) + <span class="hljs-string">&quot;.&quot;</span>);</code></pre><h3 id="Programming-quiz-4"><a href="#Programming-quiz-4" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>From the smallest of creatures to the largest of animals, inevitably every living, breathing thing must ingest other organisms to survive. This means that all animals will fall within one of the three consumer-based categories based on the types of food that they eat.</p><ul><li>Animals that eat only plants are called herbivores</li><li>Animals that eat only other animals are called carnivores</li><li>Animals that eat both plants and animals are called omnivores</li></ul><p>Write a series of ternary statements that sets the variable category equal to:</p><ul><li>“herbivore” if an animal eats plants</li><li>“carnivore” if an animal eats animals</li><li>“omnivore” if an animal eats plants and animals</li><li>undefined if an animal doesn’t eat plants or animals<br>Use the eatsPlants and eatsAnimals variables to test your code.</li></ul><p>TIP: Make sure to test your code with different values. For example,</p><p>If eatsPlants equals true and eatsAnimals equals false, then herbivore should be printed to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz - Navigating the Food Chain</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Use a series of ternary operator to set the category to one of the following:</span><span class="hljs-comment"> *   - &quot;herbivore&quot; if an animal eats plants</span><span class="hljs-comment"> *   - &quot;carnivore&quot; if an animal eats animals</span><span class="hljs-comment"> *   - &quot;omnivore&quot; if an animal eats plants and animals</span><span class="hljs-comment"> *   - undefined if an animal doesn&#x27;t eat plants or animals</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Notes</span><span class="hljs-comment"> *   - use the variables `eatsPlants` and `eatsAnimals` in your ternary expressions</span><span class="hljs-comment"> *   - `if` statements aren&#x27;t allowed ;-)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// change the values of `eatsPlants` and `eatsAnimals` to test your code</span><span class="hljs-keyword">var</span> eatsPlants = <span class="hljs-literal">false</span>;<span class="hljs-keyword">var</span> eatsAnimals = <span class="hljs-literal">true</span>;<span class="hljs-keyword">var</span> category = eatsPlants &amp;&amp; eatsAnimals ? <span class="hljs-string">&quot;omnivore&quot;</span>: eatsPlants ? <span class="hljs-string">&quot;herbivore&quot;</span> : eatsAnimals ? <span class="hljs-string">&quot;carnivore&quot;</span> : <span class="hljs-literal">undefined</span>;  <span class="hljs-comment">/* your code goes here */</span><span class="hljs-built_in">console</span>.log(category);</code></pre><h3 id="Switch-Statement"><a href="#Switch-Statement" class="headerlink" title="Switch Statement"></a>Switch Statement</h3><p>If you find yourself repeating else if statements in your code, where each condition is based on the same value, then it might be time to use a switch statement.</p><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (option === <span class="hljs-number">1</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 1.&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option === <span class="hljs-number">2</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 2.&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option === <span class="hljs-number">3</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 3.&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option === <span class="hljs-number">4</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 4.&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option === <span class="hljs-number">5</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 5.&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (option === <span class="hljs-number">6</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 6.&quot;</span>);&#125;</code></pre><p>A switch statement is an another way to chain multiple else if statements that are based on the same value without using conditional statements. Instead, you just switch which piece of code is executed based on a value.</p><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span> (option) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 1.&quot;</span>);  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 2.&quot;</span>);  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 3.&quot;</span>);  <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 4.&quot;</span>);  <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 5.&quot;</span>);  <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 6.&quot;</span>);&#125;</code></pre><p>Here, each else if statement (option === [value]) has been replaced with a case clause (case: [value]) and those clauses have been wrapped inside the switch statement.</p><p>When the switch statement first evaluates, it looks for the first case clause whose expression evaluates to the same value as the result of the expression passed to the switch statement. Then, it transfers control to that case clause, executing the associated statements.</p><p>So, if you set option equal to 3…</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> option = <span class="hljs-number">3</span>;<span class="hljs-keyword">switch</span> (option) &#123;  ...&#125;</code></pre><pre><code class="hljs properties"><span class="hljs-attr">Prints</span>:<span class="hljs-string"></span><span class="hljs-attr">You</span> <span class="hljs-string">selected option 3.</span><span class="hljs-attr">You</span> <span class="hljs-string">selected option 4.</span><span class="hljs-attr">You</span> <span class="hljs-string">selected option 5.</span><span class="hljs-attr">You</span> <span class="hljs-string">selected option 6.</span></code></pre><p>…then the switch statement prints out options 3, 4, 5, and 6.</p><p>But that’s not exactly like the original if…else code at the top? So what’s missing?</p><p>The break statement can be used to terminate a switch statement and transfer control to the code following the terminated statement. By adding a break to each case clause, you fix the issue of the switch statement falling-through to other case clauses.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> option = <span class="hljs-number">3</span>;<span class="hljs-keyword">switch</span> (option) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 1.&quot;</span>);    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 2.&quot;</span>);    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 3.&quot;</span>);    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 4.&quot;</span>);    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 5.&quot;</span>);    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You selected option 6.&quot;</span>);    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// technically, not needed</span>&#125;</code></pre><p>What will be the result from the following switch statement?</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> month = <span class="hljs-number">2</span>;<span class="hljs-keyword">switch</span>(month) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:    days = <span class="hljs-number">31</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:  <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:    days = <span class="hljs-number">30</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:    days = <span class="hljs-number">28</span>;&#125;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;There are &quot;</span> + days + <span class="hljs-string">&quot; days in this month.&quot;</span>);</code></pre><h3 id="Programming-quiz-5"><a href="#Programming-quiz-5" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>In 2015, the U.S. Bureau of Labor Statistics conducted research to reveal how average salary is directly related to the number of years spent in school. In their findings, they found that people with:</p><ul><li>no high school diploma earned an average of $25,636/year,</li><li>a high school diploma earned an average of $35,256/year,</li><li>an Associate’s degree earned an average of $41,496/year,</li><li>a Bachelor’s degree earned an average of $59,124/year,</li><li>a Master’s degree earned an average of $69,732/year,</li><li>a Professional degree earned an average of $89,960/year,</li><li>and a Doctoral degree earned an average of $84,396/year.</li></ul><p>NOTE: Wondering what the average salary would be for a person with a Nanodegree from Udacity? That’s a hard question to answer, but that doesn’t mean we haven’t tried to quantify the value of our Nanodegrees. Click here to read more about Nanodegrees from resident Udacity writer Chris Watkins.</p><p>Write a switch statement to set the average salary of a person based on their type of completed education.</p><p>Afterwards, print the following to the console.</p><pre><code class="hljs javascript">In <span class="hljs-number">2015</span>, a person <span class="hljs-keyword">with</span> __________ earned an average <span class="hljs-keyword">of</span> __________/year.</code></pre><p>Fill in the blanks with the type of education and the expected average salary. Make sure to use correct grammar in your printed statement. For help, refer to the findings above.</p><pre><code class="hljs javascript">In <span class="hljs-number">2015</span>, a person <span class="hljs-keyword">with</span> a Bachelor<span class="hljs-string">&#x27;s degree earned an average of $59,124/year.</span></code></pre><p>TIP: To print out the average salary with commas (i.e. 59,124), use the toLocaleString() method and pass it the locale “en-US”. For example, salary.toLocaleString(“en-US”).</p><p>TIP: Make sure to test your code with different values. For example,</p><pre><code class="hljs javascript">If education equals <span class="hljs-string">&quot;an Associate&#x27;s degree&quot;</span>, then In <span class="hljs-number">2015</span>, a person <span class="hljs-keyword">with</span> an Associate<span class="hljs-string">&#x27;s degree earned an average of $41,496/year. should be printed to the console.</span></code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Back to School (3-9)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// change the value of `education` to test your code</span><span class="hljs-keyword">var</span> education = <span class="hljs-string">&quot;no high school diploma&quot;</span>;<span class="hljs-comment">// set the value of this based on a person&#x27;s education</span><span class="hljs-keyword">var</span> salary;<span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">switch</span> (education) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;no high school diploma&quot;</span>:    salary =<span class="hljs-string">&quot;$25,636&quot;</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a high school diploma&quot;</span>:    salary =<span class="hljs-string">&quot;$35,256&quot;</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span><span class="hljs-string">&quot;an Associate&#x27;s degree&quot;</span> :    salary =<span class="hljs-string">&quot;$41,496&quot;</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a Bachelor&#x27;s degree&quot;</span>:    salary =<span class="hljs-string">&quot;$59,124&quot;</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a Master&#x27;s degree&quot;</span>:     salary =<span class="hljs-string">&quot;$69,732&quot;</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a Professional degree&quot;</span>:    salary =<span class="hljs-string">&quot;$89,960&quot;</span>;    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a Doctoral degree&quot;</span>:    salary=<span class="hljs-string">&quot;$84,396&quot;</span>;    <span class="hljs-keyword">break</span>;&#125;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;In 2015, a person with &quot;</span> + education +<span class="hljs-string">&quot; earned an average of &quot;</span>+ salary+<span class="hljs-string">&quot;/year.&quot;</span>);</code></pre><h3 id="While-loops"><a href="#While-loops" class="headerlink" title="While loops"></a>While loops</h3><p>“Fizzbuzz” is a famous interview question used in programming interviews. It goes something like this:</p><ul><li>Loop through the numbers 1 to 100</li><li>If the number is divisible by 3, print “Fizz”</li><li>If the number is divisible by 5, print “Buzz”</li><li>If the number is divisible by both 3 and 5, print “FizzBuzz”</li><li>If the number is not divisible by 3 or 5, print the number</li></ul><pre><code class="hljs javascript">TIP: A number x is divisible by a number y <span class="hljs-keyword">if</span> the answer to x / y has a remainder <span class="hljs-keyword">of</span> <span class="hljs-number">0.</span> For example, <span class="hljs-number">10</span> is divisible by <span class="hljs-number">2</span> because <span class="hljs-number">10</span> / <span class="hljs-number">2</span> = <span class="hljs-number">5</span> <span class="hljs-keyword">with</span> no remainder. You can check <span class="hljs-keyword">if</span> a number is divisible by another number by checking <span class="hljs-keyword">if</span> x % y === <span class="hljs-number">0.</span></code></pre><p>We’re going to have you program your own version of FizzBuzz called “JuliaJames” (yes, imaginative, right?) Keep in mind that in an interview, you would want to write efficient code with very little duplication. We don’t want you to worry about that for this question. Just focus on practicing using loops.</p><p>Write a while loop that:</p><ul><li>Loop through the numbers 1 to 20</li><li>If the number is divisible by 3, print “Julia”</li><li>If the number is divisible by 5, print “James”</li><li>If the number is divisible by 3 and 5, print “JuliaJames”</li><li>If the number is not divisible by 3 or 5, print the number</li></ul><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: JuliaJames</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (x &lt;= <span class="hljs-number">20</span>) &#123;    <span class="hljs-comment">// check divisibility</span>    <span class="hljs-keyword">if</span> ((x % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) &amp;&amp; (x % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>))&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;JuliaJames&quot;</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>)&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Julia&quot;</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>)&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;James&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(x);    &#125;    x += <span class="hljs-number">1</span>;    <span class="hljs-comment">// print Julia, James, or JuliaJames</span>    <span class="hljs-comment">// increment x</span>&#125;</code></pre><p>Write a loop that prints out the following song. Starting at 99, and ending at 1 bottle.</p><pre><code class="hljs javascript"><span class="hljs-number">99</span> bottles <span class="hljs-keyword">of</span> juice on the wall! <span class="hljs-number">99</span> bottles <span class="hljs-keyword">of</span> juice! Take one down, pass it around... <span class="hljs-number">98</span> bottles <span class="hljs-keyword">of</span> juice on the wall!<span class="hljs-number">98</span> bottles <span class="hljs-keyword">of</span> juice on the wall! <span class="hljs-number">98</span> bottles <span class="hljs-keyword">of</span> juice! Take one down, pass it around... <span class="hljs-number">97</span> bottles <span class="hljs-keyword">of</span> juice on the wall!...<span class="hljs-number">2</span> bottles <span class="hljs-keyword">of</span> juice on the wall! <span class="hljs-number">2</span> bottles <span class="hljs-keyword">of</span> juice! Take one down, pass it around... <span class="hljs-number">1</span> bottle <span class="hljs-keyword">of</span> juice on the wall!<span class="hljs-number">1</span> bottle <span class="hljs-keyword">of</span> juice on the wall! <span class="hljs-number">1</span> bottle <span class="hljs-keyword">of</span> juice! Take one down, pass it around... <span class="hljs-number">0</span> bottles <span class="hljs-keyword">of</span> juice on the wall!</code></pre><p>Some Notes:</p><ul><li>Note the pluralization of the word “bottle” when you go from 2 bottles to 1 bottle.</li><li>Your text editor may try to autocorrect your ellipses … to the ellipses character … Do not use the ellipses character for this quiz.</li></ul><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: 99 Bottles of Juice (4-2)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Use the following `while` loop to write out the song &quot;99 bottles of juice&quot;.</span><span class="hljs-comment"> * Log the your lyrics to the console.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Note</span><span class="hljs-comment"> *   - Each line of the lyrics needs to be logged to the same line.</span><span class="hljs-comment"> *   - The pluralization of the word &quot;bottle&quot; changes from &quot;2 bottles&quot; to &quot;1 bottle&quot; to &quot;0 bottles&quot;.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> num = <span class="hljs-number">99</span>;<span class="hljs-keyword">while</span> (num &gt;= <span class="hljs-number">1</span>)&#123;    <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">2</span>)&#123;    <span class="hljs-built_in">console</span>.log(num +<span class="hljs-string">&quot; bottles of juice on the wall! &quot;</span> + num + <span class="hljs-string">&quot; bottles of juice! Take one down, pass it around... &quot;</span> + (num - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; bottles of juice on the wall!&quot;</span>);    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num === <span class="hljs-number">2</span>) &#123;        <span class="hljs-built_in">console</span>.log(num +<span class="hljs-string">&quot; bottles of juice on the wall! &quot;</span>+num +<span class="hljs-string">&quot; bottles of juice! Take one down, pass it around... &quot;</span> + (num - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; bottle of juice on the wall!&quot;</span>);    &#125;<span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">console</span>.log(num +<span class="hljs-string">&quot; bottle of juice on the wall! &quot;</span>+num +<span class="hljs-string">&quot; bottle of juice! Take one down, pass it around... &quot;</span> + (num - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; bottles of juice on the wall!&quot;</span>);    &#125;    num --;&#125;</code></pre><p>NASA’s countdown to launch includes checkpoints where NASA engineers complete certain technical tasks. During the final minute, NASA has 6 tasks to complete:</p><ul><li>Orbiter transfers from ground to internal power (T-50 seconds)</li><li>Ground launch sequencer is go for auto sequence start (T-31 seconds)</li><li>Activate launch pad sound suppression system (T-16 seconds)</li><li>Activate main engine hydrogen burnoff system (T-10 seconds)</li><li>Main engine start (T-6 seconds)</li><li>Solid rocket booster ignition and liftoff! (T-0 seconds)</li></ul><p>NOTE: “T-50 seconds” read as “T-minus 50 seconds”.</p><p>Write a while loop that counts down from 60 seconds and:</p><ul><li>If there’s a task being completed, it prints out the task</li><li>If there is no task being completed, it prints out the time as T-x seconds</li></ul><p>Use the task and time descriptions described above.</p><p>Your output should look like the following:</p><pre><code class="hljs javascript">T<span class="hljs-number">-60</span> secondsT<span class="hljs-number">-59</span> secondsT<span class="hljs-number">-58</span> seconds...T<span class="hljs-number">-51</span> secondsOrbiter transfers <span class="hljs-keyword">from</span> ground to internal powerT<span class="hljs-number">-49</span> seconds...T<span class="hljs-number">-3</span> secondsT<span class="hljs-number">-2</span> secondsT<span class="hljs-number">-1</span> secondsSolid rocket booster ignition and liftoff!</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Countdown, Liftoff! (4-3)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Using a while loop, print out the countdown output above.</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> x = <span class="hljs-number">60</span>;<span class="hljs-keyword">while</span> (x &gt;= <span class="hljs-number">0</span>)&#123;  <span class="hljs-keyword">if</span> (x === <span class="hljs-number">50</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Orbiter transfers from ground to internal power&quot;</span>);  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x === <span class="hljs-number">31</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Ground launch sequencer is go for auto sequence start&quot;</span>);  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x === <span class="hljs-number">16</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Activate launch pad sound suppression system&quot;</span>);  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x === <span class="hljs-number">10</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Activate main engine hydrogen burnoff system&quot;</span>);  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x === <span class="hljs-number">6</span>) &#123;    <span class="hljs-built_in">console</span>.log (<span class="hljs-string">&quot;Main engine start&quot;</span>);   &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x === <span class="hljs-number">0</span>) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Solid rocket booster ignition and liftoff!&quot;</span>);  &#125;<span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;T-&quot;</span> + x + <span class="hljs-string">&quot; seconds&quot;</span>);  &#125;  x--;&#125;</code></pre><h3 id="For-loops"><a href="#For-loops" class="headerlink" title="For loops"></a>For loops</h3><p>The for loop explicitly forces you to define the start point, stop point, and each step of the loop. In fact, you’ll get an Uncaught SyntaxError: Unexpected token ) if you leave out any of the three required pieces.</p><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> ( start; stop; step ) &#123;  <span class="hljs-comment">// do this thing</span>&#125;</code></pre><p>Here’s an example of a for loop that prints out the values from 0 to 5. Notice the semicolons separating the different statements of the for loop: var i = 0; i &lt; 6; i = i + 1</p><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i = i + <span class="hljs-number">1</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Printing out i = &quot;</span> + i);&#125;</code></pre><h3 id="Nested-loops"><a href="#Nested-loops" class="headerlink" title="Nested loops"></a>Nested loops</h3><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">5</span>; x = x + <span class="hljs-number">1</span>) &#123;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> y = <span class="hljs-number">0</span>; y &lt; <span class="hljs-number">3</span>; y = y + <span class="hljs-number">1</span>) &#123;    <span class="hljs-built_in">console</span>.log(x + <span class="hljs-string">&quot;,&quot;</span> + y);  &#125;&#125;</code></pre><p>What will this loop print out?</p><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">6</span>; i = i + <span class="hljs-number">2</span>) &#123;  <span class="hljs-built_in">console</span>.log(i);&#125;</code></pre><h3 id="Increment-and-decrement"><a href="#Increment-and-decrement" class="headerlink" title="Increment and decrement"></a>Increment and decrement</h3><p>Here is a summary of operators you’ve learned so far:</p><pre><code class="hljs javascript">x++ or ++x <span class="hljs-comment">// same as x = x + 1 </span>x-- or --x <span class="hljs-comment">// same as x = x - 1</span>x += <span class="hljs-number">3</span> <span class="hljs-comment">// same as x = x + 3</span>x -= <span class="hljs-number">6</span> <span class="hljs-comment">// same as x = x - 6</span>x *= <span class="hljs-number">2</span> <span class="hljs-comment">// same as x = x * 2</span>x /= <span class="hljs-number">5</span> <span class="hljs-comment">// same as x = x / 5</span></code></pre><h3 id="Programming-quiz-6"><a href="#Programming-quiz-6" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>Rewrite the following while loop as a for loop:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">9</span>;<span class="hljs-keyword">while</span> (x &gt;= <span class="hljs-number">1</span>) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello &quot;</span> + x);  x = x - <span class="hljs-number">1</span>;&#125;</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Changing the Loop (4-4)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// rewrite the while loop as a for loop</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x = <span class="hljs-number">9</span>; x &gt;= <span class="hljs-number">1</span>; x --)&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello &quot;</span> + x);&#125;</code></pre><p>Here is a for loop that’s supposed to print the numbers 5 through 9. Fix the error!</p><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (x &lt; <span class="hljs-number">10</span>; x++) &#123;  <span class="hljs-built_in">console</span>.log(x);&#125;</code></pre><p>The for loop below has an error. Fix it!</p><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span> k &lt; <span class="hljs-number">200</span> k++) &#123;  <span class="hljs-built_in">console</span>.log(k);&#125;</code></pre><p>Write a for loop that prints out the factorial of the number 12:</p><p>Save your final answer in a variable called solution and print it to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Factorials (4-7)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> solution = <span class="hljs-number">1</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x = <span class="hljs-number">12</span>; x &gt;= <span class="hljs-number">1</span>; x--)&#123;    solution *= x;&#125;<span class="hljs-built_in">console</span>.log(solution);</code></pre><p>Theater seats often display a row and seat number to help theatergoers find their seats. If there are 26 rows (0 to 25) and 100 seats (0 to 99) in each row, write a nested for loop to print out all of the different seat combinations in the theater.</p><p>Example output for row-seat information: output each row and seat number on a separate line</p><pre><code class="hljs javascript"><span class="hljs-number">0</span><span class="hljs-number">-0</span><span class="hljs-number">0</span><span class="hljs-number">-1</span><span class="hljs-number">0</span><span class="hljs-number">-2</span>...<span class="hljs-number">25</span><span class="hljs-number">-97</span><span class="hljs-number">25</span><span class="hljs-number">-98</span><span class="hljs-number">25</span><span class="hljs-number">-99</span></code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Find my Seat (4-8)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Write a nested for loop to print out all of the different seat combinations in the theater.</span><span class="hljs-comment"> * The first row-seat combination should be 0-0</span><span class="hljs-comment"> * The last row-seat combination will be 25-99</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Things to note:</span><span class="hljs-comment"> *  - the row and seat numbers start at 0, not 1</span><span class="hljs-comment"> *  - the highest seat number is 99, not 100</span><span class="hljs-comment"> */</span><span class="hljs-comment">// Write your code here</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">26</span>; x++) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> y = <span class="hljs-number">0</span>; y &lt;<span class="hljs-number">100</span>; y++) &#123;        <span class="hljs-built_in">console</span>.log(x + <span class="hljs-string">&quot;-&quot;</span> + y)    &#125;&#125;</code></pre><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>Functions allow you to package up lines of code that you can use (and often reuse) in your programs.</p><p>Sometimes they take parameters like the pizza button from the beginning of this lesson. reheatPizza() had one parameter: the number of slices.</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reheatPizza</span>(<span class="hljs-params">numSlices</span>) </span>&#123;  <span class="hljs-comment">// code that figures out reheat settings!</span>&#125;</code></pre><p>The reverseString() function that you saw also had one parameter: the string to be reversed.</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverseString</span>(<span class="hljs-params">reverseMe</span>) </span>&#123;  <span class="hljs-comment">// code to reverse a string!</span>&#125;</code></pre><p>In both cases, the parameter is listed as a variable after the function name, inside the parentheses. And, if there were multiple parameters, you would just separate them with commas.</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doubleGreeting</span>(<span class="hljs-params">name, otherName</span>) </span>&#123;  <span class="hljs-comment">// code to greet two people!</span>&#125;</code></pre><p>But, you can also have functions that don’t have any parameters. Instead, they just package up some code and perform some task. In this case, you would just leave the parentheses empty. Take this one for example. Here’s a simple function that just prints out “Hello!”.</p><pre><code class="hljs javascript"><span class="hljs-comment">// accepts no parameters! parentheses are empty</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;Hello!&quot;</span>  <span class="hljs-built_in">console</span>.log(message);&#125;</code></pre><p>If you tried pasting any of the functions above into the JavaScript console, you probably didn’t notice much happen. In fact, you probably saw undefined returned back to you. undefined is the default return value on the console when nothing is explicitly returned using the special return keyword.</p><p>Return statements<br>In the sayHello() function above, a value is printed to the console with console.log, but not explicitly returned with a return statement. You can write a return statement by using the return keyword followed by the expression or value that you want to return.</p><pre><code class="hljs javascript"><span class="hljs-comment">// declares the sayHello function</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;Hello!&quot;</span>  <span class="hljs-keyword">return</span> message; <span class="hljs-comment">// returns value instead of printing it</span>&#125;</code></pre><p>How to run a function<br>Now, to get your function to do something, you have to invoke or call the function using the function name, followed by parentheses with any arguments that are passed into it. Functions are like machines. You can build the machine, but it won’t do anything unless you also turn it on. Here’s how you would call the sayHello() function from before, and then use the return value to print to the console:</p><pre><code class="hljs javascript"><span class="hljs-comment">// declares the sayHello function</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;Hello!&quot;</span>  <span class="hljs-keyword">return</span> message; <span class="hljs-comment">// returns value instead of printing it</span>&#125;<span class="hljs-comment">// function returns &quot;Hello!&quot; and console.log prints the return value</span><span class="hljs-built_in">console</span>.log(sayHello());</code></pre><p>Prints: “Hello!”</p><p>Parameters vs. Arguments</p><p>At first, it can be a bit tricky to know when something is either a parameter or an argument. The key difference is in where they show up in the code. A parameter is always going to be a variable name and appears in the function declaration. On the other hand, an argument is always going to be a value (i.e. any of the JavaScript data types - a number, a string, a boolean, etc.) and will always appear in the code when the function is called or invoked.</p><p>Try declaring and calling some functions on your own:</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findAverage</span>(<span class="hljs-params">x, y</span>) </span>&#123;  <span class="hljs-keyword">var</span> answer = (x + y) / <span class="hljs-number">2</span>;  <span class="hljs-keyword">return</span> answer;&#125;<span class="hljs-keyword">var</span> avg = findAverage(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>);</code></pre><p>Are x and y parameters or arguments for this function?</p><h3 id="Programming-quiz-7"><a href="#Programming-quiz-7" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>Declare a function called laugh() that returns “hahahahahahahahahaha!”. Print the value returned from the laugh() function to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Laugh it Off 1 (5-1)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">laugh</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> m = <span class="hljs-string">&quot;hahahahahahahahahaha!&quot;</span>;    <span class="hljs-keyword">return</span> m;&#125;<span class="hljs-built_in">console</span>.log(laugh());</code></pre><p>Write a function called laugh() that takes one parameter, num that represents the number of “ha”s to return.</p><p>Here’s an example of the output and how to call the function that you will write:</p><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(laugh(<span class="hljs-number">3</span>));Prints: <span class="hljs-string">&quot;hahaha!&quot;</span></code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Laugh it Off 2 (5-2)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Write a function called `laugh` with a parameter named `num` that represents the number of &quot;ha&quot;s to return.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Note:</span><span class="hljs-comment"> *  - make sure your the final character is an exclamation mark (&quot;!&quot;)</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">laugh</span>(<span class="hljs-params">num</span>) </span>&#123;    <span class="hljs-keyword">var</span> m = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>; x &lt;= num; x++)&#123;        m += <span class="hljs-string">&quot;ha&quot;</span>;    &#125;    <span class="hljs-keyword">return</span> m += <span class="hljs-string">&quot;!&quot;</span>;&#125;<span class="hljs-built_in">console</span>.log(laugh(<span class="hljs-number">3</span>));</code></pre><h3 id="Return-values"><a href="#Return-values" class="headerlink" title="Return values"></a>Return values</h3><p>It’s important to understand that return and print are not the same thing. Printing a value to the JavaScript console only displays a value (that you can view for debugging purposes), but the value it displays can’t really be used for anything more than that. For this reason, you should remember to only use console.log to test your code in the JavaScript console.</p><p>Paste the following function declaration and function invocation into the JavaScript console to see the difference between logging (printing) and returning:</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isThisWorking</span>(<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Printing: isThisWorking was called and &quot;</span> + input + <span class="hljs-string">&quot; was passed in as an argument.&quot;</span>);  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Returning: I am returning this string!&quot;</span>;&#125;isThisWorking(<span class="hljs-number">3</span>);</code></pre><p>If you don’t explicitly define a return value, the function will return undefined by default.</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isThisWorking</span>(<span class="hljs-params">input</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Printing: isThisWorking was called and &quot;</span> + input + <span class="hljs-string">&quot; was passed in as an argument.&quot;</span>);&#125;isThisWorking(<span class="hljs-number">3</span>);</code></pre><p>What does this function “return”?</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I&#x27;m sleepy!&quot;</span>);  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;zzz&quot;</span>;  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;snore&quot;</span>;&#125;sleep();</code></pre><p>What number will be “printed” (to the JavaScript console)?</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">square</span>(<span class="hljs-params">x</span>) </span>&#123;  <span class="hljs-keyword">return</span> x * x;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">subtractFour</span>(<span class="hljs-params">x</span>) </span>&#123;  <span class="hljs-keyword">return</span> square(x) - <span class="hljs-number">4</span>;&#125;<span class="hljs-built_in">console</span>.log(subtractFour(<span class="hljs-number">5</span>)); <span class="hljs-comment">// 21</span></code></pre><p>What do you think will happen with the following code?</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;&#125;test();</code></pre><p>Returning a value from a function is great, but what’s the use of a return value if you’re not going to use the value to do something?</p><p>A function’s return value can be stored in a variable or reused throughout your program as a function argument. Here, we have a function that adds two numbers together, and another function that divides a number by 2. We can find the average of 5 and 7 by using the add() function to add a pair of numbers together, and then by passing the sum of the two numbers add(5, 7) into the function divideByTwo() as an argument.</p><p>And finally, we can even store the final answer in a variable called average and use the variable to perform even more calculations in more places!</p><pre><code class="hljs javascript"><span class="hljs-comment">// returns the sum of two numbers</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;  <span class="hljs-keyword">return</span> x + y;&#125;<span class="hljs-comment">// returns the value of a number divided by 2</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">divideByTwo</span>(<span class="hljs-params">num</span>) </span>&#123;  <span class="hljs-keyword">return</span> num / <span class="hljs-number">2</span>;&#125;<span class="hljs-keyword">var</span> sum = add(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>); <span class="hljs-comment">// call the &quot;add&quot; function and store the returned value in the &quot;sum&quot; variable</span><span class="hljs-keyword">var</span> average = divideByTwo(sum); <span class="hljs-comment">// call the &quot;divideByTwo&quot; function and store the returned value in the &quot;average&quot; variable</span></code></pre><p>Try predicting what will be printed in the console.log statement below. Then, check your prediction by pasting the code into the JavaScript console. Functions can be tricky, so try figuring it out before running the code!</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTen</span>(<span class="hljs-params">x</span>) </span>&#123;  <span class="hljs-keyword">return</span> x + <span class="hljs-number">10</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">divideByThree</span>(<span class="hljs-params">y</span>) </span>&#123;  <span class="hljs-keyword">return</span> y / <span class="hljs-number">3</span>;&#125;<span class="hljs-keyword">var</span> result = addTen(<span class="hljs-number">2</span>);<span class="hljs-built_in">console</span>.log(divideByThree(result));</code></pre><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>Which of these variables a, b, c, or d, is defined in the global scope?</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">y</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">z</span>(<span class="hljs-params"></span>) </span>&#123;      <span class="hljs-keyword">var</span> d = <span class="hljs-number">4</span>;    &#125;    z();  &#125;  y();&#125;x();</code></pre><p>Where can you print out the value of variable c without resulting in an error?</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">y</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">z</span>(<span class="hljs-params"></span>) </span>&#123;      <span class="hljs-keyword">var</span> d = <span class="hljs-number">4</span>;    &#125;    z();  &#125;  y();&#125;x();</code></pre><h3 id="Shadowing"><a href="#Shadowing" class="headerlink" title="Shadowing"></a>Shadowing</h3><p>Without pasting into your console, what do you think this code will print out?</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTwo</span>(<span class="hljs-params"></span>) </span>&#123;  x = x + <span class="hljs-number">2</span>;&#125;addTwo();x = x + <span class="hljs-number">1</span>;<span class="hljs-built_in">console</span>.log(x);</code></pre><p>Without pasting into your console, what do you think this code will print out?</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTwo</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">var</span> x = x + <span class="hljs-number">2</span>;&#125;addTwo();x = x + <span class="hljs-number">1</span>;<span class="hljs-built_in">console</span>.log(x);</code></pre><ul><li>If an identifier is declared in global scope, it’s available everywhere.</li><li>If an identifier is declared in function scope, it’s available in the function it was declared in (even in functions declared inside the function).</li><li>When trying to access an identifier, the JavaScript Engine will first look in the current function. If it doesn’t find anything, it will continue to the next outer function to see if it can find the identifier there. It will keep doing this until it reaches the global scope.</li><li>Global identifiers are a bad idea. They can lead to bad variable names, conflicting variable names, and messy code.</li></ul><h3 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h3><p>Sometimes your JavaScript code will produce errors that may seem counterintuitive at first. Hoisting is another one of those topics that might be the cause of some of these tricky errors you’re debugging.</p><p>Hoisting is JavaScript’s default behavior of moving <strong>declarations</strong> to the top.</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayGreeting</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(greeting);    <span class="hljs-keyword">var</span> greeting;&#125;sayGreeting();</code></pre><p>What value will be printed to the console?</p><pre><code class="hljs javascript">sayHi(<span class="hljs-string">&quot;Julia&quot;</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params">name</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(greeting + <span class="hljs-string">&quot; &quot;</span> + name);  <span class="hljs-keyword">var</span> greeting;&#125;</code></pre><p>What value will be printed to the console?</p><pre><code class="hljs javascript">sayHi(<span class="hljs-string">&quot;Julia&quot;</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params">name</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(greeting + <span class="hljs-string">&quot; &quot;</span> + name);  <span class="hljs-keyword">var</span> greeting = <span class="hljs-string">&quot;Hello&quot;</span>;&#125;</code></pre><p>What value will be printed to the console?</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params">name</span>) </span>&#123;  <span class="hljs-keyword">var</span> greeting = <span class="hljs-string">&quot;Hello&quot;</span>;  <span class="hljs-built_in">console</span>.log(greeting + <span class="hljs-string">&quot; &quot;</span> + name);&#125;sayHi(<span class="hljs-string">&quot;Julia&quot;</span>);</code></pre><p>Conclusion:</p><ul><li>JavaScript hoists function declarations and variable declarations to the top of the current scope.</li><li>Variable assignments are not hoisted.</li><li>Declare functions and variables at the top of your scripts, so the syntax and behavior are consistent with each other.</li></ul><p>For this quiz, you’re going to create a function called buildTriangle() that will accept an input (the triangle at its widest width) and will return the string representation of a triangle. See the example output below.</p><p>buildTriangle(10);</p><p>Returns:</p><pre><code class="hljs javascript">** ** * ** * * ** * * * ** * * * * ** * * * * * ** * * * * * * ** * * * * * * * ** * * * * * * * * *</code></pre><p>We’ve given you one function makeLine() to start with. The function takes in a line length, and builds a line of asterisks and returns the line with a newline character.</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeLine</span>(<span class="hljs-params">length</span>) </span>&#123;  <span class="hljs-keyword">var</span> line = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;= length; j++) &#123;    line += <span class="hljs-string">&quot;* &quot;</span>  &#125;  <span class="hljs-keyword">return</span> line + <span class="hljs-string">&quot;\n&quot;</span>;&#125;</code></pre><p>You will need to call this makeLine() function in buildTriangle().</p><p>This will be the most complicated program you’ve written yet, so take some time thinking through the problem before diving into the code. What tools will you need from your JavaScript tool belt? Professionals plan out their code before writing anything. Think through the steps your code will need to take and write them down in order. Then go through your list and convert each step into actual code. Good luck!</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Build A Triangle</span><span class="hljs-comment"> */</span><span class="hljs-comment">// creates a line of * for a given length</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeLine</span>(<span class="hljs-params">length</span>) </span>&#123;    <span class="hljs-keyword">var</span> line = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;= length; j++) &#123;        line += <span class="hljs-string">&quot;* &quot;</span>;    &#125;    <span class="hljs-keyword">return</span> line + <span class="hljs-string">&quot;\n&quot;</span>;&#125;<span class="hljs-comment">// your code goes here.  Make sure you call makeLine() in your own code.</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildTriangle</span>(<span class="hljs-params">lines</span>) </span>&#123;    <span class="hljs-keyword">var</span> triangle = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= lines; i++)&#123;        triangle += makeLine(i);    &#125;    <span class="hljs-keyword">return</span> triangle;&#125;<span class="hljs-comment">// test your code by uncommenting the following line</span><span class="hljs-built_in">console</span>.log(buildTriangle(<span class="hljs-number">10</span>));</code></pre><h3 id="Function-Expression"><a href="#Function-Expression" class="headerlink" title="Function Expression"></a>Function Expression</h3><p>Once you know how to declare a function, a whole new set of possibilities will open up to you.</p><p>For instance, remember how you can store anything you want in a variable? Well, in JavaScript, you can also store functions in variables. When a function is stored inside a variable it’s called a function expression.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> catSays = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">max</span>) </span>&#123;  <span class="hljs-keyword">var</span> catMessage = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;    catMessage += <span class="hljs-string">&quot;meow &quot;</span>;  &#125;  <span class="hljs-keyword">return</span> catMessage;&#125;;</code></pre><p>Notice how the function keyword no longer has a name.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> catSays = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">max</span>) </span>&#123;   <span class="hljs-comment">// code here </span>&#125;;</code></pre><p>It’s an anonymous function, a function with no name, and you’ve stored it in a variable called catSays.</p><p>And, if you try accessing the value of the variable catSays, you’ll even see the function returned back to you.</p><pre><code class="hljs javascript">catSays;</code></pre><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">max</span>) </span>&#123;  <span class="hljs-keyword">var</span> catMessage = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;    catMessage += <span class="hljs-string">&quot;meow &quot;</span>;  &#125;  <span class="hljs-keyword">return</span> catMessage;&#125;</code></pre><h3 id="Functions-as-parameters"><a href="#Functions-as-parameters" class="headerlink" title="Functions as parameters"></a>Functions as parameters</h3><p>Being able to store a function in a variable makes it really simple to pass the function into another function. A function that is passed into another function is called a callback. Let’s say you had a helloCat() function, and you wanted it to return “Hello” followed by a string of “meows” like you had with catSays. Well, rather than redoing all of your hard work, you can make helloCat() accept a callback function, and pass in catSays.</p><pre><code class="hljs javascript"><span class="hljs-comment">// function expression catSays</span><span class="hljs-keyword">var</span> catSays = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">max</span>) </span>&#123;  <span class="hljs-keyword">var</span> catMessage = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;    catMessage += <span class="hljs-string">&quot;meow &quot;</span>;  &#125;  <span class="hljs-keyword">return</span> catMessage;&#125;;<span class="hljs-comment">// function declaration helloCat accepting a callback</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloCat</span>(<span class="hljs-params">callbackFunc</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + callbackFunc(<span class="hljs-number">3</span>);&#125;<span class="hljs-comment">// pass in catSays as a callback function</span>helloCat(catSays);</code></pre><p>A function expression is when a function is assigned to a variable. And, in JavaScript, this can also happen when you pass a function inline as an argument to another function. Take the favoriteMovie example for instance:</p><pre><code class="hljs javascript"><span class="hljs-comment">// Function expression that assigns the function displayFavorite </span><span class="hljs-comment">// to the variable favoriteMovie</span><span class="hljs-keyword">var</span> favoriteMovie = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayFavorite</span>(<span class="hljs-params">movieName</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My favorite movie is &quot;</span> + movieName);&#125;;<span class="hljs-comment">// Function declaration that has two parameters: a function for displaying</span><span class="hljs-comment">// a message, along with a name of a movie</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">movies</span>(<span class="hljs-params">messageFunction, name</span>) </span>&#123;  messageFunction(name);&#125;<span class="hljs-comment">// Call the movies function, pass in the favoriteMovie function and name of movie</span>movies(favoriteMovie, <span class="hljs-string">&quot;Finding Nemo&quot;</span>);</code></pre><p>But you could have bypassed the first assignment of the function, by passing the function to the movies() function inline.</p><pre><code class="hljs javascript"><span class="hljs-comment">// Function declaration that takes in two arguments: a function for displaying</span><span class="hljs-comment">// a message, along with a name of a movie</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">movies</span>(<span class="hljs-params">messageFunction, name</span>) </span>&#123;  messageFunction(name);&#125;<span class="hljs-comment">// Call the movies function, pass in the function and name of movie</span>movies(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayFavorite</span>(<span class="hljs-params">movieName</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My favorite movie is &quot;</span> + movieName);&#125;, <span class="hljs-string">&quot;Finding Nemo&quot;</span>);</code></pre><p>This type of syntax, writing function expressions that pass a function into another function inline, is really common in JavaScript. It can be a little tricky at first, but be patient, keep practicing, and you’ll start to get the hang of it!</p><p>Using an anonymous inline function expression might seem like a very not-useful thing at first. Why define a function that can only be used once and you can’t even call it by name?</p><p>Anonymous inline function expressions are often used with function callbacks that are probably not going to be reused elsewhere. Yes, you could store the function in a variable, give it a name, and pass it in like you saw in the examples above. However, when you know the function is not going to be reused, it could save you many lines of code to just define it inline.</p><p>Conclusion:</p><p>Function Expression: When a function is assigned to a variable. The function can be named, or anonymous. Use the variable name to call a function defined in a function expression.</p><pre><code class="hljs javascript"><span class="hljs-comment">// anonymous function expression</span><span class="hljs-keyword">var</span> doSomething = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">y</span>) </span>&#123;  <span class="hljs-keyword">return</span> y + <span class="hljs-number">1</span>;&#125;;<span class="hljs-comment">// named function expression</span><span class="hljs-keyword">var</span> doSomething = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addOne</span>(<span class="hljs-params">y</span>) </span>&#123;  <span class="hljs-keyword">return</span> y + <span class="hljs-number">1</span>;&#125;;<span class="hljs-comment">// for either of the definitions above, call the function like this:</span>doSomething(<span class="hljs-number">5</span>);</code></pre><p>You can even pass a function into another function inline. This pattern is commonly used in JavaScript, and can be helpful streamlining your code.</p><pre><code class="hljs javascript"><span class="hljs-comment">// function declaration that takes in two arguments: a function for displaying</span><span class="hljs-comment">// a message, along with a name of a movie</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">movies</span>(<span class="hljs-params">messageFunction, name</span>) </span>&#123;  messageFunction(name);&#125;<span class="hljs-comment">// call the movies function, pass in the function and name of movie</span>movies(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayFavorite</span>(<span class="hljs-params">movieName</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My favorite movie is &quot;</span> + movieName);&#125;, <span class="hljs-string">&quot;Finding Nemo&quot;</span>);</code></pre><h3 id="Programming-quiz-8"><a href="#Programming-quiz-8" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>Write an anonymous function expression that stores a function in a variable called “laugh” and outputs the number of “ha”s that you pass in as an argument.</p><pre><code class="hljs javascript">laugh(<span class="hljs-number">3</span>);Returns: hahaha!</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Laugh (5-4)</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> laugh = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">times</span>) </span>&#123;    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= times; i++)&#123;    str += <span class="hljs-string">&quot;ha&quot;</span>    &#125;    <span class="hljs-keyword">return</span> str + <span class="hljs-string">&quot;!&quot;</span>;&#125;<span class="hljs-comment">/* finish the function expression */</span><span class="hljs-built_in">console</span>.log(laugh(<span class="hljs-number">2</span>));</code></pre><p>Write a named function expression that stores the function in a variable called cry and returns “boohoo!”. Don’t forget to call the function using the variable name, not the function name:</p><pre><code class="hljs javascrpt">cry();Returns: boohoo!</code></pre><pre><code class="hljs javascrpt">&#x2F;* * Programming Quiz: Cry (5-5) *&#x2F;&#x2F;&#x2F; your code goes herevar cry&#x3D; function sad() &#123;    return&quot;boohoo!&quot;;&#125;cry();</code></pre><p>Call the emotions() function so that it prints the output you see below, but instead of passing the laugh() function as an argument, pass an inline function expression instead.</p><pre><code class="hljs javascript">emotions(<span class="hljs-string">&quot;happy&quot;</span>, laugh(<span class="hljs-number">2</span>)); <span class="hljs-comment">// you can use your laugh function from the previous quizzes</span>Prints: <span class="hljs-string">&quot;I am happy, haha!&quot;</span></code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Inline Functions</span><span class="hljs-comment"> */</span><span class="hljs-comment">// don&#x27;t change this code</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">emotions</span>(<span class="hljs-params">myString, myFunc</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I am &quot;</span> + myString + <span class="hljs-string">&quot;, &quot;</span> + myFunc(<span class="hljs-number">2</span>));&#125;<span class="hljs-comment">/* finish the function expression */</span>emotions(<span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) </span>&#123;      <span class="hljs-keyword">var</span> laghter=<span class="hljs-string">&quot;&quot;</span>;      <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;        laghter +=<span class="hljs-string">&quot;ha&quot;</span>;&#125;    <span class="hljs-keyword">return</span> laghter +=<span class="hljs-string">&#x27;!&#x27;</span>;&#125;);<span class="hljs-comment">// your code goes here</span><span class="hljs-comment">// call the emotions function here and pass in an</span><span class="hljs-comment">// inline function expression</span></code></pre><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>An array is useful because it stores multiple values into a single, organized data structure. You can define a new array by listing values separated with commas between square brackets [].</p><pre><code class="hljs javascript"><span class="hljs-comment">// creates a `donuts` array with three strings</span><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;glazed&quot;</span>, <span class="hljs-string">&quot;powdered&quot;</span>, <span class="hljs-string">&quot;jelly&quot;</span>];</code></pre><p>But strings aren’t the only type of data you can store in an array. You can also store numbers, booleans… and really anything!</p><pre><code class="hljs javascript"><span class="hljs-comment">// creates a `mixedData` array with mixed data types</span><span class="hljs-keyword">var</span> mixedData = [<span class="hljs-string">&quot;abcd&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;all the things&quot;</span>];</code></pre><p>You can even store an array in an array to create a nested array!</p><pre><code class="hljs javascript"><span class="hljs-comment">// creates a `arraysInArrays` array with three arrays</span><span class="hljs-keyword">var</span> arraysInArrays = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-string">&quot;Julia&quot;</span>, <span class="hljs-string">&quot;James&quot;</span>], [<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>]];</code></pre><p>Nested arrays can be particularly hard to read, so it’s common to write them on one line, using a newline after each comma:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arraysInArrays = [  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],  [<span class="hljs-string">&quot;Julia&quot;</span>, <span class="hljs-string">&quot;James&quot;</span>],  [<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>]];</code></pre><h3 id="Programming-quiz-9"><a href="#Programming-quiz-9" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>The space western TV drama Firefly premiered in the United States on September 20, 2002. Although the show only featured fourteen episodes and was canceled during its first season, it continues to remain popular today with a growing fan base. In the show, the captain Mal, played by Nathan Fillion, leads a crew of renegades on the spaceship Serenity.</p><p>Create an array called crew to organize the Serenity’s crew and set it equal to the variables below . You don’t need to type out the actual strings, just use the provided variables.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> captain = <span class="hljs-string">&quot;Mal&quot;</span>;<span class="hljs-keyword">var</span> second = <span class="hljs-string">&quot;Zoe&quot;</span>;<span class="hljs-keyword">var</span> pilot = <span class="hljs-string">&quot;Wash&quot;</span>;<span class="hljs-keyword">var</span> companion = <span class="hljs-string">&quot;Inara&quot;</span>;<span class="hljs-keyword">var</span> mercenary = <span class="hljs-string">&quot;Jayne&quot;</span>;<span class="hljs-keyword">var</span> mechanic = <span class="hljs-string">&quot;Kaylee&quot;</span>;</code></pre><p>Then, print the crew array to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Building the Crew</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> captain = <span class="hljs-string">&quot;Mal&quot;</span>;<span class="hljs-keyword">var</span> second = <span class="hljs-string">&quot;Zoe&quot;</span>;<span class="hljs-keyword">var</span> pilot = <span class="hljs-string">&quot;Wash&quot;</span>;<span class="hljs-keyword">var</span> companion = <span class="hljs-string">&quot;Inara&quot;</span>;<span class="hljs-keyword">var</span> mercenary = <span class="hljs-string">&quot;Jayne&quot;</span>;<span class="hljs-keyword">var</span> mechanic = <span class="hljs-string">&quot;Kaylee&quot;</span>;<span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> crew= [captain, second, pilot, companion, mercenary, mechanic];<span class="hljs-built_in">console</span>.log(crew);</code></pre><p>Starting with this array of prices, change the prices of the 1st, 3rd, and 7th elements in the array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> prices = [<span class="hljs-number">1.23</span>, <span class="hljs-number">48.11</span>, <span class="hljs-number">90.11</span>, <span class="hljs-number">8.50</span>, <span class="hljs-number">9.99</span>, <span class="hljs-number">1.00</span>, <span class="hljs-number">1.10</span>, <span class="hljs-number">67.00</span>];</code></pre><p>Afterwards, print out the prices array to the console.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: The Price is Right</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> prices = [<span class="hljs-number">1.23</span>, <span class="hljs-number">48.11</span>, <span class="hljs-number">90.11</span>, <span class="hljs-number">8.50</span>, <span class="hljs-number">9.99</span>, <span class="hljs-number">1.00</span>, <span class="hljs-number">1.10</span>, <span class="hljs-number">67.00</span>];<span class="hljs-comment">// your code goes here</span>prices[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;prices[<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;prices[<span class="hljs-number">6</span>]=<span class="hljs-number">0</span>;<span class="hljs-built_in">console</span>.log(prices);</code></pre><h3 id="Array-Properties-and-Methods"><a href="#Array-Properties-and-Methods" class="headerlink" title="Array Properties and Methods"></a>Array Properties and Methods</h3><p>Array.length</p><p>You can find the length of an array by using its length property.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;glazed&quot;</span>, <span class="hljs-string">&quot;powdered&quot;</span>, <span class="hljs-string">&quot;sprinkled&quot;</span>];<span class="hljs-built_in">console</span>.log(donuts.length);</code></pre><p>What is the length of the following inventory array?</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> inventory = [  [<span class="hljs-string">&quot;gold pieces&quot;</span>, <span class="hljs-number">25</span>],  [<span class="hljs-string">&quot;belt&quot;</span>, <span class="hljs-number">4</span>],  [<span class="hljs-string">&quot;ring&quot;</span>, <span class="hljs-number">1</span>],  [<span class="hljs-string">&quot;shoes&quot;</span>, <span class="hljs-number">2</span>]];</code></pre><p>Array.push()</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;glazed&quot;</span>, <span class="hljs-string">&quot;chocolate frosted&quot;</span>, <span class="hljs-string">&quot;Boston creme&quot;</span>, <span class="hljs-string">&quot;glazed cruller&quot;</span>, <span class="hljs-string">&quot;cinnamon sugar&quot;</span>, <span class="hljs-string">&quot;sprinkled&quot;</span>];donuts.push(<span class="hljs-string">&quot;powdered&quot;</span>); <span class="hljs-comment">// pushes &quot;powdered&quot; onto the end of the `donuts` array</span></code></pre><p>Array.pop()</p><p>Alternatively, you can use the pop() method to remove elements from the end of an array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;glazed&quot;</span>, <span class="hljs-string">&quot;chocolate frosted&quot;</span>, <span class="hljs-string">&quot;Boston creme&quot;</span>, <span class="hljs-string">&quot;glazed cruller&quot;</span>, <span class="hljs-string">&quot;cinnamon sugar&quot;</span>, <span class="hljs-string">&quot;sprinkled&quot;</span>, <span class="hljs-string">&quot;powdered&quot;</span>];donuts.pop(); <span class="hljs-comment">// pops &quot;powdered&quot; off the end of the `donuts` array</span>donuts.pop(); <span class="hljs-comment">// pops &quot;sprinkled&quot; off the end of the `donuts` array</span>donuts.pop(); <span class="hljs-comment">// pops &quot;cinnamon sugar&quot; off the end of the `donuts` array</span></code></pre><p>Array.splice()</p><p>splice() is another handy method that allows you to add and remove elements from anywhere within an array.</p><p>While push() and pop() limit you to adding and removing elements from the end of an array, splice() lets you specify the index location to add new elements, as well as the number of elements you’d like to delete (if any).</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;glazed&quot;</span>, <span class="hljs-string">&quot;chocolate frosted&quot;</span>, <span class="hljs-string">&quot;Boston creme&quot;</span>, <span class="hljs-string">&quot;glazed cruller&quot;</span>];donuts.splice(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;chocolate cruller&quot;</span>, <span class="hljs-string">&quot;creme de leche&quot;</span>); <span class="hljs-comment">// removes &quot;chocolate frosted&quot; at index 1 and adds &quot;chocolate cruller&quot; and &quot;creme de leche&quot; starting at index 1</span></code></pre><p>The first argument represents the starting index from where you want to change the array, the second argument represents the numbers of elements you want to remove, and the remaining arguments represent the elements you want to add.</p><p>We’ve decided to replace some of the donuts in the donuts array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;cookies&quot;</span>, <span class="hljs-string">&quot;cinnamon sugar&quot;</span>, <span class="hljs-string">&quot;creme de leche&quot;</span>];donuts.splice(<span class="hljs-number">-2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;chocolate frosted&quot;</span>, <span class="hljs-string">&quot;glazed&quot;</span>);</code></pre><p>What does the donuts array look like after the following changes?</p><h3 id="Programming-quiz-10"><a href="#Programming-quiz-10" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>James was creating an array with the colors of the rainbow, and he forgot some colors. The standard rainbow colors are usually listed in this order:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> rainbow = [<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Yellow&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>, <span class="hljs-string">&quot;Purple&quot;</span>];</code></pre><p>but James had this:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> rainbow = [<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Blackberry&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>];</code></pre><p>Using only the splice() method, insert the missing colors into the array, and remove the color “Blackberry” by following these steps:</p><ul><li>Remove “Blackberry”</li><li>Add “Yellow” and “Green”</li><li>Add “Purple”</li></ul><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Colors of the Rainbow</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> rainbow = [<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Blackberry&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>];<span class="hljs-comment">// your code goes here</span>rainbow.splice(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>,<span class="hljs-string">&quot;Yellow&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>);rainbow.splice(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Purple&quot;</span>);<span class="hljs-built_in">console</span>.log(rainbow);</code></pre><p>In the Harry Potter novels, children attending the Hogwarts School of Witchcraft and Wizardry belong to one of four houses: Gryffindor, Hufflepuff, Ravenclaw, or Slytherin. Each year, the houses assemble a Quidditch team of seven players to compete for the coveted Quidditch Cup.</p><p>Consider the following:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> team = [<span class="hljs-string">&quot;Oliver Wood&quot;</span>, <span class="hljs-string">&quot;Angelina Johnson&quot;</span>, <span class="hljs-string">&quot;Katie Bell&quot;</span>, <span class="hljs-string">&quot;Alicia Spinnet&quot;</span>, <span class="hljs-string">&quot;George Weasley&quot;</span>, <span class="hljs-string">&quot;Fred Weasley&quot;</span>, <span class="hljs-string">&quot;Harry Potter&quot;</span>];</code></pre><p>Create a function called hasEnoughPlayers() that takes the team array as an argument and returns true or false depending on if the array has at least seven players.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Quidditch Cup</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasEnoughPlayers</span>(<span class="hljs-params">team</span>) </span>&#123;    <span class="hljs-keyword">if</span> (team.length &gt;= <span class="hljs-number">7</span>)&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;<span class="hljs-keyword">var</span> team = [<span class="hljs-string">&quot;Oliver Wood&quot;</span>, <span class="hljs-string">&quot;Angelina Johnson&quot;</span>, <span class="hljs-string">&quot;Katie Bell&quot;</span>, <span class="hljs-string">&quot;Alicia Spinnet&quot;</span>, <span class="hljs-string">&quot;George Weasley&quot;</span>, <span class="hljs-string">&quot;Fred Weasley&quot;</span>, <span class="hljs-string">&quot;Harry Potter&quot;</span>];<span class="hljs-built_in">console</span>.log(hasEnoughPlayers(team));</code></pre><p>In an earlier exercise, you created a crew array to represent Mal’s crew from the hit show Firefly.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> captain = <span class="hljs-string">&quot;Mal&quot;</span>;<span class="hljs-keyword">var</span> second = <span class="hljs-string">&quot;Zoe&quot;</span>;<span class="hljs-keyword">var</span> pilot = <span class="hljs-string">&quot;Wash&quot;</span>;<span class="hljs-keyword">var</span> companion = <span class="hljs-string">&quot;Inara&quot;</span>;<span class="hljs-keyword">var</span> mercenary = <span class="hljs-string">&quot;Jayne&quot;</span>;<span class="hljs-keyword">var</span> mechanic = <span class="hljs-string">&quot;Kaylee&quot;</span>;<span class="hljs-keyword">var</span> crew = [captain, second, pilot, companion, mercenary, mechanic];</code></pre><p>Later in the show, Mal takes on three new crew members named “Simon”, “River”, and “Book”. Use the push() method to add the three new crew members to the crew array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> doctor = <span class="hljs-string">&quot;Simon&quot;</span>;<span class="hljs-keyword">var</span> sister = <span class="hljs-string">&quot;River&quot;</span>;<span class="hljs-keyword">var</span> shepherd = <span class="hljs-string">&quot;Book&quot;</span>;</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Joining the Crew (6-6)</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> captain = <span class="hljs-string">&quot;Mal&quot;</span>;<span class="hljs-keyword">var</span> second = <span class="hljs-string">&quot;Zoe&quot;</span>;<span class="hljs-keyword">var</span> pilot = <span class="hljs-string">&quot;Wash&quot;</span>;<span class="hljs-keyword">var</span> companion = <span class="hljs-string">&quot;Inara&quot;</span>;<span class="hljs-keyword">var</span> mercenary = <span class="hljs-string">&quot;Jayne&quot;</span>;<span class="hljs-keyword">var</span> mechanic = <span class="hljs-string">&quot;Kaylee&quot;</span>;<span class="hljs-keyword">var</span> crew = [captain, second, pilot, companion, mercenary, mechanic];<span class="hljs-keyword">var</span> doctor = <span class="hljs-string">&quot;Simon&quot;</span>;<span class="hljs-keyword">var</span> sister = <span class="hljs-string">&quot;River&quot;</span>;<span class="hljs-keyword">var</span> shepherd = <span class="hljs-string">&quot;Book&quot;</span>;<span class="hljs-comment">// your code goes here</span>crew.push(doctor, sister, shepherd);<span class="hljs-built_in">console</span>.log(crew);</code></pre><p>Use the MDN Documentation to determine which of these methods would be best for reversing elements in this array:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reverseMe = [<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>];</code></pre><p>What would be the best array method to sort the elements in this array:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sortMe = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>];</code></pre><p>Consider the following array, removeFirstElement:</p><blockquote><p>var removeFirstElement = [“a”, “b”, “c”];</p></blockquote><p>Let’s say that you want to modify (i.e., mutate) removeFirstElement by removing the first element within it. Which method(s) could you use?</p><blockquote><p>shift()<br>splice()</p></blockquote><p>What method would be best for changing this array into a string?</p><blockquote><p>var turnMeIntoAString = [“U”, “d”, “a”, “c”, “i”, “t”, “y”];<br>join()</p></blockquote><h3 id="Traverse-array"><a href="#Traverse-array" class="headerlink" title="Traverse array"></a>Traverse array</h3><p>Once the data is in the array, you want to be able to efficiently access and manipulate each element in the array without writing repetitive code for each element.</p><p>For instance, if this was our original donuts array:</p><blockquote><p>var donuts = [“jelly donut”, “chocolate donut”, “glazed donut”];</p></blockquote><p>and we decided to make all the same donut types, but only sell them as donut holes instead, we could write the following code:</p><blockquote><p>donuts[0] += “ hole”;<br>donuts[1] += “ hole”;<br>donuts[2] += “ hole”;<br>donuts array: [“jelly donut hole”, “chocolate donut hole”, “glazed donut hole”]</p></blockquote><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;jelly donut&quot;</span>, <span class="hljs-string">&quot;chocolate donut&quot;</span>, <span class="hljs-string">&quot;glazed donut&quot;</span>];<span class="hljs-comment">// the variable `i` is used to step through each element in the array</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; donuts.length; i++) &#123;    donuts[i] += <span class="hljs-string">&quot; hole&quot;</span>;    donuts[i] = donuts[i].toUpperCase();&#125;</code></pre><h3 id="The-forEach-loop"><a href="#The-forEach-loop" class="headerlink" title="The forEach() loop"></a>The forEach() loop</h3><p>Arrays have a set of special methods to help you iterate over and perform operations on collections of data. You can view the MDN Documentation list of Array methods here, but a couple big ones to know are the forEach() and map() methods.</p><p>The forEach() method gives you an alternative way to iterate over an array, and manipulate each element in the array with an inline function expression.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;jelly donut&quot;</span>, <span class="hljs-string">&quot;chocolate donut&quot;</span>, <span class="hljs-string">&quot;glazed donut&quot;</span>];donuts.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">donut</span>) </span>&#123;  donut += <span class="hljs-string">&quot; hole&quot;</span>;  donut = donut.toUpperCase();  <span class="hljs-built_in">console</span>.log(donut);&#125;);</code></pre><p>Notice that the forEach() method iterates over the array without the need of an explicitly defined index. In the example above, donut corresponds to the element in the array itself. This is different from a for or while loop where an index is used to access each element in the array:</p><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; donuts.length; i++) &#123;  donuts[i] += <span class="hljs-string">&quot; hole&quot;</span>;  donuts[i] = donuts[i].toUpperCase();  <span class="hljs-built_in">console</span>.log(donuts[i]);&#125;</code></pre><p>The function that you pass to the forEach() method can take up to three parameters. In the video, these are called element, index, and array, but you can call them whatever you like.</p><p>The forEach() method will call this function once for each element in the array (hence the name forEach.) Each time, it will call the function with different arguments. The element parameter will get the value of the array element. The index parameter will get the index of the element (starting with zero). The array parameter will get a reference to the whole array, which is handy if you want to modify the elements.</p><p>Here’s another example:</p><pre><code class="hljs javascript">words = [<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;in&quot;</span>, <span class="hljs-string">&quot;hat&quot;</span>];words.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word, num, all</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Word &quot;</span> + num + <span class="hljs-string">&quot; in &quot;</span> + all.toString() + <span class="hljs-string">&quot; is &quot;</span> + word);&#125;);</code></pre><h3 id="Programming-quiz-11"><a href="#Programming-quiz-11" class="headerlink" title="Programming quiz"></a>Programming quiz</h3><p>Use the array’s forEach() method to loop over the following array and add 100 to each of the values if the value is divisible by 3.</p><p>var test = [12, 929, 11, 3, 199, 1000, 7, 1, 24, 37, 4, 19, 300, 3775, 299, 36, 209, 148, 169, 299, 6, 109, 20, 58, 139, 59, 3, 1, 139];</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Another Type of Loop (6-8)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Use the existing `test` variable and write a `forEach` loop </span><span class="hljs-comment"> * that adds 100 to each number that is divisible by 3.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Things to note:</span><span class="hljs-comment"> *  - use an `if` statement to verify code is divisible by 3</span><span class="hljs-comment"> *  - use `console.log` to print the `test` variable when you&#x27;re finished looping</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> test = [<span class="hljs-number">12</span>, <span class="hljs-number">929</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">199</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">24</span>, <span class="hljs-number">37</span>, <span class="hljs-number">4</span>,            <span class="hljs-number">19</span>, <span class="hljs-number">300</span>, <span class="hljs-number">3775</span>, <span class="hljs-number">299</span>, <span class="hljs-number">36</span>, <span class="hljs-number">209</span>, <span class="hljs-number">148</span>, <span class="hljs-number">169</span>, <span class="hljs-number">299</span>,            <span class="hljs-number">6</span>, <span class="hljs-number">109</span>, <span class="hljs-number">20</span>, <span class="hljs-number">58</span>, <span class="hljs-number">139</span>, <span class="hljs-number">59</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">139</span>];<span class="hljs-comment">// Write your code here</span>test.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num, index, array</span>)</span>&#123;  <span class="hljs-keyword">if</span>(num % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>)&#123;    array[index] = num += <span class="hljs-number">100</span>;  &#125;&#125;);<span class="hljs-built_in">console</span>.log(test);</code></pre><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Using forEach() will not be useful if you want to permanently modify the original array. forEach() always returns undefined. However, creating a new array from an existing array is simple with the powerful map() method.</p><p>With the map() method, you can take an array, perform some operation on each element of the array, and return a new array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [<span class="hljs-string">&quot;jelly donut&quot;</span>, <span class="hljs-string">&quot;chocolate donut&quot;</span>, <span class="hljs-string">&quot;glazed donut&quot;</span>];<span class="hljs-keyword">var</span> improvedDonuts = donuts.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">donut</span>) </span>&#123;  donut += <span class="hljs-string">&quot; hole&quot;</span>;  donut = donut.toUpperCase();  <span class="hljs-keyword">return</span> donut;&#125;);</code></pre><blockquote><p>donuts array: [“jelly donut”, “chocolate donut”, “glazed donut”]<br>improvedDonuts array: [“JELLY DONUT HOLE”, “CHOCOLATE DONUT HOLE”, “GLAZED DONUT HOLE”]</p></blockquote><p>Oh man, did you just see that? The map() method accepts one argument, a function that will be used to manipulate each element in the array. In the above example, we used a function expression to pass that function into map(). This function is taking in one argument, donut which corresponds to each element in the donuts array. You no longer need to iterate over the indices anymore. map() does all that work for you.</p><p>Use the map() method to take the array of bill amounts shown below, and create a second array of numbers called totals that shows the bill amounts with a 15% tip added.</p><blockquote><p>var bills = [50.23, 19.12, 34.01, 100.11, 12.15, 9.90, 29.11, 12.99, 10.00, 99.22, 102.20, 100.10, 6.77, 2.22];</p></blockquote><p>Print out the new totals array using console.log.</p><blockquote><p>TIP: Check out the toFixed() method for numbers to help with rounding the values to a maximum of 2 decimal places. Note, that the method returns a string to maintain the “fixed” format of the number. So, if you want to convert the string back to a number, you can cast it or convert it back to a number:</p></blockquote><h3 id="Arrays-in-Arrays"><a href="#Arrays-in-Arrays" class="headerlink" title="Arrays in Arrays"></a>Arrays in Arrays</h3><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donutBox = [  [<span class="hljs-string">&quot;glazed&quot;</span>, <span class="hljs-string">&quot;chocolate glazed&quot;</span>, <span class="hljs-string">&quot;cinnamon&quot;</span>],  [<span class="hljs-string">&quot;powdered&quot;</span>, <span class="hljs-string">&quot;sprinkled&quot;</span>, <span class="hljs-string">&quot;glazed cruller&quot;</span>],  [<span class="hljs-string">&quot;chocolate cruller&quot;</span>, <span class="hljs-string">&quot;Boston creme&quot;</span>, <span class="hljs-string">&quot;creme de leche&quot;</span>]];<span class="hljs-comment">// here, donutBox.length refers to the number of rows of donuts</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> row = <span class="hljs-number">0</span>; row &lt; donutBox.length; row++) &#123;  <span class="hljs-built_in">console</span>.log(donutBox[row]);&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> row = <span class="hljs-number">0</span>; row &lt; donutBox.length; row++) &#123;  <span class="hljs-comment">// here, donutBox[row].length refers to the length of the donut array currently being looped over</span>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> column = <span class="hljs-number">0</span>; column &lt; donutBox[row].length; column++) &#123;    <span class="hljs-built_in">console</span>.log(donutBox[row][column]);  &#125;&#125;</code></pre><p>Use a nested for loop to take the numbers array below and replace all of the values that are divisible by 2 (even numbers) with the string “even” and all other numbers with the string “odd”.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Nested Numbers (6-10)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *   - The `numbers` variable is an array of arrays.</span><span class="hljs-comment"> *   - Use a nested `for` loop to cycle through `numbers`.</span><span class="hljs-comment"> *   - Convert each even number to the string &quot;even&quot;</span><span class="hljs-comment"> *   - Convert each odd number to the string &quot;odd&quot;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> numbers = [    [<span class="hljs-number">243</span>, <span class="hljs-number">12</span>, <span class="hljs-number">23</span>, <span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">45</span>, <span class="hljs-number">78</span>, <span class="hljs-number">66</span>, <span class="hljs-number">223</span>, <span class="hljs-number">3</span>],    [<span class="hljs-number">34</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">553</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">66</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>],    [<span class="hljs-number">67</span>, <span class="hljs-number">56</span>, <span class="hljs-number">45</span>, <span class="hljs-number">553</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">5</span>, <span class="hljs-number">428</span>, <span class="hljs-number">452</span>, <span class="hljs-number">3</span>],    [<span class="hljs-number">12</span>, <span class="hljs-number">31</span>, <span class="hljs-number">55</span>, <span class="hljs-number">445</span>, <span class="hljs-number">79</span>, <span class="hljs-number">44</span>, <span class="hljs-number">674</span>, <span class="hljs-number">224</span>, <span class="hljs-number">4</span>, <span class="hljs-number">21</span>],    [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">52</span>, <span class="hljs-number">13</span>, <span class="hljs-number">51</span>, <span class="hljs-number">44</span>, <span class="hljs-number">1</span>, <span class="hljs-number">67</span>, <span class="hljs-number">5</span>],    [<span class="hljs-number">5</span>, <span class="hljs-number">65</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">43</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4424</span>],    [<span class="hljs-number">74</span>, <span class="hljs-number">532</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">35</span>, <span class="hljs-number">17</span>, <span class="hljs-number">89</span>, <span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">66</span>],    [<span class="hljs-number">53</span>, <span class="hljs-number">6</span>, <span class="hljs-number">89</span>, <span class="hljs-number">10</span>, <span class="hljs-number">23</span>, <span class="hljs-number">52</span>, <span class="hljs-number">111</span>, <span class="hljs-number">44</span>, <span class="hljs-number">109</span>, <span class="hljs-number">80</span>],    [<span class="hljs-number">67</span>, <span class="hljs-number">6</span>, <span class="hljs-number">53</span>, <span class="hljs-number">537</span>, <span class="hljs-number">2</span>, <span class="hljs-number">168</span>, <span class="hljs-number">16</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>],    [<span class="hljs-number">76</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">73</span>, <span class="hljs-number">77</span>, <span class="hljs-number">100</span>, <span class="hljs-number">56</span>, <span class="hljs-number">100</span>]];<span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> row = <span class="hljs-number">0</span>; row &lt; numbers.length; row++) &#123;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> column = <span class="hljs-number">0</span>; column &lt; numbers[row].length; column++) &#123;    <span class="hljs-keyword">if</span> (numbers[row][column] % <span class="hljs-number">2</span> ===<span class="hljs-number">0</span>)&#123;        numbers[row][column] = <span class="hljs-string">&quot;even&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        numbers[row][column] = <span class="hljs-string">&quot;odd&quot;</span>;    &#125;  &#125;&#125;</code></pre><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>Primitive data types: strings, numbers, booleans, undefined, null</p><p>typeof is an operator that returns the name of the data type that follows it:</p><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment">// returns &quot;string&quot;</span><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span> <span class="hljs-comment">// returns &quot;boolean&quot;</span><span class="hljs-keyword">typeof</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <span class="hljs-comment">// returns &quot;object&quot; (Arrays are a type of object)</span><span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params"></span>) </span>&#123; &#125; <span class="hljs-comment">// returns &quot;function&quot;</span></code></pre><p>Using the umbrella example from the previous video, see if you can follow the example open() method and create the close() method. It’s alright if you have trouble at first! We’ll go into more detail later in this lesson.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> umbrella = &#123;  color: <span class="hljs-string">&quot;pink&quot;</span>,  isOpen: <span class="hljs-literal">false</span>,  open: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">if</span> (umbrella.isOpen === <span class="hljs-literal">true</span>) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;The umbrella is already opened!&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;      umbrella.isOpen = <span class="hljs-literal">true</span>;      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Julia opens the umbrella!&quot;</span>;    &#125;   &#125;&#125;;</code></pre><p>TIP: Remember to put all of your object’s properties and methods inside curly braces: var myObject = { greeting: “hello”, name: “Julia” };. Also, remember that an object is just another data type. Just like how you would put a semicolon after a string variable declaration var myString = “hello”;, don’t forget to put a semi-colon at the end of your object’s declaration.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Umbrella</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> umbrella = &#123;    color: <span class="hljs-string">&quot;pink&quot;</span>,    isOpen: <span class="hljs-literal">true</span>,    open: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (umbrella.isOpen === <span class="hljs-literal">true</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;The umbrella is already opened!&quot;</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            umbrella.isOpen = <span class="hljs-literal">true</span>;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Julia opens the umbrella!&quot;</span>;        &#125;    &#125;,    close: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (umbrella.isOpen === <span class="hljs-literal">false</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;The umbrella is already closed!&quot;</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            umbrella.isOpen = <span class="hljs-literal">false</span>;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Julia closes the umbrella!&quot;</span>;        &#125;    &#125;,&#125;;</code></pre><h3 id="Object-literal-notation"><a href="#Object-literal-notation" class="headerlink" title="Object-literal notation"></a>Object-literal notation</h3><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sister = &#123;  name: <span class="hljs-string">&quot;Sarah&quot;</span>,  age: <span class="hljs-number">23</span>,  parents: [ <span class="hljs-string">&quot;alice&quot;</span>, <span class="hljs-string">&quot;andy&quot;</span> ],  siblings: [<span class="hljs-string">&quot;julia&quot;</span>],  favoriteColor: <span class="hljs-string">&quot;purple&quot;</span>,  pets: <span class="hljs-literal">true</span>&#125;;</code></pre><p>The syntax you see above is called object-literal notation. There are some important things you need to remember when you’re structuring an object literal:</p><ul><li>The “key” (representing a property or method name) and its “value” are separated from each other by a colon</li><li>The key: value pairs are separated from each other by commas</li><li>The entire object is wrapped inside curly braces { }.</li></ul><p>And, kind of like how you can look up a word in the dictionary to find its definition, the key in a key:value pair allows you to look up a piece of information about an object. Here’s are a couple examples of how you can retrieve information about my sister’s parents using the object you created.</p><pre><code class="hljs javascript"><span class="hljs-comment">// two equivalent ways to use the key to return its value</span>sister[<span class="hljs-string">&quot;parents&quot;</span>] <span class="hljs-comment">// returns [ &quot;alice&quot;, &quot;andy&quot; ]</span>sister.parents <span class="hljs-comment">// also returns [&quot;alice&quot;, &quot;andy&quot;]</span></code></pre><p>Using sister[“parents”] is called bracket notation (because of the brackets!) and using sister.parents is called dot notation (because of the dot!).</p><p>The sister object above contains a bunch of properties about my sister, but doesn’t really say what my sister does. For instance, let’s say my sister likes to paint. You might have a paintPicture() method that returns “Sarah paints a picture!” whenever you call it. The syntax for this is pretty much exactly the same as how you defined the properties of the object. The only difference is, the value in the key:value pair will be a function.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sister = &#123;  name: <span class="hljs-string">&quot;Sarah&quot;</span>,  age: <span class="hljs-number">23</span>,  parents: [ <span class="hljs-string">&quot;alice&quot;</span>, <span class="hljs-string">&quot;andy&quot;</span> ],  siblings: [<span class="hljs-string">&quot;julia&quot;</span>],  favoriteColor: <span class="hljs-string">&quot;purple&quot;</span>,  pets: <span class="hljs-literal">true</span>,  paintPicture: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Sarah paints!&quot;</span>; &#125;&#125;;sister.paintPicture();</code></pre><h3 id="Variable-naming-conventions"><a href="#Variable-naming-conventions" class="headerlink" title="Variable naming conventions"></a>Variable naming conventions</h3><p>Feel free to use upper and lowercase numbers and letters, but don’t start your property name with a number. You don’t need to wrap the string in quotes! If it’s a multi-word property, use camel case. Don’t use hyphens in your property names</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> richard = &#123;  <span class="hljs-string">&quot;1stSon&quot;</span>: <span class="hljs-literal">true</span>;  <span class="hljs-string">&quot;loves-snow&quot;</span>: <span class="hljs-literal">true</span>;&#125;;richard<span class="hljs-number">.1</span>stSon <span class="hljs-comment">// error</span>richard.loves-snow <span class="hljs-comment">// error</span></code></pre><h3 id="Programmming-quiz"><a href="#Programmming-quiz" class="headerlink" title="Programmming quiz"></a>Programmming quiz</h3><p>Create a breakfast object to represent the following menu item:</p><blockquote><p>The Lumberjack - $9.95<br>eggs, sausage, toast, hashbrowns, pancakes</p></blockquote><p>The object should contain properties for the name, price, and ingredients.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Menu Items (7-2)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> breakfast = &#123;    name:<span class="hljs-string">&quot;The Lumberjack&quot;</span>,    price:<span class="hljs-number">9.95</span>,    ingredients:[<span class="hljs-string">&quot;eggs&quot;</span>, <span class="hljs-string">&quot;sausage&quot;</span>, <span class="hljs-string">&quot;toast&quot;</span>, <span class="hljs-string">&quot;hashbrowns&quot;</span>, <span class="hljs-string">&quot;pancakes&quot;</span>]&#125;</code></pre><p>Using the given object:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> savingsAccount = &#123;  balance: <span class="hljs-number">1000</span>,  interestRatePercent: <span class="hljs-number">1</span>,  deposit: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addMoney</span>(<span class="hljs-params">amount</span>) </span>&#123;    <span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-number">0</span>) &#123;      savingsAccount.balance += amount;    &#125;  &#125;,  withdraw: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeMoney</span>(<span class="hljs-params">amount</span>) </span>&#123;    <span class="hljs-keyword">var</span> verifyBalance = savingsAccount.balance - amount;    <span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-number">0</span> &amp;&amp; verifyBalance &gt;= <span class="hljs-number">0</span>) &#123;      savingsAccount.balance -= amount;    &#125;  &#125;&#125;;</code></pre><p>add a printAccountSummary() method that returns the following account message:</p><blockquote><p>Welcome!<br>Your balance is currently $1000 and your interest rate is 1%.</p></blockquote><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Bank Accounts 1 (7-3)</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> savingsAccount = &#123;    balance: <span class="hljs-number">1000</span>,    interestRatePercent: <span class="hljs-number">1</span>,    deposit: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addMoney</span>(<span class="hljs-params">amount</span>) </span>&#123;        <span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-number">0</span>) &#123;            savingsAccount.balance += amount;        &#125;    &#125;,    withdraw: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeMoney</span>(<span class="hljs-params">amount</span>) </span>&#123;        <span class="hljs-keyword">var</span> verifyBalance = savingsAccount.balance - amount;        <span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-number">0</span> &amp;&amp; verifyBalance &gt;= <span class="hljs-number">0</span>) &#123;            savingsAccount.balance -= amount;        &#125;    &#125;,    <span class="hljs-comment">// your code goes here</span>    printAccountSummary() &#123;        <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;Welcome!\nYour balance is currently $&quot;</span>+savingsAccount.balance+<span class="hljs-string">&quot; and your interest rate is &quot;</span>+ savingsAccount.interestRatePercent+<span class="hljs-string">&quot;%.&quot;</span>);    &#125;&#125;;<span class="hljs-built_in">console</span>.log(savingsAccount.printAccountSummary());</code></pre><p>Create an object called facebookProfile. The object should have 3 properties:</p><ul><li><p>your name</p></li><li><p>the number of friends you have, and</p></li><li><p>an array of messages you’ve posted (as strings)</p></li><li><p>The object should also have 4 methods:</p></li><li><p>postMessage(message) - adds a new message string to the array</p></li><li><p>deleteMessage(index) - removes the message corresponding to the index provided</p></li><li><p>addFriend() - increases the friend count by 1</p></li><li><p>removeFriend() - decreases the friend count by 1</p></li></ul><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Facebook Friends (7-5)</span><span class="hljs-comment"> */</span><span class="hljs-comment">// your code goes here</span><span class="hljs-keyword">var</span> facebookProfile = &#123;  name: <span class="hljs-string">&quot;James&quot;</span>,  friends: <span class="hljs-number">1</span>,  messages: [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>],  postMessage: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addMessage</span>(<span class="hljs-params">message</span>)</span>&#123;      facebookProfile.messages.push(message);  &#125;,  deleteMessage: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeMessage</span>(<span class="hljs-params">index</span>)</span>&#123;      <span class="hljs-keyword">if</span> (facebookProfile.messages.length &gt; <span class="hljs-number">0</span>)&#123;          facebookProfile.messages.splice(index,<span class="hljs-number">1</span>);      &#125;  &#125;,  addFriend: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;      facebookProfile.friends++;  &#125;,  removeFriend: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;      facebookProfile.friends--;  &#125;,&#125;;</code></pre><p>Here is an array of donut objects.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> donuts = [  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Jelly&quot;</span>, <span class="hljs-attr">cost</span>: <span class="hljs-number">1.22</span> &#125;,  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Chocolate&quot;</span>, <span class="hljs-attr">cost</span>: <span class="hljs-number">2.45</span> &#125;,  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Cider&quot;</span>, <span class="hljs-attr">cost</span>: <span class="hljs-number">1.59</span> &#125;,  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Boston Cream&quot;</span>, <span class="hljs-attr">cost</span>: <span class="hljs-number">5.99</span> &#125;];</code></pre><p>Use the forEach() method to loop over the array and print out the following donut summaries using console.log.</p><pre><code class="hljs javascript">Jelly donuts cost $<span class="hljs-number">1.22</span> eachChocolate donuts cost $<span class="hljs-number">2.45</span> eachCider donuts cost $<span class="hljs-number">1.59</span> eachBoston Cream donuts cost $<span class="hljs-number">5.99</span> each</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Donuts Revisited (7-6)</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> donuts = [    &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Jelly&quot;</span>, <span class="hljs-attr">cost</span>: <span class="hljs-number">1.22</span> &#125;,    &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Chocolate&quot;</span>, <span class="hljs-attr">cost</span>: <span class="hljs-number">2.45</span> &#125;,    &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Cider&quot;</span>, <span class="hljs-attr">cost</span>: <span class="hljs-number">1.59</span> &#125;,    &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Boston Cream&quot;</span>, <span class="hljs-attr">cost</span>: <span class="hljs-number">5.99</span> &#125;];<span class="hljs-comment">// your code goes here</span>donuts.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">donut</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(donut.type + <span class="hljs-string">&quot; donuts cost $&quot;</span> + donut.cost + <span class="hljs-string">&quot; each&quot;</span>);&#125;);</code></pre><h2 id="Syntax-with-ES6-and-more"><a href="#Syntax-with-ES6-and-more" class="headerlink" title="Syntax with ES6 and more"></a>Syntax with ES6 and more</h2><h3 id="Let-and-Const"><a href="#Let-and-Const" class="headerlink" title="Let and Const"></a>Let and Const</h3><p>There are now two new ways to declare variables in JavaScript: let and const.</p><p>Up until now, the only way to declare a variable in JavaScript was to use the keyword var. To understand why let and const were added, it’s probably best to look at an example of when using var can get us into trouble.</p><p>Take a look at the following code.</p><p>What do you expect to be the output from running getClothing(false)?</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getClothing</span>(<span class="hljs-params">isCold</span>) </span>&#123;  <span class="hljs-keyword">if</span> (isCold) &#123;    <span class="hljs-keyword">var</span> freezing = <span class="hljs-string">&#x27;Grab a jacket!&#x27;</span>;  &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">var</span> hot = <span class="hljs-string">&#x27;It’s a shorts kind of day.&#x27;</span>;    <span class="hljs-built_in">console</span>.log(freezing);  &#125;&#125;</code></pre><p>Hoisting is a result of how JavaScript is interpreted by your browser. Essentially, before any JavaScript code is executed, all variables are “hoisted”, which means they’re raised to the top of the function scope. So at run-time, the getClothing() function actually looks more like this…</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getClothing</span>(<span class="hljs-params">isCold</span>) </span>&#123;  <span class="hljs-keyword">var</span> freezing, hot;  <span class="hljs-keyword">if</span> (isCold) &#123;    freezing = <span class="hljs-string">&#x27;Grab a jacket!&#x27;</span>;  &#125; <span class="hljs-keyword">else</span> &#123;    hot = <span class="hljs-string">&#x27;It’s a shorts kind of day.&#x27;</span>;    <span class="hljs-built_in">console</span>.log(freezing);  &#125;&#125;</code></pre><p>Variables declared with let and const eliminate this specific issue of hoisting because they’re scoped to the block, not to the function. Previously, when you used var, variables were either scoped globally or locally to an entire function scope.</p><p>If a variable is declared using let or const inside a block of code (denoted by curly braces { }), then the variable is stuck in what is known as the temporal dead zone until the variable’s declaration is processed. This behavior prevents variables from being accessed only until after they’ve been declared.</p><p>What do you expect to be the output from running getClothing(false)?</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getClothing</span>(<span class="hljs-params">isCold</span>) </span>&#123;  <span class="hljs-keyword">if</span> (isCold) &#123;    <span class="hljs-keyword">const</span> freezing = <span class="hljs-string">&#x27;Grab a jacket!&#x27;</span>;  &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">const</span> hot = <span class="hljs-string">&#x27;It’s a shorts kind of day.&#x27;</span>;    <span class="hljs-built_in">console</span>.log(freezing);  &#125;&#125;</code></pre><p>let and const also have some other interesting properties.</p><ul><li>Variables declared with let can be reassigned, but can’t be redeclared in the same scope.</li><li>Variables declared with const must be assigned an initial value, but can’t be redeclared in the same scope, and can’t be reassigned.</li></ul><p>Is there any reason to use var anymore? Not really.</p><p>There are some arguments that can be made for using var in situations where you want to globally define variables, but this is often considered bad practice and should be avoided. From now on, we suggest ditching var in place of using let and const.</p><h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><p>Prior to ES6, the old way to concatenate strings together was by using the string concatenation operator ( + ).</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> student = &#123;  name: <span class="hljs-string">&#x27;Richard Kalehoff&#x27;</span>,  guardian: <span class="hljs-string">&#x27;Mr. Kalehoff&#x27;</span>&#125;;<span class="hljs-keyword">const</span> teacher = &#123;  name: <span class="hljs-string">&#x27;Mrs. Wilson&#x27;</span>,  room: <span class="hljs-string">&#x27;N231&#x27;</span>&#125;<span class="hljs-keyword">let</span> message = student.name + <span class="hljs-string">&#x27; please see &#x27;</span> + teacher.name + <span class="hljs-string">&#x27; in &#x27;</span> + teacher.room + <span class="hljs-string">&#x27; to pick up your report card.&#x27;</span>;</code></pre><p>This works alright, but it gets more complicated when you need to build multi-line strings.</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> note = teacher.name + <span class="hljs-string">&#x27;,\n\n&#x27;</span> +  <span class="hljs-string">&#x27;Please excuse &#x27;</span> + student.name + <span class="hljs-string">&#x27;.\n&#x27;</span> +  <span class="hljs-string">&#x27;He is recovering from the flu.\n\n&#x27;</span> +  <span class="hljs-string">&#x27;Thank you,\n&#x27;</span> +  student.guardian;</code></pre><p>Template literals are essentially string literals that include embedded expressions.</p><p>Denoted with backticks ( `` ) instead of single quotes ( ‘’ ) or double quotes ( “” ), template literals can contain placeholders which are represented using ${expression}. This makes it much easier to build strings.</p><p>Here’s the previous examples using template literals.</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message = <span class="hljs-string">`<span class="hljs-subst">$&#123;student.name&#125;</span> please see <span class="hljs-subst">$&#123;teacher.name&#125;</span> in <span class="hljs-subst">$&#123;teacher.room&#125;</span> to pick up your report card.`</span>;</code></pre><p>By using template literals, you can drop the quotes along with the string concatenation operator. Also, you can reference the object’s properties inside expressions.</p><p>Here, you try. Change the greeting string below to use a template literal. Also, feel free to swap in your name for the placeholder.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Instructions: Change the `greeting` string to use a template literal.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">const</span> myName = <span class="hljs-string">&#x27;Simon&#x27;</span>;<span class="hljs-keyword">const</span> greeting = <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;myName&#125;</span>`</span>;<span class="hljs-built_in">console</span>.log(greeting);</code></pre><p>Here’s where template literals really shine. In the animation above, the quotes and string concatenation operator have been dropped, as well as the newline characters ( \n ). That’s because template literals also preserve newlines as part of the string!</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> student = &#123;  name: <span class="hljs-string">&#x27;Richard Kalehoff&#x27;</span>,  guardian: <span class="hljs-string">&#x27;Mr. Kalehoff&#x27;</span>&#125;;<span class="hljs-keyword">const</span> teacher = &#123;  name: <span class="hljs-string">&#x27;Mrs. Wilson&#x27;</span>,  room: <span class="hljs-string">&#x27;N231&#x27;</span>&#125;<span class="hljs-comment">/*</span><span class="hljs-comment">let note = teacher.name + &#x27;,\n\n&#x27; +</span><span class="hljs-comment">  &#x27;Please excuse &#x27; + student.name + &#x27;.\n&#x27; +</span><span class="hljs-comment">  &#x27;He is recovering from the flu.\n\n&#x27; +</span><span class="hljs-comment">  &#x27;Thank you,\n&#x27; +</span><span class="hljs-comment">  student.guardian;</span><span class="hljs-comment">*/</span><span class="hljs-keyword">let</span> note = <span class="hljs-string">`<span class="hljs-subst">$&#123;teacher.name&#125;</span>,</span><span class="hljs-string"></span><span class="hljs-string">Please excuse <span class="hljs-subst">$&#123;student.name&#125;</span>.</span><span class="hljs-string">He is recovering from the flu.</span><span class="hljs-string"></span><span class="hljs-string">Thank you,</span><span class="hljs-string"><span class="hljs-subst">$&#123;student.gurdian&#125;</span>`</span>;</code></pre><p>Modify the createAnimalTradingCardHTML() function to use a template literal for cardHTML.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Build an HTML Fragment (1-2)</span><span class="hljs-comment"> */</span><span class="hljs-keyword">const</span> cheetah = &#123;    name: <span class="hljs-string">&#x27;Cheetah&#x27;</span>,    scientificName: <span class="hljs-string">&#x27;Acinonyx jubatus&#x27;</span>,    lifespan: <span class="hljs-string">&#x27;10-12 years&#x27;</span>,    speed: <span class="hljs-string">&#x27;68-75 mph&#x27;</span>,    diet: <span class="hljs-string">&#x27;carnivore&#x27;</span>,    summary: <span class="hljs-string">&#x27;Fastest mammal on land, the cheetah can reach speeds of 60 or perhaps even 70 miles (97 or 113 kilometers) an hour over short distances. It usually chases its prey at only about half that speed, however. After a chase, a cheetah needs half an hour to catch its breath before it can eat.&#x27;</span>,    fact: <span class="hljs-string">&#x27;Cheetahs have “tear marks” that run from the inside corners of their eyes down to the outside edges of their mouth.&#x27;</span>&#125;;<span class="hljs-comment">// creates an animal trading card</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createAnimalTradingCardHTML</span>(<span class="hljs-params">animal</span>) </span>&#123;    <span class="hljs-keyword">const</span> cardHTML = <span class="hljs-string">&#x27;&lt;div class=&quot;card&quot;&gt;&#x27;</span> +        <span class="hljs-string">&#x27;&lt;h3 class=&quot;name&quot;&gt;&#x27;</span> + animal.name + <span class="hljs-string">&#x27;&lt;/h3&gt;&#x27;</span> +        <span class="hljs-string">&#x27;&lt;img src=&quot;&#x27;</span> + animal.name + <span class="hljs-string">&#x27;.jpg&quot; alt=&quot;&#x27;</span> + animal.name +<span class="hljs-string">&#x27;&quot; class=&quot;picture&quot;&gt;&#x27;</span> +        <span class="hljs-string">&#x27;&lt;div class=&quot;description&quot;&gt;&#x27;</span> +            <span class="hljs-string">&#x27;&lt;p class=&quot;fact&quot;&gt;&#x27;</span> + animal.fact + <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span> +            <span class="hljs-string">&#x27;&lt;ul class=&quot;details&quot;&gt;&#x27;</span> +                <span class="hljs-string">&#x27;&lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Scientific Name&lt;/span&gt;: &#x27;</span> + animal.scientificName + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span> +                <span class="hljs-string">&#x27;&lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Average Lifespan&lt;/span&gt;: &#x27;</span> + animal.lifespan + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span> +                <span class="hljs-string">&#x27;&lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Average Speed&lt;/span&gt;: &#x27;</span> + animal.speed + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span> +                <span class="hljs-string">&#x27;&lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Diet&lt;/span&gt;: &#x27;</span> + animal.diet + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span> +            <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span> +            <span class="hljs-string">&#x27;&lt;p class=&quot;brief&quot;&gt;&#x27;</span> + animal.summary + <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span> +        <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span> +    <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;    <span class="hljs-keyword">return</span> cardHTML;&#125;<span class="hljs-built_in">console</span>.log(createAnimalTradingCardHTML(cheetah));</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Build an HTML Fragment (1-2)</span><span class="hljs-comment"> */</span><span class="hljs-keyword">const</span> cheetah = &#123;    name: <span class="hljs-string">&#x27;Cheetah&#x27;</span>,    scientificName: <span class="hljs-string">&#x27;Acinonyx jubatus&#x27;</span>,    lifespan: <span class="hljs-string">&#x27;10-12 years&#x27;</span>,    speed: <span class="hljs-string">&#x27;68-75 mph&#x27;</span>,    diet: <span class="hljs-string">&#x27;carnivore&#x27;</span>,    summary: <span class="hljs-string">&#x27;Fastest mammal on land, the cheetah can reach speeds of 60 or perhaps even 70 miles (97 or 113 kilometers) an hour over short distances. It usually chases its prey at only about half that speed, however. After a chase, a cheetah needs half an hour to catch its breath before it can eat.&#x27;</span>,    fact: <span class="hljs-string">&#x27;Cheetahs have “tear marks” that run from the inside corners of their eyes down to the outside edges of their mouth.&#x27;</span>&#125;;<span class="hljs-comment">// creates an animal trading card</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createAnimalTradingCardHTML</span>(<span class="hljs-params">animal</span>) </span>&#123;    <span class="hljs-keyword">const</span> cardHTML = <span class="hljs-string">`&lt;div class=&quot;card&quot;&gt;</span><span class="hljs-string">        &lt;h3 class=&quot;name&quot;&gt;<span class="hljs-subst">$&#123;animal.name&#125;</span>&lt;/h3&gt;</span><span class="hljs-string">        &lt;img src=&quot;<span class="hljs-subst">$&#123;animal.name&#125;</span>.jpg&quot; alt=&quot;<span class="hljs-subst">$&#123;animal.name&#125;</span>&quot; class=&quot;picture&quot;&gt;</span><span class="hljs-string">        &lt;div class=&quot;description&quot;&gt;</span><span class="hljs-string">            &lt;p class=&quot;fact&quot;&gt;<span class="hljs-subst">$&#123;animal.fact&#125;</span>&lt;/p&gt;</span><span class="hljs-string">            &lt;ul class=&quot;details&quot;&gt;</span><span class="hljs-string">                &lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Scientific Name&lt;/span&gt;: <span class="hljs-subst">$&#123;animal.scientificName&#125;</span>&lt;/li&gt;</span><span class="hljs-string">                &lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Average Lifespan&lt;/span&gt;: <span class="hljs-subst">$&#123;animal.lifespan&#125;</span>&lt;/li&gt;</span><span class="hljs-string">                &lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Average Speed&lt;/span&gt;: <span class="hljs-subst">$&#123;animal.speed&#125;</span>&lt;/li&gt;</span><span class="hljs-string">                &lt;li&gt;&lt;span class=&quot;bold&quot;&gt;Diet&lt;/span&gt;: <span class="hljs-subst">$&#123;animal.diet&#125;</span>&lt;/li&gt;</span><span class="hljs-string">            &lt;/ul&gt;</span><span class="hljs-string">            &lt;p class=&quot;brief&quot;&gt;<span class="hljs-subst">$&#123;animal.summary&#125;</span>&lt;/p&gt;</span><span class="hljs-string">        &lt;/div&gt;</span><span class="hljs-string">    &lt;/div&gt;`</span>;    <span class="hljs-keyword">return</span> cardHTML;&#125;<span class="hljs-built_in">console</span>.log(createAnimalTradingCardHTML(cheetah));</code></pre><h3 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h3><p>In ES6, you can extract data from arrays and objects into distinct variables using destructuring.</p><p>This probably sounds like something you’ve done before, for example, look at the two code snippets below that extract data using pre-ES6 techniques:</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> point = [<span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">-34</span>];<span class="hljs-keyword">const</span> x = point[<span class="hljs-number">0</span>];<span class="hljs-keyword">const</span> y = point[<span class="hljs-number">1</span>];<span class="hljs-keyword">const</span> z = point[<span class="hljs-number">2</span>];<span class="hljs-built_in">console</span>.log(x, y, z);</code></pre><p>The example above shows extracting values from an array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> gemstone = &#123;  type: <span class="hljs-string">&#x27;quartz&#x27;</span>,  color: <span class="hljs-string">&#x27;rose&#x27;</span>,  karat: <span class="hljs-number">21.29</span>&#125;;<span class="hljs-keyword">const</span> type = gemstone.type;<span class="hljs-keyword">const</span> color = gemstone.color;<span class="hljs-keyword">const</span> karat = gemstone.karat;<span class="hljs-built_in">console</span>.log(type, color, karat);</code></pre><p>And this example shows extracting values from an object.</p><p>Both are pretty straightforward, however, neither of these examples are actually using destructuring.</p><p>Destructuring borrows inspiration from languages like Perl and Python by allowing you to specify the elements you want to extract from an array or object on the left side of an assignment. It sounds a little weird, but you can actually achieve the same result as before, but with much less code; and it’s still easy to understand.</p><p>Destructuring values from an array</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> point = [<span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">-34</span>];<span class="hljs-keyword">const</span> [x, y, z] = point;<span class="hljs-built_in">console</span>.log(x, y, z);</code></pre><p>In this example, the brackets [ ] represent the array being destructured and x, y, and z represent the variables where you want to store the values from the array. Notice how you don’t have to specify the indexes for where to extract the values from because the indexes are implied.</p><p>TIP: You can also ignore values when destructuring arrays. For example, const [x, , z] = point; ignores the y coordinate and discards it.</p><p>Destructuring values from an object</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> gemstone = &#123;  type: <span class="hljs-string">&#x27;quartz&#x27;</span>,  color: <span class="hljs-string">&#x27;rose&#x27;</span>,  karat: <span class="hljs-number">21.29</span>&#125;;<span class="hljs-keyword">const</span> &#123;type, color, karat&#125; = gemstone;<span class="hljs-built_in">console</span>.log(type, color, karat);</code></pre><p>In this example, the curly braces { } represent the object being destructured and type, color, and karat represent the variables where you want to store the properties from the object. Notice how you don’t have to specify the property from where to extract the values. Because gemstone has a property named type, the value is automatically stored in the type variable. Similarly, gemstone has a color property, so the value of color automatically gets stored in the color variable. And it’s the same with karat.</p><blockquote><p>TIP: You can also specify the values you want to select when destructuring an object. For example, let {color} = gemstone; will only select the color property from the gemstone object.</p></blockquote><p>What do you expect to be returned from calling getArea()?</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> circle = &#123;  radius: <span class="hljs-number">10</span>,  color: <span class="hljs-string">&#x27;orange&#x27;</span>,  getArea: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.PI * <span class="hljs-built_in">this</span>.radius * <span class="hljs-built_in">this</span>.radius;  &#125;,  getCircumference: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI * <span class="hljs-built_in">this</span>.radius;  &#125;&#125;;<span class="hljs-keyword">let</span> &#123;radius, getArea, getCircumference&#125; = circle;</code></pre><p>Use array destructuring to pull out the three colors from the array of things and store them into the variables one, two, and three.</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * Programming Quiz: Destructuring Arrays</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Use destructuring to initialize the variables `one`, `two`, and `three`</span><span class="hljs-comment"> * with the colors from the `things` array.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">const</span> things = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;basketball&#x27;</span>, <span class="hljs-string">&#x27;paperclip&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;computer&#x27;</span>, <span class="hljs-string">&#x27;earth&#x27;</span>, <span class="hljs-string">&#x27;udacity&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;dogs&#x27;</span>];<span class="hljs-keyword">const</span> [one, , , two, , , , three] = things;<span class="hljs-keyword">const</span> colors = <span class="hljs-string">`List of Colors</span><span class="hljs-string">1. <span class="hljs-subst">$&#123;one&#125;</span></span><span class="hljs-string">2. <span class="hljs-subst">$&#123;two&#125;</span></span><span class="hljs-string">3. <span class="hljs-subst">$&#123;three&#125;</span>`</span>;<span class="hljs-built_in">console</span>.log(colors);</code></pre><h2 id="the-Document-Object-Model-–-The-DOM"><a href="#the-Document-Object-Model-–-The-DOM" class="headerlink" title="the Document Object Model – The DOM"></a>the Document Object Model – The DOM</h2><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;callout&#x27;</span>);<span class="hljs-built_in">document</span>.getElementsByClassName();<span class="hljs-built_in">document</span>.getElementsByTagName();</code></pre><h2 id="Advanced-JavaScript"><a href="#Advanced-JavaScript" class="headerlink" title="Advanced JavaScript"></a>Advanced JavaScript</h2><h3 id="Array-unshift"><a href="#Array-unshift" class="headerlink" title="Array.unshift()"></a>Array.unshift()</h3><p>The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<span class="hljs-built_in">console</span>.log(array1.unshift(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<span class="hljs-comment">// expected output: 5</span><span class="hljs-built_in">console</span>.log(array1);<span class="hljs-comment">// expected output: Array [4, 5, 1, 2, 3]</span><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];arr.unshift(<span class="hljs-number">0</span>); <span class="hljs-comment">// result of call is 3, the new array length</span><span class="hljs-comment">// arr is [0, 1, 2]</span>arr.unshift(<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>); <span class="hljs-comment">// = 5</span><span class="hljs-comment">// arr is [-2, -1, 0, 1, 2]</span>arr.unshift([<span class="hljs-number">-3</span>]);<span class="hljs-comment">// arr is [[-3], -2, -1, 0, 1, 2]</span></code></pre><h3 id="Array-shift"><a href="#Array-shift" class="headerlink" title="Array.shift()"></a>Array.shift()</h3><p>The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<span class="hljs-keyword">var</span> firstElement = array1.shift();<span class="hljs-built_in">console</span>.log(array1);<span class="hljs-comment">// expected output: Array [2, 3]</span><span class="hljs-built_in">console</span>.log(firstElement);<span class="hljs-comment">// expected output: 1</span><span class="hljs-comment">// Removing an element from an array</span><span class="hljs-keyword">var</span> myFish = [<span class="hljs-string">&#x27;angel&#x27;</span>, <span class="hljs-string">&#x27;clown&#x27;</span>, <span class="hljs-string">&#x27;mandarin&#x27;</span>, <span class="hljs-string">&#x27;surgeon&#x27;</span>];<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;myFish before:&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(myFish));<span class="hljs-comment">// myFish before: [&#x27;angel&#x27;, &#x27;clown&#x27;, &#x27;mandarin&#x27;, &#x27;surgeon&#x27;]</span><span class="hljs-keyword">var</span> shifted = myFish.shift();<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;myFish after:&#x27;</span>, myFish);<span class="hljs-comment">// myFish after: [&#x27;clown&#x27;, &#x27;mandarin&#x27;, &#x27;surgeon&#x27;]</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Removed this element:&#x27;</span>, shifted);<span class="hljs-comment">// Removed this element: angel</span><span class="hljs-comment">// Using shift() method in while loop</span><span class="hljs-keyword">var</span> names = [<span class="hljs-string">&quot;Andrew&quot;</span>, <span class="hljs-string">&quot;Edward&quot;</span>, <span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-string">&quot;Chris&quot;</span> ,<span class="hljs-string">&quot;John&quot;</span>];<span class="hljs-keyword">while</span>( (i = names.shift()) !== <span class="hljs-literal">undefined</span> ) &#123;    <span class="hljs-built_in">console</span>.log(i);&#125;<span class="hljs-comment">// Andrew, Edward, Paul, Chris, John</span></code></pre><h3 id="Array-concat"><a href="#Array-concat" class="headerlink" title="Array.concat()"></a>Array.concat()</h3><p>The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<span class="hljs-keyword">var</span> array2 = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>];<span class="hljs-built_in">console</span>.log(array1.concat(array2));<span class="hljs-comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></code></pre><p>Concatenating two arrays</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> alpha = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<span class="hljs-keyword">var</span> numeric = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];alpha.concat(numeric);<span class="hljs-comment">// result in [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span></code></pre><p>Concatenating three arrays</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],    num2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],    num3 = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<span class="hljs-keyword">var</span> nums = num1.concat(num2, num3);<span class="hljs-built_in">console</span>.log(nums);<span class="hljs-comment">// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre><p>Concatenating values to an array</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> alpha = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<span class="hljs-keyword">var</span> alphaNumeric = alpha.concat(<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<span class="hljs-built_in">console</span>.log(alphaNumeric);<span class="hljs-comment">// results in [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span></code></pre><p>Concatenating nested arrays</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num1 = [[<span class="hljs-number">1</span>]];<span class="hljs-keyword">var</span> num2 = [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>]];<span class="hljs-keyword">var</span> nums = num1.concat(num2);<span class="hljs-built_in">console</span>.log(nums);<span class="hljs-comment">// results in [[1], 2, [3]]</span><span class="hljs-comment">// modify the first element of num1</span>num1[<span class="hljs-number">0</span>].push(<span class="hljs-number">4</span>);<span class="hljs-built_in">console</span>.log(nums);<span class="hljs-comment">// results in [[1, 4], 2, [3]]</span></code></pre><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p>The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">roughScale</span>(<span class="hljs-params">x, base</span>) </span>&#123;  <span class="hljs-keyword">var</span> parsed = <span class="hljs-built_in">parseInt</span>(x, base);  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(parsed)) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> &#125;  <span class="hljs-keyword">return</span> parsed * <span class="hljs-number">100</span>;&#125;<span class="hljs-built_in">console</span>.log(roughScale(<span class="hljs-string">&#x27; 0xF&#x27;</span>, <span class="hljs-number">16</span>));<span class="hljs-comment">// expected output: 1500</span><span class="hljs-built_in">console</span>.log(roughScale(<span class="hljs-string">&#x27;321&#x27;</span>, <span class="hljs-number">2</span>));<span class="hljs-comment">// expected output: 0</span></code></pre><p>The following examples all return 15:</p><pre><code class="hljs javascript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27; 0xF&#x27;</span>, <span class="hljs-number">16</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27; F&#x27;</span>, <span class="hljs-number">16</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;17&#x27;</span>, <span class="hljs-number">8</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-number">021</span>, <span class="hljs-number">8</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;015&#x27;</span>, <span class="hljs-number">10</span>);   <span class="hljs-comment">// parseInt(015, 10); will return 15</span><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">15.99</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;15,123&#x27;</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;FXX123&#x27;</span>, <span class="hljs-number">16</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;1111&#x27;</span>, <span class="hljs-number">2</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;15 * 3&#x27;</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;15e2&#x27;</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;15px&#x27;</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-number">13</span>);</code></pre><p>The following examples all return NaN:</p><pre><code class="hljs javascript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// Not a number at all</span><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;546&#x27;</span>, <span class="hljs-number">2</span>);   <span class="hljs-comment">// Digits are not valid for binary representations</span></code></pre><p>The following examples all return -15:</p><pre><code class="hljs javascript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;-F&#x27;</span>, <span class="hljs-number">16</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;-0F&#x27;</span>, <span class="hljs-number">16</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;-0XF&#x27;</span>, <span class="hljs-number">16</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-number">-15.1</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27; -17&#x27;</span>, <span class="hljs-number">8</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27; -15&#x27;</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;-1111&#x27;</span>, <span class="hljs-number">2</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;-15e1&#x27;</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;-12&#x27;</span>, <span class="hljs-number">13</span>);</code></pre><p>The following examples all return 4:</p><pre><code class="hljs javascript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">4.7</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">parseInt</span>(<span class="hljs-number">4.7</span> * <span class="hljs-number">1e22</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">// Very large number becomes 4</span><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">0.00000000000434</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">// Very small number becomes 4</span></code></pre><p>The following example returns 224:</p><pre><code class="hljs javascript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;0e0&#x27;</span>, <span class="hljs-number">16</span>);</code></pre><h3 id="Timing-Events"><a href="#Timing-Events" class="headerlink" title="Timing Events"></a>Timing Events</h3><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span></code></pre><h3 id="toUpperCase-method"><a href="#toUpperCase-method" class="headerlink" title="toUpperCase method"></a>toUpperCase method</h3><h3 id="Bitwise-operators"><a href="#Bitwise-operators" class="headerlink" title="Bitwise operators"></a>Bitwise operators</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators</a></p><p><a href="https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97/6888804?fr=aladdin">https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97/6888804?fr=aladdin</a></p><p><a href="https://www.cnblogs.com/xljzlw/p/4231354.html">https://www.cnblogs.com/xljzlw/p/4231354.html</a></p><h3 id="Arguments-object"><a href="#Arguments-object" class="headerlink" title="Arguments object"></a>Arguments object</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">https://developer.mozilla.org/en-US/docs/Web/JavaScript</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply</a></p><h3 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h3><p><a href="http://www.cnblogs.com/-ShiL/archive/2012/04/06/Star201204061009.html">http://www.cnblogs.com/-ShiL/archive/2012/04/06/Star201204061009.html</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Check port listening</title>
    <link href="/2015/09/23/Check-port-listening/"/>
    <url>/2015/09/23/Check-port-listening/</url>
    
    <content type="html"><![CDATA[<p>If you’re troubleshooting a service that you know is running normally the next step is to ensure it’s listening on the correct network port.</p><p>The netstat command shows the services listening to ports on a Linux server and the details of any connections currently made to them. The connection details to consider during basic network daemon troubleshooting are the addresses that the daemon is listening on (including the port number), the daemon’s process identifier (PID), and the program name.</p><p>You need to run netstat on the server that is running the service. Netstat is not affected by your firewall configuration.</p><p>Note: You can also use the isof and ss commands to check ports. Many of the command flags contained in this article are the same when you run the isof and ss commands. However, the output returned when you use these commands might not resemble the output of the netstat tool. For more information about both commands, see the isof and ss command manuals.</p><p>Check ports<br>To list the TCP ports that are being listened on, and the name of each listener’s daemon and its PID, run the following command:</p><pre><code class="hljs bash">sudo netstat -plnt</code></pre><p>The following example shows the output for three common programs that are listening on three different sockets.</p><pre><code class="hljs bash">$ sudo netstat -plntActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program nametcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      3686/mysqldtcp        0      0 :::443                      :::*                        LISTEN      2218/httpdtcp        0      0 :::80                       :::*                        LISTEN      2218/httpdtcp        0      0 :::22                       :::*                        LISTEN      1051/sshd</code></pre><p>Filter the list<br>If the list of listening daemons is long you can use grep to filter it. For example, to filter out everything except the default web server port, 80, run the following command:</p><pre><code class="hljs bash">$ sudo netstat -plnt | grep <span class="hljs-string">&#x27;:80&#x27;</span>tcp        0      0 :::80                       :::*                        LISTEN      8448/httpd</code></pre><p>Analyze the results<br>Common outcomes are as follows:</p><p>Nothing is listening on the port. Check the service configuration files, and then restart the service.<br>The correct service is listening on the correct port. In this case you need to test the service more thoroughly. Skip to the article on testing the listening service for response using netcat.<br>Something other than the expected service appears to be listening on the port.<br>Note: A super-server, such as xinetd, might be listening on the port. Check your xinetd configuration to ensure that this behavior is acceptable.</p><p>If something else is listening on the port, you can disable the program by running sudo service httpd stop, or change its configuration so that it no longer listens on the port. When netstat shows the port is free, enable the correct service (for example sudo service vsftpd start).</p><p>If you make any changes because the incorrect service is listening, run the netstat command again. If netstat doesn’t show the program listening on the correct port, you need to address its configuration before you go any further.</p><p>If you make changes at this point, be sure to test your setup; you might have resolved your issue.</p><p>If using the netstat did not resolve your port issues, continue to test connections to the service by using the netcat command.</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Create swap file on Linux</title>
    <link href="/2015/06/25/Create-swap-file-on-Linux/"/>
    <url>/2015/06/25/Create-swap-file-on-Linux/</url>
    
    <content type="html"><![CDATA[<p>Swap is space on a disk that is reserved to be used as virtual memory. When a Linux server runs out of memory, the kernel can move inactive processes into swap to make room for active processes in the working memory.</p><p>A swap partition is not present on Cloud Servers by default, but swap can be added to a server by allocating a swap file. The performance of a swap file is similar to that of a swap partition while making it easier to control the swap size without repartitioning a volume. How aggressively the server will use this swap space can be controlled by modifying the system’s swappiness value.</p><p>The steps below discuss the creation of a swap file on Linux and modifying the system swappiness value.</p><p>How do I add swap?<br>To add 1GB of swap to your server, for example, follow these steps:</p><p>Create the file to be used for swap.</p><pre><code class="hljs bash">sudo fallocate -l 1G /mnt/1GB.swap</code></pre><p>If fallocate fails or is not installed, run the following command.</p><pre><code class="hljs bash">sudo dd <span class="hljs-keyword">if</span>=/dev/zero of=/mnt/1GB.swap bs=1024 count=1048576</code></pre><p>Format the file for swap.</p><pre><code class="hljs bash">sudo mkswap /mnt/1GB.swap</code></pre><p>Add the file to the system as a swap file.</p><pre><code class="hljs bash">sudo swapon /mnt/1GB.swap</code></pre><p>Add this line to the end of <code>/etc/fstab</code> to make the change permanent.</p><pre><code class="hljs bash">/mnt/1GB.swap  none  swap  sw 0  0</code></pre><p>To change the swappiness value edit <code>/etc/sysctl.conf</code> and add the following line.</p><pre><code class="hljs bash">vm.swappiness=10</code></pre><p>Start with a value of 10 and increase if needed. A typical default value for swappiness is 60. The higher the number (up to 100), the more often swap is utilized.</p><p>How much swappiness affects performance depends on how your memory is being used, so experiment to find an optimal value. At 0 the swap file will only be used when the system runs completely out of memory. Higher values let the system swap idle processes out to allow the system to free memory for disk caching, potentially improving overall system performance.</p><p>Check that the swap file was created.</p><pre><code class="hljs bash">sudo swapon -s</code></pre><p>Reboot the server to ensure that the changes go into effect.</p><p>Note: By following these instructions on a newly created Rackspace server, the resulting swap file is world-readable. To prevent the file from being world-readable, you should set up the correct permissions on the swap partition/file by running the following command to change the permission:</p><pre><code class="hljs bash">sudo chmod 600 /mnt/1GB.swap</code></pre><p>In most cases, the only user that needs access to the swap partition is the root user.</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic MySQL Setup on Ubuntu Server</title>
    <link href="/2014/07/14/Basic-MySQL-Setup-on-Ubuntu-Server/"/>
    <url>/2014/07/14/Basic-MySQL-Setup-on-Ubuntu-Server/</url>
    
    <content type="html"><![CDATA[<h2 id="Install-MySQL-on-Ubuntu"><a href="#Install-MySQL-on-Ubuntu" class="headerlink" title="Install MySQL on Ubuntu"></a>Install MySQL on Ubuntu</h2><p>It is pretty simple to install MySQL on Ubuntu:</p><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install mysql-servermysql_secure_installation</code></pre><h2 id="Access-the-Database"><a href="#Access-the-Database" class="headerlink" title="Access the Database"></a>Access the Database</h2><p>Login to the database</p><pre><code class="hljs bash">mysql -u root -p</code></pre><h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Show all the databases</p><pre><code class="hljs mysql">SHOW DATABASES;</code></pre><p>Create a database</p><pre><code class="hljs mysql">CREATE DATABASE database_name;SHOW DATABASES;DROP DATABASE database_name;USE database_name;SHOW tables;</code></pre>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python metaclasses</title>
    <link href="/2014/01/03/Python-metaclasses/"/>
    <url>/2014/01/03/Python-metaclasses/</url>
    
    <content type="html"><![CDATA[<h2 id="Classes-as-objects"><a href="#Classes-as-objects" class="headerlink" title="Classes as objects"></a>Classes as objects</h2><p>Object-oriented programming (OOP) is a programming paradigm based on the concept of “objects”, which may encapsulate data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.</p><p>Class is the blue print of objects, and it describes the common attributes and methods. An object is a instance of a class.</p><p>For example:</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectCreator</span>(<span class="hljs-params">object</span>):</span>    <span class="hljs-keyword">pass</span>my_object = ObjectCreator()my_object&lt;__main__.ObjectCreator object at <span class="hljs-number">0x7fda8be489b0</span>&gt;</code></pre><p>However, what gonna happen if we run the following code?</p><pre><code class="hljs python">print(ObjectCreator)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">__main__</span>.<span class="hljs-title">ObjectCreator</span>&#x27;&gt;</span></code></pre><p>This object (the class) is itself capable of creating objects (the instances), and this is why it’s a class.</p><p>But still, it’s an object, and therefore:</p><ul><li>you can assign it to a variable</li><li>you can copy it</li><li>you can add attributes to it</li><li>you can pass it as a function parameter</li></ul><h2 id="Creating-classes-dynamically"><a href="#Creating-classes-dynamically" class="headerlink" title="Creating classes dynamically"></a>Creating classes dynamically</h2><p>ObjectCreator as a class can be print out, and it self is a kind of object.</p><p>In some cases, we want to dynamicly create different kinds of class.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_cls</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fake</span>(<span class="hljs-params">object</span>):</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">method_a</span>(<span class="hljs-params">self, n</span>):</span>            <span class="hljs-keyword">return</span> n    Fake.a = a    Fake.b = b    <span class="hljs-keyword">return</span> Fakeclass1 = generate_cls(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)class2 = generate_cls(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)ins1 = class1()ins1.a, ins1.b, ins1.method_a(<span class="hljs-number">10</span>)ins2 = class2()ins2.a, ins2.b, ins2.method_a(<span class="hljs-number">10</span>)</code></pre><p>There are some drawbacks for the procedure:</p><ul><li>Class name is not easy to modify</li><li>When the attributes and methods rolling into a big number, it is hard to handle.</li></ul><p>Here is a another way to do the job:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">method_a</span>(<span class="hljs-params">self, n</span>):</span>    <span class="hljs-keyword">return</span> nins = type(<span class="hljs-string">&#x27;Fake&#x27;</span>, (), &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;method_a&#x27;</span>: method_a&#125;)()ins.a, ins.b, ins.method_a(<span class="hljs-number">10</span>)</code></pre><p>The <strong>type</strong> function can show you which type a object belongs to, and it has another useage, that is, create a class.</p><pre><code class="hljs python">type(<span class="hljs-number">1</span>)type(<span class="hljs-string">&#x27;1&#x27;</span>)type(ObjectCreator)type(ObjectCreator())</code></pre><p><strong>Type</strong> it self is a function that takes descriptions of class as inputs and a class as output, which is a <strong>metaclass</strong>. So actually, <strong>type</strong> as a metaclass create every class. As we all know that in Python, everything, and I mean everything, is an object in Python. That includes ints, strings, functions and classes. All of them are objects. And all of them have been created from a class:</p><pre><code class="hljs python">age = <span class="hljs-number">15</span>age.__class__name = <span class="hljs-string">&#x27;bob&#x27;</span>name.__class__</code></pre><p>Now, what is the <strong>class</strong> of any <strong>class</strong> ?</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>age.__class__.__class__&lt;type <span class="hljs-string">&#x27;type&#x27;</span>&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>name.__class__.__class__&lt;type <span class="hljs-string">&#x27;type&#x27;</span>&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>foo.__class__.__class__&lt;type <span class="hljs-string">&#x27;type&#x27;</span>&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>b.__class__.__class__&lt;type <span class="hljs-string">&#x27;type&#x27;</span>&gt;</code></pre><p>So, a metaclass is just the stuff that creates class objects. You can call it a ‘class factory’ if you wish. Type is the built-in metaclass Python uses, but of course, you can create your own metaclass.</p><h2 id="The-metaclass-attribute"><a href="#The-metaclass-attribute" class="headerlink" title="The metaclass attribute"></a>The <strong>metaclass</strong> attribute</h2><p>You can add a <strong>metaclass</strong> attribute when you write a class:</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">object</span>):</span>    __metaclass__ = something...    [...]</code></pre><p>If you do so, Python will use the metaclass to create the class Foo.</p><p>You write class Foo(object) first, but the class object Foo is not created in memory yet.</p><p>Python will look for <strong>metaclass</strong> in the class definition. If it finds it, it will use it to create the object class Foo. If it doesn’t, it will use type to create the class.</p><p>When you do:</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">Bar</span>):</span>    <span class="hljs-keyword">pass</span></code></pre><p>Python does the following:</p><p>Is there a <strong>metaclass</strong> attribute in Foo?</p><p>If yes, create in memory a class object (I said a class object, stay with me here), with the name Foo by using what is in <strong>metaclass</strong>.</p><p>If Python can’t find <strong>metaclass</strong>, it will look for a <strong>metaclass</strong> at the MODULE level, and try to do the same (but only for classes that don’t inherit anything, basically old-style classes).</p><p>Then if it can’t find any <strong>metaclass</strong> at all, it will use the Bar’s (the first parent) own metaclass (which might be the default type) to create the class object.</p><p>Be careful here that the <strong>metaclass</strong> attribute will not be inherited, the metaclass of the parent (Bar.<strong>class</strong>) will be. If Bar used a <strong>metaclass</strong> attribute that created Bar with type() (and not type.<strong>new</strong>()), the subclasses will not inherit that behavior.</p><p>Now the big question is, what can you put in <strong>metaclass</strong> ?</p><p>The answer is: something that can create a class.</p><p>And what can create a class? type, or anything that subclasses or uses it.</p><h2 id="Custom-metaclasses"><a href="#Custom-metaclasses" class="headerlink" title="Custom metaclasses"></a>Custom metaclasses</h2><p>The main purpose of a metaclass is to change the class automatically, when it’s created.</p><p>You usually do this for APIs, where you want to create classes matching the current context.</p><p>Imagine a stupid example, where you decide that all classes in your module should have their attributes written in uppercase. There are several ways to do this, but one way is to set <strong>metaclass</strong> at the module level.</p><p>This way, all classes of this module will be created using this metaclass, and we just have to tell the metaclass to turn all attributes to uppercase.</p><p>Luckily, <strong>metaclass</strong> can actually be any callable, it doesn’t need to be a formal class (I know, something with ‘class’ in its name doesn’t need to be a class, go figure… but it’s helpful).</p><p>So we will start with a simple example, by using a function.</p><pre><code class="hljs python"><span class="hljs-comment"># the metaclass will automatically get passed the same argument</span><span class="hljs-comment"># that you usually pass to `type`</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upper_attr</span>(<span class="hljs-params">future_class_name, future_class_parents, future_class_attr</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">      Return a class object, with the list of its attribute turned</span><span class="hljs-string">      into uppercase.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># pick up any attribute that doesn&#x27;t start with &#x27;__&#x27; and uppercase it</span>    uppercase_attr = &#123;&#125;    <span class="hljs-keyword">for</span> name, val <span class="hljs-keyword">in</span> future_class_attr.items():        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name.startswith(<span class="hljs-string">&#x27;__&#x27;</span>):            uppercase_attr[name.upper()] = val        <span class="hljs-keyword">else</span>:            uppercase_attr[name] = val    <span class="hljs-comment"># let `type` do the class creation</span>    <span class="hljs-keyword">return</span> type(future_class_name, future_class_parents, uppercase_attr)__metaclass__ = upper_attr <span class="hljs-comment"># this will affect all classes in the module</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>():</span> <span class="hljs-comment"># global __metaclass__ won&#x27;t work with &quot;object&quot; though</span>    <span class="hljs-comment"># but we can define __metaclass__ here instead to affect only this class</span>    __metaclass__ = upper_attr    <span class="hljs-comment"># and this will work with &quot;object&quot; children</span>    bar = <span class="hljs-string">&#x27;bip&#x27;</span>print(hasattr(Foo, <span class="hljs-string">&#x27;bar&#x27;</span>))<span class="hljs-comment"># Out: False</span>print(hasattr(Foo, <span class="hljs-string">&#x27;BAR&#x27;</span>))<span class="hljs-comment"># Out: True</span>f = Foo()print(f.BAR)<span class="hljs-comment"># Out: &#x27;bip&#x27;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Metaclass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consolas Font On Ubuntu</title>
    <link href="/2013/07/14/Consolas-Font-On-Ubuntu/"/>
    <url>/2013/07/14/Consolas-Font-On-Ubuntu/</url>
    
    <content type="html"><![CDATA[<p>Consolas is not installed by default on Ubuntu, but we can get it.</p><pre><code class="hljs bash">sudo apt-get install font-managersudo apt-get install cabextract</code></pre><p>Create a file named consolas.sh with following contents:</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-built_in">set</span> -e<span class="hljs-built_in">set</span> -xmkdir temp<span class="hljs-built_in">cd</span> tempwget http://download.microsoft.com/download/E/6/7/E675FFFC-2A6D-4AB0-B3EB-27C9F8C8F696/PowerPointViewer.execabextract -L -F ppviewer.cab PowerPointViewer.execabextract ppviewer.cab</code></pre><p>Run it!</p><pre><code class="hljs bash">bash consolas.sh</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Zen of Python</title>
    <link href="/2012/11/27/The-Zen-of-Python/"/>
    <url>/2012/11/27/The-Zen-of-Python/</url>
    
    <content type="html"><![CDATA[<h2 id="PEP-20-–-The-Zen-of-Python-by-Tim-Peters"><a href="#PEP-20-–-The-Zen-of-Python-by-Tim-Peters" class="headerlink" title="PEP 20 – The Zen of Python, by Tim Peters"></a>PEP 20 – The Zen of Python, by Tim Peters</h2><p>Long time Pythoneer Tim Peters succinctly channels the BDFL’s guiding principles for Python’s design into 20 aphorisms, only 19 of which have been written down.</p><p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
